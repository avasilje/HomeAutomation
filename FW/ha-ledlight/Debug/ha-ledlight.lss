
ha-ledlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  00800090  00800090  00000a16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109b  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000635  00000000  00000000  00002261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  00002898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e3  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4e  00000000  00000000  00003223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00003e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	9b c2       	rjmp	.+1334   	; 0x544 <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	72 c2       	rjmp	.+1252   	; 0x4fc <__vector_11>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e2 e5       	ldi	r30, 0x52	; 82
  3e:	f9 e0       	ldi	r31, 0x09	; 9
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a0 39       	cpi	r26, 0x90	; 144
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a0 e9       	ldi	r26, 0x90	; 144
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	aa 3f       	cpi	r26, 0xFA	; 250
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	0d d2       	rcall	.+1050   	; 0x478 <main>
  5e:	77 c4       	rjmp	.+2286   	; 0x94e <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <FATAL_TRAP>:
#endif

uint16_t gus_trap_line;

void FATAL_TRAP (uint16_t us_line_num) {
    gus_trap_line = us_line_num;
  62:	90 93 a3 00 	sts	0x00A3, r25
  66:	80 93 a2 00 	sts	0x00A2, r24
  6a:	ff cf       	rjmp	.-2      	; 0x6a <FATAL_TRAP+0x8>

0000006c <set_steady_state>:

void set_steady_state(uint8_t led_num, uint8_t val)
{
    // Val 0 ==> On ==> output 1
    // Val 1 ==> Off ==> output 0
    switch(led_num) {
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	09 f1       	breq	.+66     	; 0xb2 <set_steady_state+0x46>
  70:	b8 f0       	brcs	.+46     	; 0xa0 <set_steady_state+0x34>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	19 f0       	breq	.+6      	; 0x7c <set_steady_state+0x10>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	51 f0       	breq	.+20     	; 0x8e <set_steady_state+0x22>
  7a:	08 95       	ret
            TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
            break;

        case 2:
            // OUT_SW0_2 ==> OC1B
            PORTB = val ? (PORTB & ~OUT_SW0_2_MASK) : (PORTB | OUT_SW0_2_MASK);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	61 11       	cpse	r22, r1
  80:	34 c0       	rjmp	.+104    	; 0xea <set_steady_state+0x7e>
  82:	84 60       	ori	r24, 0x04	; 4
  84:	88 bb       	out	0x18, r24	; 24
            TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0));
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	8f 7c       	andi	r24, 0xCF	; 207
  8a:	8f bd       	out	0x2f, r24	; 47
            break;
  8c:	08 95       	ret

        case 3:
            // OUT_SW1_3 ==> OC0B
            PORTD = val ? (PORTD & ~OUT_SW1_3_MASK) : (PORTB | OUT_SW1_3_MASK);
  8e:	61 11       	cpse	r22, r1
  90:	25 c0       	rjmp	.+74     	; 0xdc <set_steady_state+0x70>
  92:	88 b3       	in	r24, 0x18	; 24
  94:	80 62       	ori	r24, 0x20	; 32
  96:	82 bb       	out	0x12, r24	; 18
            TCCR0A &= ~((1 << COM0B1) | (1 << COM0B0));
  98:	80 b7       	in	r24, 0x30	; 48
  9a:	8f 7c       	andi	r24, 0xCF	; 207
  9c:	80 bf       	out	0x30, r24	; 48
  9e:	08 95       	ret
    // Val 0 ==> On ==> output 1
    // Val 1 ==> Off ==> output 0
    switch(led_num) {
        case 0:
            // OUT_SW0_0 PINB2  ==> OC0A
            PORTB = val ? (PORTB & ~OUT_SW0_0_MASK) : (PORTB | OUT_SW0_0_MASK);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	61 11       	cpse	r22, r1
  a4:	15 c0       	rjmp	.+42     	; 0xd0 <set_steady_state+0x64>
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	88 bb       	out	0x18, r24	; 24
            TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0));
  aa:	80 b7       	in	r24, 0x30	; 48
  ac:	8f 73       	andi	r24, 0x3F	; 63
  ae:	80 bf       	out	0x30, r24	; 48
            break;
  b0:	08 95       	ret

        case 1:
            // OUT_SW0_1 ==> OC1A
            PORTB = val ? (PORTB & ~OUT_SW0_1_MASK) : (PORTB | OUT_SW0_1_MASK);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	61 11       	cpse	r22, r1
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <set_steady_state+0x58>
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	88 bb       	out	0x18, r24	; 24
            TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
  bc:	8f b5       	in	r24, 0x2f	; 47
  be:	8f 73       	andi	r24, 0x3F	; 63
  c0:	8f bd       	out	0x2f, r24	; 47
            break;
  c2:	08 95       	ret
            TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0));
            break;

        case 1:
            // OUT_SW0_1 ==> OC1A
            PORTB = val ? (PORTB & ~OUT_SW0_1_MASK) : (PORTB | OUT_SW0_1_MASK);
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	88 bb       	out	0x18, r24	; 24
            TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	8f 73       	andi	r24, 0x3F	; 63
  cc:	8f bd       	out	0x2f, r24	; 47
            break;
  ce:	08 95       	ret
    // Val 0 ==> On ==> output 1
    // Val 1 ==> Off ==> output 0
    switch(led_num) {
        case 0:
            // OUT_SW0_0 PINB2  ==> OC0A
            PORTB = val ? (PORTB & ~OUT_SW0_0_MASK) : (PORTB | OUT_SW0_0_MASK);
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	88 bb       	out	0x18, r24	; 24
            TCCR0A &= ~((1 << COM0A1) | (1 << COM0A0));
  d4:	80 b7       	in	r24, 0x30	; 48
  d6:	8f 73       	andi	r24, 0x3F	; 63
  d8:	80 bf       	out	0x30, r24	; 48
            break;
  da:	08 95       	ret
            TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0));
            break;

        case 3:
            // OUT_SW1_3 ==> OC0B
            PORTD = val ? (PORTD & ~OUT_SW1_3_MASK) : (PORTB | OUT_SW1_3_MASK);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	82 bb       	out	0x12, r24	; 18
            TCCR0A &= ~((1 << COM0B1) | (1 << COM0B0));
  e2:	80 b7       	in	r24, 0x30	; 48
  e4:	8f 7c       	andi	r24, 0xCF	; 207
  e6:	80 bf       	out	0x30, r24	; 48
  e8:	08 95       	ret
            TCCR1A &= ~((1 << COM1A1) | (1 << COM1A0));
            break;

        case 2:
            // OUT_SW0_2 ==> OC1B
            PORTB = val ? (PORTB & ~OUT_SW0_2_MASK) : (PORTB | OUT_SW0_2_MASK);
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	88 bb       	out	0x18, r24	; 24
            TCCR1A &= ~((1 << COM1B1) | (1 << COM1B0));
  ee:	8f b5       	in	r24, 0x2f	; 47
  f0:	8f 7c       	andi	r24, 0xCF	; 207
  f2:	8f bd       	out	0x2f, r24	; 47
            break;
  f4:	08 95       	ret

000000f6 <set_pwm>:
void set_pwm(uint8_t led_num, uint8_t pwm_val)
{
    uint8_t volatile *pwm_reg_ptr = NULL;

    // Select PWM register
    switch(led_num) {
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	69 f1       	breq	.+90     	; 0x154 <set_pwm+0x5e>
  fa:	30 f1       	brcs	.+76     	; 0x148 <set_pwm+0x52>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	19 f0       	breq	.+6      	; 0x106 <set_pwm+0x10>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	91 f0       	breq	.+36     	; 0x128 <set_pwm+0x32>
 104:	08 95       	ret
        case 1:
            TCCR1A |= (1 << COM1A1);
            pwm_reg_ptr = &OCR1AL;
            break;
        case 2:
            TCCR1A |= (1 << COM1B1);
 106:	8f b5       	in	r24, 0x2f	; 47
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	8f bd       	out	0x2f, r24	; 47
            pwm_reg_ptr = &OCR1BL;
 10c:	e8 e4       	ldi	r30, 0x48	; 72
 10e:	f0 e0       	ldi	r31, 0x00	; 0
            pwm_reg_ptr = &OCR0B;
            break;
    }

    // Avoid too small changes in order to avoid flickering
    if (pwm_reg_ptr && abs(pwm_val - *pwm_reg_ptr) > 2) {
 110:	20 81       	ld	r18, Z
 112:	86 2f       	mov	r24, r22
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	82 1b       	sub	r24, r18
 118:	91 09       	sbc	r25, r1
 11a:	97 fd       	sbrc	r25, 7
 11c:	11 c0       	rjmp	.+34     	; 0x140 <set_pwm+0x4a>
 11e:	03 97       	sbiw	r24, 0x03	; 3
 120:	14 f0       	brlt	.+4      	; 0x126 <set_pwm+0x30>
        *pwm_reg_ptr = pwm_val;
 122:	60 83       	st	Z, r22
 124:	08 95       	ret
 126:	08 95       	ret
        case 2:
            TCCR1A |= (1 << COM1B1);
            pwm_reg_ptr = &OCR1BL;
            break;
        case 3:
            TCCR0A |= (1 << COM0B1);
 128:	80 b7       	in	r24, 0x30	; 48
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 bf       	out	0x30, r24	; 48
            pwm_reg_ptr = &OCR0B;
 12e:	ec e5       	ldi	r30, 0x5C	; 92
 130:	f0 e0       	ldi	r31, 0x00	; 0
            break;
    }

    // Avoid too small changes in order to avoid flickering
    if (pwm_reg_ptr && abs(pwm_val - *pwm_reg_ptr) > 2) {
 132:	20 81       	ld	r18, Z
 134:	86 2f       	mov	r24, r22
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	82 1b       	sub	r24, r18
 13a:	91 09       	sbc	r25, r1
 13c:	97 ff       	sbrs	r25, 7
 13e:	ef cf       	rjmp	.-34     	; 0x11e <set_pwm+0x28>
 140:	91 95       	neg	r25
 142:	81 95       	neg	r24
 144:	91 09       	sbc	r25, r1
 146:	eb cf       	rjmp	.-42     	; 0x11e <set_pwm+0x28>
    uint8_t volatile *pwm_reg_ptr = NULL;

    // Select PWM register
    switch(led_num) {
        case 0:
            TCCR0A |= (1 << COM0A1);   // Clear OC0A on Compare Match
 148:	80 b7       	in	r24, 0x30	; 48
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 bf       	out	0x30, r24	; 48
            pwm_reg_ptr = &OCR0A;
 14e:	e6 e5       	ldi	r30, 0x56	; 86
 150:	f0 e0       	ldi	r31, 0x00	; 0
            break;
 152:	de cf       	rjmp	.-68     	; 0x110 <set_pwm+0x1a>
        case 1:
            TCCR1A |= (1 << COM1A1);
 154:	8f b5       	in	r24, 0x2f	; 47
 156:	80 68       	ori	r24, 0x80	; 128
 158:	8f bd       	out	0x2f, r24	; 47
            pwm_reg_ptr = &OCR1AL;
 15a:	ea e4       	ldi	r30, 0x4A	; 74
 15c:	f0 e0       	ldi	r31, 0x00	; 0
            break;
 15e:	d8 cf       	rjmp	.-80     	; 0x110 <set_pwm+0x1a>

00000160 <set_intensity>:
        *pwm_reg_ptr = pwm_val;
    }

}
void set_intensity (uint8_t led_num, uint8_t intensity_idx)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c8 2f       	mov	r28, r24
 166:	d6 2f       	mov	r29, r22
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;
 168:	63 31       	cpi	r22, 0x13	; 19
 16a:	80 f0       	brcs	.+32     	; 0x18c <set_intensity+0x2c>

    if (intensity_idx == 0) {
        set_steady_state(led_num, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
        set_steady_state(led_num, 1);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	8c 2f       	mov	r24, r28
 170:	7d df       	rcall	.-262    	; 0x6c <set_steady_state>
 172:	d2 e1       	ldi	r29, 0x12	; 18
    } else {
        set_pwm(led_num, guca_pwm_intensity_table[intensity_idx]);
    }

    gta_leds[led_num].uc_current_intensity_idx = intensity_idx;
 174:	ec 2f       	mov	r30, r28
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ec 0f       	add	r30, r28
 17a:	f1 1d       	adc	r31, r1
 17c:	ec 0f       	add	r30, r28
 17e:	f1 1d       	adc	r31, r1
 180:	eb 56       	subi	r30, 0x6B	; 107
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	d0 83       	st	Z, r29
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret
}
void set_intensity (uint8_t led_num, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;

    if (intensity_idx == 0) {
 18c:	66 23       	and	r22, r22
 18e:	49 f0       	breq	.+18     	; 0x1a2 <set_intensity+0x42>
        set_steady_state(led_num, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
 190:	62 31       	cpi	r22, 0x12	; 18
 192:	61 f3       	breq	.-40     	; 0x16c <set_intensity+0xc>
        set_steady_state(led_num, 1);
    } else {
        set_pwm(led_num, guca_pwm_intensity_table[intensity_idx]);
 194:	e6 2f       	mov	r30, r22
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e4 58       	subi	r30, 0x84	; 132
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	60 81       	ld	r22, Z
 19e:	ab df       	rcall	.-170    	; 0xf6 <set_pwm>
 1a0:	e9 cf       	rjmp	.-46     	; 0x174 <set_intensity+0x14>
void set_intensity (uint8_t led_num, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;

    if (intensity_idx == 0) {
        set_steady_state(led_num, 0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	63 df       	rcall	.-314    	; 0x6c <set_steady_state>
 1a6:	e6 cf       	rjmp	.-52     	; 0x174 <set_intensity+0x14>

000001a8 <light_on>:
    gta_leds[led_num].uc_current_intensity_idx = intensity_idx;
}

void light_on(){
    uint8_t led_mask = 1;
    uint8_t disabled_mask = guca_disable_roll_table[guc_leds_disabled_idx];
 1a8:	e0 91 a5 00 	lds	r30, 0x00A5
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ef 59       	subi	r30, 0x9F	; 159
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	50 81       	ld	r21, Z

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++, led_mask <<= 1) {
        LED_INFO *led = &gta_leds[uc_i];
        led->uc_target_intensity_idx =  led_mask & disabled_mask ? 0 : guc_on_intensity_idx;
 1b4:	60 91 a4 00 	lds	r22, 0x00A4
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0

    gta_leds[led_num].uc_current_intensity_idx = intensity_idx;
}

void light_on(){
    uint8_t led_mask = 1;
 1bc:	21 e0       	ldi	r18, 0x01	; 1
    uint8_t disabled_mask = guca_disable_roll_table[guc_leds_disabled_idx];

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++, led_mask <<= 1) {
        LED_INFO *led = &gta_leds[uc_i];
        led->uc_target_intensity_idx =  led_mask & disabled_mask ? 0 : guc_on_intensity_idx;
        led->uc_fade_timer = LED_FADEIN_PERIOD;
 1be:	41 e0       	ldi	r20, 0x01	; 1
    uint8_t led_mask = 1;
    uint8_t disabled_mask = guca_disable_roll_table[guc_leds_disabled_idx];

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++, led_mask <<= 1) {
        LED_INFO *led = &gta_leds[uc_i];
        led->uc_target_intensity_idx =  led_mask & disabled_mask ? 0 : guc_on_intensity_idx;
 1c0:	32 2f       	mov	r19, r18
 1c2:	35 23       	and	r19, r21
 1c4:	a9 f0       	breq	.+42     	; 0x1f0 <light_on+0x48>
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	eb 56       	subi	r30, 0x6B	; 107
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	31 83       	std	Z+1, r19	; 0x01
        led->uc_fade_timer = LED_FADEIN_PERIOD;
 1d0:	42 83       	std	Z+2, r20	; 0x02

void light_on(){
    uint8_t led_mask = 1;
    uint8_t disabled_mask = guca_disable_roll_table[guc_leds_disabled_idx];

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++, led_mask <<= 1) {
 1d2:	22 0f       	add	r18, r18
 1d4:	03 96       	adiw	r24, 0x03	; 3
 1d6:	8c 30       	cpi	r24, 0x0C	; 12
 1d8:	91 05       	cpc	r25, r1
 1da:	91 f7       	brne	.-28     	; 0x1c0 <light_on+0x18>
        LED_INFO *led = &gta_leds[uc_i];
        led->uc_target_intensity_idx =  led_mask & disabled_mask ? 0 : guc_on_intensity_idx;
        led->uc_fade_timer = LED_FADEIN_PERIOD;
    }

    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE] = LED_MODE_ON;        // mode is not ON yet, but will be soon
 1dc:	80 91 90 00 	lds	r24, 0x0090
 1e0:	90 91 91 00 	lds	r25, 0x0091
 1e4:	22 e0       	ldi	r18, 0x02	; 2
 1e6:	fc 01       	movw	r30, r24
 1e8:	22 8f       	std	Z+26, r18	; 0x1a
    ha_nlink_node_send(g_ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
 1ea:	43 e0       	ldi	r20, 0x03	; 3
 1ec:	6f ef       	ldi	r22, 0xFF	; 255
 1ee:	5f c2       	rjmp	.+1214   	; 0x6ae <ha_nlink_node_send>
    uint8_t led_mask = 1;
    uint8_t disabled_mask = guca_disable_roll_table[guc_leds_disabled_idx];

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++, led_mask <<= 1) {
        LED_INFO *led = &gta_leds[uc_i];
        led->uc_target_intensity_idx =  led_mask & disabled_mask ? 0 : guc_on_intensity_idx;
 1f0:	36 2f       	mov	r19, r22
 1f2:	ea cf       	rjmp	.-44     	; 0x1c8 <light_on+0x20>

000001f4 <light_off>:
}

void light_off(){

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++) {
        gta_leds[uc_i].uc_target_intensity_idx = 0;
 1f4:	10 92 96 00 	sts	0x0096, r1
        gta_leds[uc_i].uc_fade_timer = LED_FADEOUT_PERIOD;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 97 00 	sts	0x0097, r24
}

void light_off(){

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++) {
        gta_leds[uc_i].uc_target_intensity_idx = 0;
 1fe:	10 92 99 00 	sts	0x0099, r1
        gta_leds[uc_i].uc_fade_timer = LED_FADEOUT_PERIOD;
 202:	80 93 9a 00 	sts	0x009A, r24
}

void light_off(){

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++) {
        gta_leds[uc_i].uc_target_intensity_idx = 0;
 206:	10 92 9c 00 	sts	0x009C, r1
        gta_leds[uc_i].uc_fade_timer = LED_FADEOUT_PERIOD;
 20a:	80 93 9d 00 	sts	0x009D, r24
}

void light_off(){

    for (uint8_t uc_i = 0; uc_i < LEDS_NUM; uc_i ++) {
        gta_leds[uc_i].uc_target_intensity_idx = 0;
 20e:	10 92 9f 00 	sts	0x009F, r1
        gta_leds[uc_i].uc_fade_timer = LED_FADEOUT_PERIOD;
 212:	80 93 a0 00 	sts	0x00A0, r24
    }
    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE] = LED_MODE_OFF;        // mode is not OFF yet, but will be soon
 216:	80 91 90 00 	lds	r24, 0x0090
 21a:	90 91 91 00 	lds	r25, 0x0091
 21e:	23 e0       	ldi	r18, 0x03	; 3
 220:	fc 01       	movw	r30, r24
 222:	22 8f       	std	Z+26, r18	; 0x1a
    ha_nlink_node_send(g_ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
 224:	43 e0       	ldi	r20, 0x03	; 3
 226:	6f ef       	ldi	r22, 0xFF	; 255
 228:	42 c2       	rjmp	.+1156   	; 0x6ae <ha_nlink_node_send>

0000022a <dimm_on>:
}

void dimm_on(){

    if (guc_on_intensity_idx == 0) {
 22a:	80 91 a4 00 	lds	r24, 0x00A4
 22e:	81 11       	cpse	r24, r1
 230:	04 c0       	rjmp	.+8      	; 0x23a <dimm_on+0x10>
        guc_on_intensity_idx = DIMM_ON_INTENSITIES_NUM - 1;
 232:	8a e0       	ldi	r24, 0x0A	; 10
 234:	80 93 a4 00 	sts	0x00A4, r24
        return;
 238:	08 95       	ret
    }
    guc_on_intensity_idx --;
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	80 93 a4 00 	sts	0x00A4, r24
    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_INTENSITY] = guc_on_intensity_idx;
 240:	e0 91 90 00 	lds	r30, 0x0090
 244:	f0 91 91 00 	lds	r31, 0x0091
 248:	84 8f       	std	Z+28, r24	; 0x1c
    light_on();
 24a:	ae cf       	rjmp	.-164    	; 0x1a8 <light_on>

0000024c <led_disable_roll>:
}

void led_disable_roll(){
    guc_leds_disabled_idx++;
 24c:	80 91 a5 00 	lds	r24, 0x00A5
 250:	8f 5f       	subi	r24, 0xFF	; 255
    if (guc_leds_disabled_idx >= ROLL_ON_MASK_NUM) guc_leds_disabled_idx = 0;
 252:	80 31       	cpi	r24, 0x10	; 16
 254:	48 f0       	brcs	.+18     	; 0x268 <led_disable_roll+0x1c>
 256:	10 92 a5 00 	sts	0x00A5, r1
 25a:	80 e0       	ldi	r24, 0x00	; 0
    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_DIS_MASK ] = guc_leds_disabled_idx;
 25c:	e0 91 90 00 	lds	r30, 0x0090
 260:	f0 91 91 00 	lds	r31, 0x0091
 264:	83 8f       	std	Z+27, r24	; 0x1b
    light_on();
 266:	a0 cf       	rjmp	.-192    	; 0x1a8 <light_on>
    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_INTENSITY] = guc_on_intensity_idx;
    light_on();
}

void led_disable_roll(){
    guc_leds_disabled_idx++;
 268:	80 93 a5 00 	sts	0x00A5, r24
    if (guc_leds_disabled_idx >= ROLL_ON_MASK_NUM) guc_leds_disabled_idx = 0;
    g_ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_DIS_MASK ] = guc_leds_disabled_idx;
 26c:	e0 91 90 00 	lds	r30, 0x0090
 270:	f0 91 91 00 	lds	r31, 0x0091
 274:	83 8f       	std	Z+27, r24	; 0x1b
    light_on();
 276:	98 cf       	rjmp	.-208    	; 0x1a8 <light_on>

00000278 <sw_behavior_control>:
}

void sw_behavior_control(uint8_t uc_switch, uint8_t uc_event)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	1f 92       	push	r1
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
    // No event - no action
    if (uc_event == 0)
 282:	66 23       	and	r22, r22
 284:	89 f0       	breq	.+34     	; 0x2a8 <sw_behavior_control+0x30>
        return;

    // Ignore event if switch masked out
    if ((guc_sw_event_mask & (1 << uc_switch)) == 0)
 286:	20 91 a8 00 	lds	r18, 0x00A8
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	08 2e       	mov	r0, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <sw_behavior_control+0x1c>
 290:	35 95       	asr	r19
 292:	27 95       	ror	r18
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <sw_behavior_control+0x18>
 298:	20 ff       	sbrs	r18, 0
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <sw_behavior_control+0x30>
        return;

    // ----------------------------------------------------
    // --- LED OFF
    // ----------------------------------------------------
    if (guc_curr_led_mode == LED_MODE_OFF && uc_event) {
 29c:	90 91 a6 00 	lds	r25, 0x00A6
 2a0:	93 30       	cpi	r25, 0x03	; 3
 2a2:	b1 f0       	breq	.+44     	; 0x2d0 <sw_behavior_control+0x58>
    } // End of LED OFF state

    // ----------------------------------------------------
    // --- LED ON
    // ----------------------------------------------------
    else if (guc_curr_led_mode == LED_MODE_ON && uc_event){
 2a4:	92 30       	cpi	r25, 0x02	; 2
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <sw_behavior_control+0x38>
        }

    } // End of LED ON mode

    return;
}
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

    // ----------------------------------------------------
    // --- LED ON
    // ----------------------------------------------------
    else if (guc_curr_led_mode == LED_MODE_ON && uc_event){
        if (uc_event == SW_EVENT_OFF_ON) {                                     // LED ON state   OFF --> ON
 2b0:	62 30       	cpi	r22, 0x02	; 2
 2b2:	b1 f1       	breq	.+108    	; 0x320 <sw_behavior_control+0xa8>
            // switch pressed
            // Disable all switches excluding just pressed
            guc_sw_event_mask = (1 << uc_switch);
        }

        else if (uc_event == SW_EVENT_ON_HOLD) {                               // LED ON state   ON --> HOLD
 2b4:	63 30       	cpi	r22, 0x03	; 3
 2b6:	d1 f0       	breq	.+52     	; 0x2ec <sw_behavior_control+0x74>
            for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led++) {
                dimm_on(uc_led);
            }
        }

        else if (uc_event == SW_EVENT_HOLD_OFF) {                             // LED ON state   HOLD --> OFF
 2b8:	64 30       	cpi	r22, 0x04	; 4
 2ba:	09 f4       	brne	.+2      	; 0x2be <sw_behavior_control+0x46>
 2bc:	3f c0       	rjmp	.+126    	; 0x33c <sw_behavior_control+0xc4>
            guc_curr_led_mode = LED_MODE_ON_TRANS;
            // Disable all switches until leds in steady state
            guc_sw_event_mask = 0;
        }

        else if (uc_event == SW_EVENT_ON_OFF) {                               // LED ON state   ON --> OFF
 2be:	61 30       	cpi	r22, 0x01	; 1
 2c0:	99 f7       	brne	.-26     	; 0x2a8 <sw_behavior_control+0x30>
            // switch released after ON
            light_off();
 2c2:	98 df       	rcall	.-208    	; 0x1f4 <light_off>

            // Set current mode to TRANSITION to OFF
            guc_curr_led_mode = LED_MODE_OFF_TRANS;
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	80 93 a6 00 	sts	0x00A6, r24
            // Disable all switches until leds in steady state
            guc_sw_event_mask = 0;
 2ca:	10 92 a8 00 	sts	0x00A8, r1
 2ce:	ec cf       	rjmp	.-40     	; 0x2a8 <sw_behavior_control+0x30>

    // ----------------------------------------------------
    // --- LED OFF
    // ----------------------------------------------------
    if (guc_curr_led_mode == LED_MODE_OFF && uc_event) {
        if (uc_event == SW_EVENT_OFF_ON) {                              // LED OFF mode     OFF --> ON
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	d9 f0       	breq	.+54     	; 0x30a <sw_behavior_control+0x92>
            // Switch pressed
            light_on();
            guc_sw_event_mask = (1 << uc_switch);
        }

        else if (uc_event == SW_EVENT_ON_HOLD) {                          // LED OFF mode    ON --> HOLD
 2d4:	63 30       	cpi	r22, 0x03	; 3
 2d6:	e1 f1       	breq	.+120    	; 0x350 <sw_behavior_control+0xd8>
            // switch held
            led_disable_roll();
        }

        else if (uc_event == SW_EVENT_HOLD_OFF ||                         // Led OFF mode   HOLD --> OFF
 2d8:	64 30       	cpi	r22, 0x04	; 4
 2da:	51 f1       	breq	.+84     	; 0x330 <sw_behavior_control+0xb8>
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	21 f7       	brne	.-56     	; 0x2a8 <sw_behavior_control+0x30>
            // Set current mode to TRANSITION to ON.
            // Disable all switches and wait until LEDs will
            // be in steady state again.
            // LEDs intensities were changed while switch was
            // held and may still may not reach the target value.
            guc_curr_led_mode = LED_MODE_ON_TRANS;
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	80 93 a6 00 	sts	0x00A6, r24
            guc_sw_event_mask = 0;
 2e6:	10 92 a8 00 	sts	0x00A8, r1
 2ea:	de cf       	rjmp	.-68     	; 0x2a8 <sw_behavior_control+0x30>
        }

        else if (uc_event == SW_EVENT_ON_HOLD) {                               // LED ON state   ON --> HOLD
            // Switch held - Dimm intensity
            for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led++) {
                dimm_on(uc_led);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	9c df       	rcall	.-200    	; 0x22a <dimm_on>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	99 df       	rcall	.-206    	; 0x22a <dimm_on>
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	96 df       	rcall	.-212    	; 0x22a <dimm_on>
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	90 e0       	ldi	r25, 0x00	; 0
        }

    } // End of LED ON mode

    return;
}
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
        }

        else if (uc_event == SW_EVENT_ON_HOLD) {                               // LED ON state   ON --> HOLD
            // Switch held - Dimm intensity
            for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led++) {
                dimm_on(uc_led);
 308:	90 cf       	rjmp	.-224    	; 0x22a <dimm_on>
    // --- LED OFF
    // ----------------------------------------------------
    if (guc_curr_led_mode == LED_MODE_OFF && uc_event) {
        if (uc_event == SW_EVENT_OFF_ON) {                              // LED OFF mode     OFF --> ON
            // Switch pressed
            light_on();
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	4d df       	rcall	.-358    	; 0x1a8 <light_on>
            guc_sw_event_mask = (1 << uc_switch);
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	01 c0       	rjmp	.+2      	; 0x316 <sw_behavior_control+0x9e>
 314:	99 0f       	add	r25, r25
 316:	8a 95       	dec	r24
 318:	ea f7       	brpl	.-6      	; 0x314 <sw_behavior_control+0x9c>
 31a:	90 93 a8 00 	sts	0x00A8, r25
 31e:	c4 cf       	rjmp	.-120    	; 0x2a8 <sw_behavior_control+0x30>
    // ----------------------------------------------------
    else if (guc_curr_led_mode == LED_MODE_ON && uc_event){
        if (uc_event == SW_EVENT_OFF_ON) {                                     // LED ON state   OFF --> ON
            // switch pressed
            // Disable all switches excluding just pressed
            guc_sw_event_mask = (1 << uc_switch);
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	01 c0       	rjmp	.+2      	; 0x326 <sw_behavior_control+0xae>
 324:	99 0f       	add	r25, r25
 326:	8a 95       	dec	r24
 328:	ea f7       	brpl	.-6      	; 0x324 <sw_behavior_control+0xac>
 32a:	90 93 a8 00 	sts	0x00A8, r25
 32e:	bc cf       	rjmp	.-136    	; 0x2a8 <sw_behavior_control+0x30>
        else if (uc_event == SW_EVENT_HOLD_OFF ||                         // Led OFF mode   HOLD --> OFF
                 uc_event == SW_EVENT_ON_OFF) {                           // Led OFF mode   ON   --> OFF
            // switch released
            if (uc_event == SW_EVENT_HOLD_OFF) {
                // Save disabled leds in eeprom when roll finished
                guc_eeprom_save_flags |= EEPROM_SAVE_FLAG_DISABLED;
 330:	80 91 a1 00 	lds	r24, 0x00A1
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 93 a1 00 	sts	0x00A1, r24
 33a:	d2 cf       	rjmp	.-92     	; 0x2e0 <sw_behavior_control+0x68>
            }
        }

        else if (uc_event == SW_EVENT_HOLD_OFF) {                             // LED ON state   HOLD --> OFF
            // switch released after HOLD
            guc_eeprom_save_flags |= EEPROM_SAVE_FLAG_INTENSITY;
 33c:	80 91 a1 00 	lds	r24, 0x00A1
 340:	82 60       	ori	r24, 0x02	; 2
 342:	80 93 a1 00 	sts	0x00A1, r24

            // Set current mode to TRANSITION to ON
            guc_curr_led_mode = LED_MODE_ON_TRANS;
 346:	60 93 a6 00 	sts	0x00A6, r22
            // Disable all switches until leds in steady state
            guc_sw_event_mask = 0;
 34a:	10 92 a8 00 	sts	0x00A8, r1
 34e:	ac cf       	rjmp	.-168    	; 0x2a8 <sw_behavior_control+0x30>
        }

    } // End of LED ON mode

    return;
}
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
            guc_sw_event_mask = (1 << uc_switch);
        }

        else if (uc_event == SW_EVENT_ON_HOLD) {                          // LED OFF mode    ON --> HOLD
            // switch held
            led_disable_roll();
 356:	7a cf       	rjmp	.-268    	; 0x24c <led_disable_roll>

00000358 <ledlight_on_rx>:

    return;
}

void ledlight_on_rx(uint8_t idx, const uint8_t *buf_in)
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	eb 01       	movw	r28, r22
    UNREFERENCED_PARAM(idx);
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];
 362:	0c 81       	ldd	r16, Y+4	; 0x04
        // Direct LEDLIGHT state info. Typically received from user console
//         uint8_t mask, pwm, steady_detected, steady_val;
//         set_pwm(mask, pwm);
//         set_steady_state(steady_detected, steady_val);

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	80 33       	cpi	r24, 0x30	; 48
 368:	29 f0       	breq	.+10     	; 0x374 <ledlight_on_rx+0x1c>

    } else {
        // Unexpected event type
        return;
    }
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

        // Sanity check
        if (len > SWITCHES_NUM)
            return;

        for (uint8_t i = 0; i < len; i++) {
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	80 0f       	add	r24, r16
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	b8 f7       	brcc	.-18     	; 0x36a <ledlight_on_rx+0x12>
 37c:	25 96       	adiw	r28, 0x05	; 5
 37e:	10 e0       	ldi	r17, 0x00	; 0
            uint8_t sw_event = buf_in[NLINK_HDR_OFF_DATA + i] & 0x0F;
 380:	89 91       	ld	r24, Y+
 382:	68 2f       	mov	r22, r24
 384:	6f 70       	andi	r22, 0x0F	; 15
            uint8_t sw_num = buf_in[NLINK_HDR_OFF_DATA + i] >> 4;
            sw_behavior_control(sw_num, sw_event);
 386:	82 95       	swap	r24
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	76 df       	rcall	.-276    	; 0x278 <sw_behavior_control>

        // Sanity check
        if (len > SWITCHES_NUM)
            return;

        for (uint8_t i = 0; i < len; i++) {
 38c:	1f 5f       	subi	r17, 0xFF	; 255
 38e:	10 13       	cpse	r17, r16
 390:	f7 cf       	rjmp	.-18     	; 0x380 <ledlight_on_rx+0x28>

    } else {
        // Unexpected event type
        return;
    }
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <ha_ledlight_init>:

void ha_ledlight_init()
{
    node_t *node = ha_nlink_node_register(LEDLIGHT_ADDR, NODE_TYPE_LEDLIGHT, ledlight_on_rx);
 39c:	4c ea       	ldi	r20, 0xAC	; 172
 39e:	51 e0       	ldi	r21, 0x01	; 1
 3a0:	60 e2       	ldi	r22, 0x20	; 32
 3a2:	80 e7       	ldi	r24, 0x70	; 112
 3a4:	35 d1       	rcall	.+618    	; 0x610 <ha_nlink_node_register>
 3a6:	fc 01       	movw	r30, r24
    g_ll_node = node;
 3a8:	90 93 91 00 	sts	0x0091, r25
 3ac:	80 93 90 00 	sts	0x0090, r24

    // Disable all event until light is in steady state after power on
    guc_sw_event_mask = 0;
 3b0:	10 92 a8 00 	sts	0x00A8, r1

    // Switch LEDs off on startup
    guc_curr_led_mode = LED_MODE_OFF_TRANS;
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	80 93 a6 00 	sts	0x00A6, r24
    guc_leds_steady = 0;
 3ba:	10 92 a7 00 	sts	0x00A7, r1

    guc_leds_disabled_idx = 0;                      // All Enabled
 3be:	10 92 a5 00 	sts	0x00A5, r1
    guc_on_intensity_idx = INTENSITIES_NUM - 1;     // Max
 3c2:	82 e1       	ldi	r24, 0x12	; 18
 3c4:	80 93 a4 00 	sts	0x00A4, r24

    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_LEDLIGHT;
 3c8:	90 e2       	ldi	r25, 0x20	; 32
 3ca:	90 8f       	std	Z+24, r25	; 0x18
    node->tx_buf[NLINK_HDR_OFF_LEN] = 3;
 3cc:	93 e0       	ldi	r25, 0x03	; 3
 3ce:	91 8f       	std	Z+25, r25	; 0x19
    // node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE     ] = LED_MODE_OFF;
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_DIS_MASK ] = guc_leds_disabled_idx;
 3d0:	13 8e       	std	Z+27, r1	; 0x1b
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_INTENSITY] = guc_on_intensity_idx;
 3d2:	84 8f       	std	Z+28, r24	; 0x1c

    light_off();
 3d4:	0f cf       	rjmp	.-482    	; 0x1f4 <light_off>

000003d6 <leds_intensity_control>:
}

void leds_intensity_control()
{
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
    uint8_t uc_target_intensity, uc_current_intensity;

    guc_leds_steady = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 a7 00 	sts	0x00A7, r24
 3e4:	c7 e9       	ldi	r28, 0x97	; 151
 3e6:	d0 e0       	ldi	r29, 0x00	; 0

    // Loop over all LEDs
    for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led ++) {
 3e8:	10 e0       	ldi	r17, 0x00	; 0
                gta_leds[uc_led].uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
                // FADE OUT
                uc_current_intensity --;
                gta_leds[uc_led].uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
 3ea:	01 e0       	ldi	r16, 0x01	; 1
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 97       	sbiw	r30, 0x01	; 1
    guc_leds_steady = 1;

    // Loop over all LEDs
    for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led ++) {

        uc_target_intensity = gta_leds[uc_led].uc_target_intensity_idx;
 3f0:	90 81       	ld	r25, Z
 3f2:	31 97       	sbiw	r30, 0x01	; 1
        uc_current_intensity = gta_leds[uc_led].uc_current_intensity_idx;
 3f4:	60 81       	ld	r22, Z

        if (uc_target_intensity == uc_current_intensity) {
 3f6:	96 17       	cp	r25, r22
 3f8:	69 f0       	breq	.+26     	; 0x414 <leds_intensity_control+0x3e>
            continue;
        }

        guc_leds_steady = 0;
 3fa:	10 92 a7 00 	sts	0x00A7, r1

        // LEDs' intensity are in transition
        // check fade timer
        gta_leds[uc_led].uc_fade_timer --;
 3fe:	88 81       	ld	r24, Y
 400:	81 50       	subi	r24, 0x01	; 1
 402:	88 83       	st	Y, r24
        if ( gta_leds[uc_led].uc_fade_timer == 0) {
 404:	81 11       	cpse	r24, r1
 406:	06 c0       	rjmp	.+12     	; 0x414 <leds_intensity_control+0x3e>
            // Its time to update fade in/out
            if (uc_target_intensity > uc_current_intensity) {
 408:	69 17       	cp	r22, r25
 40a:	98 f4       	brcc	.+38     	; 0x432 <leds_intensity_control+0x5c>
                // FADE IN
                uc_current_intensity ++;
 40c:	6f 5f       	subi	r22, 0xFF	; 255
                gta_leds[uc_led].uc_fade_timer = LED_FADEIN_STEP_PERIOD;
 40e:	08 83       	st	Y, r16
                // FADE OUT
                uc_current_intensity --;
                gta_leds[uc_led].uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
            }

            set_intensity(uc_led, uc_current_intensity);
 410:	81 2f       	mov	r24, r17
 412:	a6 de       	rcall	.-692    	; 0x160 <set_intensity>
    uint8_t uc_target_intensity, uc_current_intensity;

    guc_leds_steady = 1;

    // Loop over all LEDs
    for (uint8_t uc_led = 0; uc_led < LEDS_NUM; uc_led ++) {
 414:	1f 5f       	subi	r17, 0xFF	; 255
 416:	23 96       	adiw	r28, 0x03	; 3
 418:	14 30       	cpi	r17, 0x04	; 4
 41a:	41 f7       	brne	.-48     	; 0x3ec <leds_intensity_control+0x16>
    } // End all LEDs loop

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (guc_curr_led_mode == LED_MODE_ON_TRANS) {
 41c:	80 91 a6 00 	lds	r24, 0x00A6
 420:	84 30       	cpi	r24, 0x04	; 4
 422:	d9 f0       	breq	.+54     	; 0x45a <leds_intensity_control+0x84>
            guc_sw_event_mask = 0xFF;
            guc_curr_led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (guc_curr_led_mode == LED_MODE_OFF_TRANS) {
 424:	85 30       	cpi	r24, 0x05	; 5
 426:	51 f0       	breq	.+20     	; 0x43c <leds_intensity_control+0x66>
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret
            if (uc_target_intensity > uc_current_intensity) {
                // FADE IN
                uc_current_intensity ++;
                gta_leds[uc_led].uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
 432:	96 17       	cp	r25, r22
 434:	68 f7       	brcc	.-38     	; 0x410 <leds_intensity_control+0x3a>
                // FADE OUT
                uc_current_intensity --;
 436:	61 50       	subi	r22, 0x01	; 1
                gta_leds[uc_led].uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
 438:	08 83       	st	Y, r16
 43a:	ea cf       	rjmp	.-44     	; 0x410 <leds_intensity_control+0x3a>
            guc_curr_led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (guc_curr_led_mode == LED_MODE_OFF_TRANS) {
        if (guc_leds_steady) {
 43c:	80 91 a7 00 	lds	r24, 0x00A7
 440:	88 23       	and	r24, r24
 442:	91 f3       	breq	.-28     	; 0x428 <leds_intensity_control+0x52>
            guc_sw_event_mask = 0xFF;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	80 93 a8 00 	sts	0x00A8, r24
            guc_curr_led_mode = LED_MODE_OFF;
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	80 93 a6 00 	sts	0x00A6, r24
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (guc_curr_led_mode == LED_MODE_ON_TRANS) {
        if (guc_leds_steady) {
 45a:	80 91 a7 00 	lds	r24, 0x00A7
 45e:	88 23       	and	r24, r24
 460:	19 f3       	breq	.-58     	; 0x428 <leds_intensity_control+0x52>
            guc_sw_event_mask = 0xFF;
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	80 93 a8 00 	sts	0x00A8, r24
            guc_curr_led_mode = LED_MODE_ON;
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	80 93 a6 00 	sts	0x00A6, r24
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <main>:

int main(void)
{
 478:	8f ef       	ldi	r24, 0xFF	; 255
	...
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){

        __asm__ __volatile__ ("    nop\n    nop\n    nop\n    nop\n"\
 49a:	81 50       	subi	r24, 0x01	; 1
}

int main(void)
{
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){
 49c:	71 f7       	brne	.-36     	; 0x47a <main+0x2>
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"
                                ::);
    }

    DDRB = 0;
 49e:	17 ba       	out	0x17, r1	; 23

    // Out switches - output 0
    DDRB |= OUT_SW0_MASK;
 4a0:	87 b3       	in	r24, 0x17	; 23
 4a2:	8c 61       	ori	r24, 0x1C	; 28
 4a4:	87 bb       	out	0x17, r24	; 23
    PORTB &= ~OUT_SW0_MASK;
 4a6:	88 b3       	in	r24, 0x18	; 24
 4a8:	83 7e       	andi	r24, 0xE3	; 227
 4aa:	88 bb       	out	0x18, r24	; 24

    DDRD |= OUT_SW1_MASK;
 4ac:	8d 9a       	sbi	0x11, 5	; 17
    PORTD &= ~OUT_SW1_MASK;
 4ae:	95 98       	cbi	0x12, 5	; 18

    // Set timer 0 & 1 to 8-bit Fast PWM, no prescaler
    TCCR0A = (1 << WGM00) | (1 << WGM01);
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	80 bf       	out	0x30, r24	; 48
    TCCR0B = (1 << CS00);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	83 bf       	out	0x33, r24	; 51

    TCCR1A = (1 << WGM10);
 4b8:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1 << WGM12) | (1 << CS10);
 4ba:	89 e0       	ldi	r24, 0x09	; 9
 4bc:	8e bd       	out	0x2e, r24	; 46

    // Enable Timer0 overflow interrupt
    TIMSK = (1<<TOIE0);
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	89 bf       	out	0x39, r24	; 57

    ha_nlink_init();
 4c2:	95 d0       	rcall	.+298    	; 0x5ee <ha_nlink_init>

    ha_ledlight_init();
 4c4:	6b df       	rcall	.-298    	; 0x39c <ha_ledlight_init>

    sei();
 4c6:	78 94       	sei
	...
        __asm__ __volatile__ ("    nop\n    nop\n    nop\n    nop\n"\
                                "    nop\n    nop\n    nop\n    nop\n"\
                                "    nop\n    nop\n    nop\n    nop\n"\
                                "    nop\n    nop\n    nop\n    nop\n"
                                ::);
        ha_nlink_check_rx();
 4e8:	f3 d0       	rcall	.+486    	; 0x6d0 <ha_nlink_check_rx>
        ha_nlink_check_tx();
 4ea:	28 d1       	rcall	.+592    	; 0x73c <ha_nlink_check_tx>
        if (guc_led_intenisity_timer) {
 4ec:	80 91 92 00 	lds	r24, 0x0092
 4f0:	88 23       	and	r24, r24
 4f2:	51 f3       	breq	.-44     	; 0x4c8 <main+0x50>
            guc_led_intenisity_timer = 0;
 4f4:	10 92 92 00 	sts	0x0092, r1
            leds_intensity_control();
 4f8:	6e df       	rcall	.-292    	; 0x3d6 <leds_intensity_control>
 4fa:	e6 cf       	rjmp	.-52     	; 0x4c8 <main+0x50>

000004fc <__vector_11>:
        }
#endif
    }
}

ISR(PCINT0_vect) {
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	2f 93       	push	r18
 508:	3f 93       	push	r19
 50a:	4f 93       	push	r20
 50c:	5f 93       	push	r21
 50e:	6f 93       	push	r22
 510:	7f 93       	push	r23
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	af 93       	push	r26
 518:	bf 93       	push	r27
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31

    if ((NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK) == 0) {
 51e:	b0 9b       	sbis	0x16, 0	; 22
        // Call NLINK start callback on RX pin falling edge
        isr_nlink_io_on_start_edge();
 520:	f7 d1       	rcall	.+1006   	; 0x910 <isr_nlink_io_on_start_edge>
    }
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_6>:

// Interrupt triggered every 256 timer clocks and count periods
ISR(TIMER0_OVF_vect) {
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	4f 93       	push	r20
 554:	5f 93       	push	r21
 556:	6f 93       	push	r22
 558:	7f 93       	push	r23
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	af 93       	push	r26
 560:	bf 93       	push	r27
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31

    // 256 clocks @ 20 MHz ==> 12.8usec

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
 566:	80 91 60 00 	lds	r24, 0x0060
 56a:	87 fd       	sbrc	r24, 7
 56c:	05 c0       	rjmp	.+10     	; 0x578 <__vector_6+0x34>
        g_ha_nlink_timer_cnt++;
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 60 00 	sts	0x0060, r24
        if (g_ha_nlink_timer_cnt == 20) {
 574:	84 31       	cpi	r24, 0x14	; 20
 576:	31 f1       	breq	.+76     	; 0x5c4 <__vector_6+0x80>
            isr_nlink_io_on_timer();
        }
    }

    // Call every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
 578:	80 91 93 00 	lds	r24, 0x0093
 57c:	90 91 94 00 	lds	r25, 0x0094
 580:	01 96       	adiw	r24, 0x01	; 1
    if (g_led_intensity_cnt == 781) {
 582:	8d 30       	cpi	r24, 0x0D	; 13
 584:	23 e0       	ldi	r18, 0x03	; 3
 586:	92 07       	cpc	r25, r18
 588:	a9 f0       	breq	.+42     	; 0x5b4 <__vector_6+0x70>
            isr_nlink_io_on_timer();
        }
    }

    // Call every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
 58a:	90 93 94 00 	sts	0x0094, r25
 58e:	80 93 93 00 	sts	0x0093, r24
    if (g_led_intensity_cnt == 781) {
        g_led_intensity_cnt = 0;
        guc_led_intenisity_timer = 1;
    }

}
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	bf 91       	pop	r27
 598:	af 91       	pop	r26
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	7f 91       	pop	r23
 5a0:	6f 91       	pop	r22
 5a2:	5f 91       	pop	r21
 5a4:	4f 91       	pop	r20
 5a6:	3f 91       	pop	r19
 5a8:	2f 91       	pop	r18
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti
    }

    // Call every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    if (g_led_intensity_cnt == 781) {
        g_led_intensity_cnt = 0;
 5b4:	10 92 94 00 	sts	0x0094, r1
 5b8:	10 92 93 00 	sts	0x0093, r1
        guc_led_intenisity_timer = 1;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 92 00 	sts	0x0092, r24
 5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__vector_6+0x4e>

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
        g_ha_nlink_timer_cnt++;
        if (g_ha_nlink_timer_cnt == 20) {
            g_ha_nlink_timer_cnt = 0;
 5c4:	10 92 60 00 	sts	0x0060, r1
            isr_nlink_io_on_timer();
 5c8:	e2 d0       	rcall	.+452    	; 0x78e <isr_nlink_io_on_timer>
 5ca:	d6 cf       	rjmp	.-84     	; 0x578 <__vector_6+0x34>

000005cc <ha_nlink_io_recover>:
    nlink.io.idle_timer = 0;
    NLINK_RX_INT_ENABLE;
}
static void ha_nlink_io_recover()
{
    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
 5cc:	c1 98       	cbi	0x18, 1	; 24
    nlink.io.state = NLINK_IO_STATE_RECOVERING;
 5ce:	10 92 d0 00 	sts	0x00D0, r1
    nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
 5d2:	80 e4       	ldi	r24, 0x40	; 64
 5d4:	80 93 f8 00 	sts	0x00F8, r24
    nlink.io.rx_wr = 0;
 5d8:	10 92 f5 00 	sts	0x00F5, r1
    NLINK_RX_INT_ENABLE;        // Recovery timer will be restarted on pin fall
 5dc:	8a b7       	in	r24, 0x3a	; 58
 5de:	80 62       	ori	r24, 0x20	; 32
 5e0:	8a bf       	out	0x3a, r24	; 58
 5e2:	8b b7       	in	r24, 0x3b	; 59
 5e4:	80 62       	ori	r24, 0x20	; 32
 5e6:	8b bf       	out	0x3b, r24	; 59
    NLINK_IO_TIMER_ENABLE;
 5e8:	10 92 60 00 	sts	0x0060, r1
 5ec:	08 95       	ret

000005ee <ha_nlink_init>:
}

void ha_nlink_init()
{
    memset((uint8_t*)&nlink, 0, sizeof(nlink_t));
 5ee:	81 e5       	ldi	r24, 0x51	; 81
 5f0:	e9 ea       	ldi	r30, 0xA9	; 169
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	df 01       	movw	r26, r30
 5f6:	1d 92       	st	X+, r1
 5f8:	8a 95       	dec	r24
 5fa:	e9 f7       	brne	.-6      	; 0x5f6 <ha_nlink_init+0x8>
    for (uint8_t i = 0; i < NLINK_NODES_NUM; i ++) {
        nlink.nodes[i].idx = i;
    }

    NLINK_IO_RX_PORT |= NLINK_IO_RX_PIN_MASK;
 5fc:	c0 9a       	sbi	0x18, 0	; 24
    NLINK_IO_RX_DIR  &= ~NLINK_IO_RX_PIN_MASK;   // pull-up input
 5fe:	b8 98       	cbi	0x17, 0	; 23

    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
 600:	c1 98       	cbi	0x18, 1	; 24
    NLINK_IO_TX_DIR  |= NLINK_IO_TX_PIN_MASK;   // output
 602:	b9 9a       	sbi	0x17, 1	; 23
    MCUCR &= ~(_BV(ISC00) | _BV(ISC01));
    MCUCR |= (2 << ISC00);
#else
    // HA-ledlight
    // Set PCINT0
    PCMSK |= NLINK_IO_RX_PIN_MASK;
 604:	80 b5       	in	r24, 0x20	; 32
 606:	81 60       	ori	r24, 0x01	; 1
 608:	80 bd       	out	0x20, r24	; 32
#endif

    NLINK_IO_DBG_DIR |= NLINK_IO_DBG_PIN_MASK;
 60a:	88 9a       	sbi	0x11, 0	; 17
    NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN_MASK;
 60c:	90 98       	cbi	0x12, 0	; 18

    ha_nlink_io_recover();
 60e:	de cf       	rjmp	.-68     	; 0x5cc <ha_nlink_io_recover>

00000610 <ha_nlink_node_register>:
    // Find next free entry
    int8_t i;
    node_t *node;
    for (i = 0; i < NLINK_NODES_NUM; i++){
        node = &nlink.nodes[i];
        if (node->addr == 0) break;             // Empty entry found
 610:	90 91 ab 00 	lds	r25, 0x00AB
 614:	99 23       	and	r25, r25
 616:	19 f0       	breq	.+6      	; 0x61e <ha_nlink_node_register+0xe>
    }

    if (i == NLINK_NODES_NUM) return NULL;      // Empty entry not found
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	08 95       	ret

    node->addr = addr;
 61e:	80 93 ab 00 	sts	0x00AB, r24
    node->type = type;
 622:	60 93 ac 00 	sts	0x00AC, r22
    node->on_rx_cb = on_rx_cb;
 626:	50 93 be 00 	sts	0x00BE, r21
 62a:	40 93 bd 00 	sts	0x00BD, r20
    return node;
 62e:	8a ea       	ldi	r24, 0xAA	; 170
 630:	90 e0       	ldi	r25, 0x00	; 0
}
 632:	08 95       	ret

00000634 <nlink_node_on_rx>:

uint8_t nlink_node_on_rx(uint8_t *rx_buf)
{
 634:	cf 93       	push	r28
 636:	dc 01       	movw	r26, r24
    uint8_t consumed = 0;
    uint8_t addr_to = rx_buf[NLINK_HDR_OFF_TO];
 638:	11 96       	adiw	r26, 0x01	; 1
 63a:	2c 91       	ld	r18, X
 63c:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t addr_from = rx_buf[NLINK_HDR_OFF_FROM];
 63e:	8c 91       	ld	r24, X
    // TODO: check most efficient loop (while + pointer; for + index; etc)
    //       node++ in loop - worst case
    //
    for (uint8_t i = 0; i < NLINK_NODES_NUM; i++) {
        node_t *node = &nlink.nodes[i];
        if (node->addr == 0) break;
 640:	90 91 ab 00 	lds	r25, 0x00AB
 644:	99 23       	and	r25, r25
 646:	51 f0       	breq	.+20     	; 0x65c <nlink_node_on_rx+0x28>

        // don't receive own messages
        if (node->addr == addr_from) continue;
 648:	89 17       	cp	r24, r25
 64a:	41 f0       	breq	.+16     	; 0x65c <nlink_node_on_rx+0x28>

        if ( node->addr == addr_to ||               // Direct message
 64c:	29 17       	cp	r18, r25
 64e:	51 f0       	breq	.+20     	; 0x664 <nlink_node_on_rx+0x30>
 650:	30 91 ac 00 	lds	r19, 0x00AC
 654:	30 34       	cpi	r19, 0x40	; 64
 656:	31 f0       	breq	.+12     	; 0x664 <nlink_node_on_rx+0x30>
             node->type == NODE_TYPE_CTRLCON ||     // CTRLCON listens for all messages
 658:	2f 3f       	cpi	r18, 0xFF	; 255
 65a:	21 f0       	breq	.+8      	; 0x664 <nlink_node_on_rx+0x30>
 65c:	c0 e0       	ldi	r28, 0x00	; 0
            }
        }
    }

    return consumed;
}
 65e:	8c 2f       	mov	r24, r28
 660:	cf 91       	pop	r28
 662:	08 95       	ret

        if ( node->addr == addr_to ||               // Direct message
             node->type == NODE_TYPE_CTRLCON ||     // CTRLCON listens for all messages
             addr_to == NODE_ADDR_BC ) {            // Broadcast message
            // Address matched
            consumed |= (node->addr == addr_to);
 664:	c1 e0       	ldi	r28, 0x01	; 1
 666:	29 13       	cpse	r18, r25
 668:	c0 e0       	ldi	r28, 0x00	; 0

            if (rx_buf[NLINK_HDR_OFF_CMD] == NLINK_CMD_RD_REQ) {
 66a:	12 96       	adiw	r26, 0x02	; 2
 66c:	2c 91       	ld	r18, X
 66e:	12 97       	sbiw	r26, 0x02	; 2
 670:	21 30       	cpi	r18, 0x01	; 1
 672:	59 f0       	breq	.+22     	; 0x68a <nlink_node_on_rx+0x56>
                // RD_REQ doesn't require node involving just send node's TX buffer
                ha_nlink_node_send(node, addr_from, NLINK_CMD_RD_RESP);
            } else {
                node->on_rx_cb(node->idx, rx_buf);
 674:	e0 91 bd 00 	lds	r30, 0x00BD
 678:	f0 91 be 00 	lds	r31, 0x00BE
 67c:	bd 01       	movw	r22, r26
 67e:	80 91 aa 00 	lds	r24, 0x00AA
 682:	09 95       	icall
            }
        }
    }

    return consumed;
}
 684:	8c 2f       	mov	r24, r28
 686:	cf 91       	pop	r28
 688:	08 95       	ret
void ha_nlink_node_send(node_t *node, uint8_t addr_to, uint8_t cmd)
{
    node->tx_buf[NLINK_HDR_OFF_FROM] = node->addr;
 68a:	90 93 bf 00 	sts	0x00BF, r25
    node->tx_buf[NLINK_HDR_OFF_TO  ] = addr_to;
 68e:	80 93 c0 00 	sts	0x00C0, r24
    node->tx_buf[NLINK_HDR_OFF_CMD ] = cmd;
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	80 93 c1 00 	sts	0x00C1, r24

    // Check Local nodes
    uint8_t consumed = nlink_node_on_rx(node->tx_buf);
 698:	8f eb       	ldi	r24, 0xBF	; 191
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	cb df       	rcall	.-106    	; 0x634 <nlink_node_on_rx>

    // Mark as "to be send outward" if not consumed
    node->tx_flag = !consumed;
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	81 11       	cpse	r24, r1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	90 93 cf 00 	sts	0x00CF, r25
            }
        }
    }

    return consumed;
}
 6a8:	8c 2f       	mov	r24, r28
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <ha_nlink_node_send>:
void ha_nlink_node_send(node_t *node, uint8_t addr_to, uint8_t cmd)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ec 01       	movw	r28, r24
    node->tx_buf[NLINK_HDR_OFF_FROM] = node->addr;
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	8d 8b       	std	Y+21, r24	; 0x15
    node->tx_buf[NLINK_HDR_OFF_TO  ] = addr_to;
 6b8:	6e 8b       	std	Y+22, r22	; 0x16
    node->tx_buf[NLINK_HDR_OFF_CMD ] = cmd;
 6ba:	4f 8b       	std	Y+23, r20	; 0x17

    // Check Local nodes
    uint8_t consumed = nlink_node_on_rx(node->tx_buf);
 6bc:	ce 01       	movw	r24, r28
 6be:	45 96       	adiw	r24, 0x15	; 21
 6c0:	b9 df       	rcall	.-142    	; 0x634 <nlink_node_on_rx>

    // Mark as "to be send outward" if not consumed
    node->tx_flag = !consumed;
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	81 11       	cpse	r24, r1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	9d a3       	std	Y+37, r25	; 0x25
}
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <ha_nlink_check_rx>:

void ha_nlink_check_rx()
{
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	60 97       	sbiw	r28, 0x10	; 16
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
    if (nlink.io.state != NLINK_IO_STATE_IDLE)
 6e4:	80 91 d0 00 	lds	r24, 0x00D0
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	49 f0       	breq	.+18     	; 0x6fe <ha_nlink_check_rx+0x2e>
                ha_nlink_io_recover();
            }
        }

    }
}
 6ec:	60 96       	adiw	r28, 0x10	; 16
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret
    if (nlink.io.state != NLINK_IO_STATE_IDLE)
        return;

    // Data can be read after 1 clock in idle state.
    // This is because TX should invalidate RX data after check
    if (nlink.io.idle_timer < 1)
 6fe:	20 91 f9 00 	lds	r18, 0x00F9
 702:	22 23       	and	r18, r18
 704:	99 f3       	breq	.-26     	; 0x6ec <ha_nlink_check_rx+0x1c>
        return;

    uint8_t rx_wr = nlink.io.rx_wr;
 706:	40 91 f5 00 	lds	r20, 0x00F5

    // Check is header received
    if ( rx_wr > NLINK_HDR_OFF_LEN) {
 70a:	45 30       	cpi	r20, 0x05	; 5
 70c:	78 f3       	brcs	.-34     	; 0x6ec <ha_nlink_check_rx+0x1c>
        // Check  is full message received
        if ( rx_wr == nlink.io.rx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA) {
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	80 91 e9 00 	lds	r24, 0x00E9
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	05 96       	adiw	r24, 0x05	; 5
 718:	48 17       	cp	r20, r24
 71a:	59 07       	cpc	r21, r25
 71c:	21 f0       	breq	.+8      	; 0x726 <ha_nlink_check_rx+0x56>

            nlink_node_on_rx(rx_buf);
        } else {
            // If IDLE timeout already expired, but message still not
            // completed, then consider it as an error and do recover
            if (nlink.io.idle_timer == NLINK_IO_IDLE_TIMEOUT) {
 71e:	20 31       	cpi	r18, 0x10	; 16
 720:	29 f7       	brne	.-54     	; 0x6ec <ha_nlink_check_rx+0x1c>
                ha_nlink_io_recover();
 722:	54 df       	rcall	.-344    	; 0x5cc <ha_nlink_io_recover>
 724:	e3 cf       	rjmp	.-58     	; 0x6ec <ha_nlink_check_rx+0x1c>
        if ( rx_wr == nlink.io.rx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA) {

            uint8_t rx_buf[NLINK_COMM_BUF_SIZE];

            // Make local buffer copy and reset write index
            memcpy(rx_buf, nlink.io.rx_buf, rx_wr);
 726:	65 ee       	ldi	r22, 0xE5	; 229
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	ce 01       	movw	r24, r28
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	06 d1       	rcall	.+524    	; 0x93c <memcpy>
            nlink.io.rx_wr = 0;
 730:	10 92 f5 00 	sts	0x00F5, r1

            nlink_node_on_rx(rx_buf);
 734:	ce 01       	movw	r24, r28
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	7d df       	rcall	.-262    	; 0x634 <nlink_node_on_rx>
 73a:	d8 cf       	rjmp	.-80     	; 0x6ec <ha_nlink_check_rx+0x1c>

0000073c <ha_nlink_check_tx>:

    }
}

void ha_nlink_check_tx()
{
 73c:	cf 93       	push	r28
    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
 73e:	80 91 d0 00 	lds	r24, 0x00D0
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	11 f0       	breq	.+4      	; 0x74a <ha_nlink_check_tx+0xe>
                nlink.io.tx_rd = 0;
            sei();
            return;
        }
    }
}
 746:	cf 91       	pop	r28
 748:	08 95       	ret
    }
}

void ha_nlink_check_tx()
{
    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
 74a:	80 91 f9 00 	lds	r24, 0x00F9
 74e:	80 31       	cpi	r24, 0x10	; 16
 750:	d1 f7       	brne	.-12     	; 0x746 <ha_nlink_check_tx+0xa>
        return;
    }

    // IO Idle timeout expired
    // Check pending transmittion (in case of previous one failed)
    if (nlink.io.tx_len) {
 752:	80 91 e3 00 	lds	r24, 0x00E3
 756:	81 11       	cpse	r24, r1
 758:	17 c0       	rjmp	.+46     	; 0x788 <ha_nlink_check_tx+0x4c>
        return;
    }
    // Get data to transfer from nodes
    for(uint8_t i = 0; i < ARRAY_SIZE(nlink.nodes); i++) {
        node_t *node = &nlink.nodes[i];
        if (node->tx_flag) {
 75a:	80 91 cf 00 	lds	r24, 0x00CF
 75e:	88 23       	and	r24, r24
 760:	91 f3       	breq	.-28     	; 0x746 <ha_nlink_check_tx+0xa>
            node->tx_flag = 0;
 762:	10 92 cf 00 	sts	0x00CF, r1
            uint8_t tx_len = node->tx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA;
 766:	c0 91 c3 00 	lds	r28, 0x00C3
 76a:	cb 5f       	subi	r28, 0xFB	; 251
            memcpy(nlink.io.tx_buf, node->tx_buf, tx_len);
 76c:	4c 2f       	mov	r20, r28
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	6f eb       	ldi	r22, 0xBF	; 191
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	82 ed       	ldi	r24, 0xD2	; 210
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	e1 d0       	rcall	.+450    	; 0x93c <memcpy>
            // Initiate transmittion in next timer interrupt
            cli();
 77a:	f8 94       	cli
                nlink.io.tx_len = tx_len;
 77c:	c0 93 e3 00 	sts	0x00E3, r28
                nlink.io.tx_rd = 0;
 780:	10 92 e2 00 	sts	0x00E2, r1
            sei();
 784:	78 94       	sei
            return;
 786:	df cf       	rjmp	.-66     	; 0x746 <ha_nlink_check_tx+0xa>
    }

    // IO Idle timeout expired
    // Check pending transmittion (in case of previous one failed)
    if (nlink.io.tx_len) {
        nlink.io.tx_rd = 0;
 788:	10 92 e2 00 	sts	0x00E2, r1
        return;
 78c:	dc cf       	rjmp	.-72     	; 0x746 <ha_nlink_check_tx+0xa>

0000078e <isr_nlink_io_on_timer>:
 * NLINK IO Timer callback should be called by main logic
 * every 256usec
 */
void isr_nlink_io_on_timer()
{
    if (nlink.io.is_rx_timer) {
 78e:	80 91 d1 00 	lds	r24, 0x00D1
 792:	81 11       	cpse	r24, r1
 794:	24 c0       	rjmp	.+72     	; 0x7de <isr_nlink_io_on_timer+0x50>
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN_MASK;
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN_MASK;
 796:	90 98       	cbi	0x12, 0	; 18

}

static void isr_nlink_io_on_tx_timer()
{
    if (nlink.io.tx_len == 0) {
 798:	90 91 e3 00 	lds	r25, 0x00E3
 79c:	99 23       	and	r25, r25
 79e:	c9 f0       	breq	.+50     	; 0x7d2 <isr_nlink_io_on_timer+0x44>
        return;
    }

    switch(nlink.io.state) {
 7a0:	20 91 d0 00 	lds	r18, 0x00D0
 7a4:	21 30       	cpi	r18, 0x01	; 1
 7a6:	09 f4       	brne	.+2      	; 0x7aa <isr_nlink_io_on_timer+0x1c>
 7a8:	55 c0       	rjmp	.+170    	; 0x854 <isr_nlink_io_on_timer+0xc6>
 7aa:	98 f0       	brcs	.+38     	; 0x7d2 <isr_nlink_io_on_timer+0x44>
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <isr_nlink_io_on_timer+0x24>
 7b0:	64 c0       	rjmp	.+200    	; 0x87a <isr_nlink_io_on_timer+0xec>
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
 7b2:	90 91 f7 00 	lds	r25, 0x00F7
 7b6:	99 23       	and	r25, r25
 7b8:	09 f4       	brne	.+2      	; 0x7bc <isr_nlink_io_on_timer+0x2e>
 7ba:	89 c0       	rjmp	.+274    	; 0x8ce <isr_nlink_io_on_timer+0x140>
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
 7bc:	99 30       	cpi	r25, 0x09	; 9
 7be:	09 f4       	brne	.+2      	; 0x7c2 <isr_nlink_io_on_timer+0x34>
 7c0:	76 c0       	rjmp	.+236    	; 0x8ae <isr_nlink_io_on_timer+0x120>
 7c2:	90 91 e4 00 	lds	r25, 0x00E4
 7c6:	90 fd       	sbrc	r25, 0
 7c8:	74 c0       	rjmp	.+232    	; 0x8b2 <isr_nlink_io_on_timer+0x124>
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
                } else {
                    // 0-data bit
                    NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
 7ca:	c1 9a       	sbi	0x18, 1	; 24
                }
            }
            nlink.io.tx_shift_reg >>= 1;
 7cc:	96 95       	lsr	r25
 7ce:	90 93 e4 00 	sts	0x00E4, r25
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN_MASK;
        isr_nlink_io_on_tx_timer();
    }
    nlink.io.is_rx_timer = !nlink.io.is_rx_timer;
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	81 11       	cpse	r24, r1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	90 93 d1 00 	sts	0x00D1, r25
 7dc:	08 95       	ret
 * every 256usec
 */
void isr_nlink_io_on_timer()
{
    if (nlink.io.is_rx_timer) {
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN_MASK;
 7de:	90 9a       	sbi	0x12, 0	; 18
    }
}

static void isr_nlink_io_on_rx_timer()
{
    switch(nlink.io.state) {
 7e0:	90 91 d0 00 	lds	r25, 0x00D0
 7e4:	91 30       	cpi	r25, 0x01	; 1
 7e6:	71 f1       	breq	.+92     	; 0x844 <isr_nlink_io_on_timer+0xb6>
 7e8:	90 f0       	brcs	.+36     	; 0x80e <isr_nlink_io_on_timer+0x80>
 7ea:	92 30       	cpi	r25, 0x02	; 2
 7ec:	29 f5       	brne	.+74     	; 0x838 <isr_nlink_io_on_timer+0xaa>
    //   |   \___/\___0___X_ ... __X____7____/
    //   |     |             |                  |
    //   |     |             |                  |
    // Idle   Start       Data 8bits          Stop

    uint8_t bit_in = !!(NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK);
 7ee:	96 b3       	in	r25, 0x16	; 22
 7f0:	91 70       	andi	r25, 0x01	; 1
    uint8_t bit_cnt = nlink.io.bit_cnt;
 7f2:	20 91 f7 00 	lds	r18, 0x00F7

    nlink.io.bit_cnt++;
 7f6:	31 e0       	ldi	r19, 0x01	; 1
 7f8:	32 0f       	add	r19, r18
 7fa:	30 93 f7 00 	sts	0x00F7, r19

    if (bit_cnt == 0) {
 7fe:	21 11       	cpse	r18, r1
 800:	46 c0       	rjmp	.+140    	; 0x88e <isr_nlink_io_on_timer+0x100>
        // Check START bit
        if (bit_in) {
 802:	99 23       	and	r25, r25
 804:	31 f3       	breq	.-52     	; 0x7d2 <isr_nlink_io_on_timer+0x44>
            ha_nlink_io_recover();
 806:	e2 de       	rcall	.-572    	; 0x5cc <ha_nlink_io_recover>
 808:	80 91 d1 00 	lds	r24, 0x00D1
 80c:	e2 cf       	rjmp	.-60     	; 0x7d2 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_ACTIVE:
            isr_nlink_io_rx_on_receiving();
            break;
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
 80e:	b0 9b       	sbis	0x16, 0	; 22
 810:	3a c0       	rjmp	.+116    	; 0x886 <isr_nlink_io_on_timer+0xf8>
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
 812:	90 91 f8 00 	lds	r25, 0x00F8
 816:	91 50       	subi	r25, 0x01	; 1
 818:	90 93 f8 00 	sts	0x00F8, r25
 81c:	91 11       	cpse	r25, r1
 81e:	d9 cf       	rjmp	.-78     	; 0x7d2 <isr_nlink_io_on_timer+0x44>
#define NLINK_IO_IDLE_TIMEOUT 16    // timeout when TX can start to transmit.
// TODO: ^^^ Must be unique for a particular device

static void ha_nlink_io_set_idle()
{
    nlink.io.state = NLINK_IO_STATE_IDLE;
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	90 93 d0 00 	sts	0x00D0, r25
    nlink.io.idle_timer = 0;
 826:	10 92 f9 00 	sts	0x00F9, r1
    NLINK_RX_INT_ENABLE;
 82a:	9a b7       	in	r25, 0x3a	; 58
 82c:	90 62       	ori	r25, 0x20	; 32
 82e:	9a bf       	out	0x3a, r25	; 58
 830:	9b b7       	in	r25, 0x3b	; 59
 832:	90 62       	ori	r25, 0x20	; 32
 834:	9b bf       	out	0x3b, r25	; 59
 836:	cd cf       	rjmp	.-102    	; 0x7d2 <isr_nlink_io_on_timer+0x44>

        case NLINK_IO_STATE_IDLE:
            isr_nlink_io_rx_on_idle();
            break;
        default:
            FATAL_TRAP(__LINE__);
 838:	8a e5       	ldi	r24, 0x5A	; 90
 83a:	91 e0       	ldi	r25, 0x01	; 1
 83c:	12 dc       	rcall	.-2012   	; 0x62 <FATAL_TRAP>
 83e:	80 91 d1 00 	lds	r24, 0x00D1
 842:	c7 cf       	rjmp	.-114    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
    }
}

static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
 844:	90 91 f9 00 	lds	r25, 0x00F9
 848:	90 31       	cpi	r25, 0x10	; 16
 84a:	68 f5       	brcc	.+90     	; 0x8a6 <isr_nlink_io_on_timer+0x118>
        nlink.io.idle_timer++;
 84c:	9f 5f       	subi	r25, 0xFF	; 255
 84e:	90 93 f9 00 	sts	0x00F9, r25
 852:	bf cf       	rjmp	.-130    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
            }
            nlink.io.tx_shift_reg >>= 1;
            break;

        case NLINK_IO_STATE_IDLE:
            if (nlink.io.tx_rd < nlink.io.tx_len) {
 854:	e0 91 e2 00 	lds	r30, 0x00E2
 858:	e9 17       	cp	r30, r25
 85a:	68 f1       	brcs	.+90     	; 0x8b6 <isr_nlink_io_on_timer+0x128>
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
 85c:	9e 13       	cpse	r25, r30
 85e:	b9 cf       	rjmp	.-142    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
 860:	20 91 e5 00 	lds	r18, 0x00E5
 864:	90 91 d2 00 	lds	r25, 0x00D2
 868:	29 17       	cp	r18, r25
 86a:	09 f4       	brne	.+2      	; 0x86e <isr_nlink_io_on_timer+0xe0>
 86c:	46 c0       	rjmp	.+140    	; 0x8fa <isr_nlink_io_on_timer+0x16c>
                } else {
                    // Transmittion failed.
                    // Use tx_rd > tx_len as retransmit required flag
                    // Retransmittion will be initiated in idle loop
                    // after idle timeout expired
                    nlink.io.tx_rd = 0xFF;
 86e:	9f ef       	ldi	r25, 0xFF	; 255
 870:	90 93 e2 00 	sts	0x00E2, r25
                }
                // Invalidate just received own data
                nlink.io.rx_wr = 0;
 874:	10 92 f5 00 	sts	0x00F5, r1
 878:	ac cf       	rjmp	.-168    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
            }
            break;
        case NLINK_IO_STATE_RECOVERING:
            break;
        default:
            FATAL_TRAP(__LINE__);
 87a:	82 e4       	ldi	r24, 0x42	; 66
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	f1 db       	rcall	.-2078   	; 0x62 <FATAL_TRAP>
 880:	80 91 d1 00 	lds	r24, 0x00D1
 884:	a6 cf       	rjmp	.-180    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
 886:	9f e3       	ldi	r25, 0x3F	; 63
 888:	90 93 f8 00 	sts	0x00F8, r25
 88c:	a2 cf       	rjmp	.-188    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
            ha_nlink_io_recover();
        }
        return;
    }

    if (bit_cnt == 9) {
 88e:	29 30       	cpi	r18, 0x09	; 9
 890:	09 f1       	breq	.+66     	; 0x8d4 <isr_nlink_io_on_timer+0x146>
            }
        }
        return;
    }

    nlink.io.rx_shift_reg = (nlink.io.rx_shift_reg >> 1) | (bit_in << 7);
 892:	97 95       	ror	r25
 894:	99 27       	eor	r25, r25
 896:	97 95       	ror	r25
 898:	20 91 f6 00 	lds	r18, 0x00F6
 89c:	26 95       	lsr	r18
 89e:	92 2b       	or	r25, r18
 8a0:	90 93 f6 00 	sts	0x00F6, r25
 8a4:	96 cf       	rjmp	.-212    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
        nlink.io.idle_timer++;
    } else {
        NLINK_IO_TIMER_DISABLE;
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	90 93 60 00 	sts	0x0060, r25
 8ac:	92 cf       	rjmp	.-220    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
 8ae:	90 91 e4 00 	lds	r25, 0x00E4
    switch(nlink.io.state) {
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
 8b2:	c1 98       	cbi	0x18, 1	; 24
 8b4:	8b cf       	rjmp	.-234    	; 0x7cc <isr_nlink_io_on_timer+0x3e>
            break;

        case NLINK_IO_STATE_IDLE:
            if (nlink.io.tx_rd < nlink.io.tx_len) {
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	9e 0f       	add	r25, r30
 8ba:	90 93 e2 00 	sts	0x00E2, r25
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	e7 55       	subi	r30, 0x57	; 87
 8c2:	ff 4f       	sbci	r31, 0xFF	; 255
 8c4:	91 a5       	ldd	r25, Z+41	; 0x29
 8c6:	90 93 e4 00 	sts	0x00E4, r25
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
 8ca:	c1 9a       	sbi	0x18, 1	; 24
 8cc:	82 cf       	rjmp	.-252    	; 0x7d2 <isr_nlink_io_on_timer+0x44>
 8ce:	90 91 e4 00 	lds	r25, 0x00E4
 8d2:	7c cf       	rjmp	.-264    	; 0x7cc <isr_nlink_io_on_timer+0x3e>
        return;
    }

    if (bit_cnt == 9) {
        // Check STOP bit
        if (!bit_in) {
 8d4:	99 23       	and	r25, r25
 8d6:	09 f4       	brne	.+2      	; 0x8da <isr_nlink_io_on_timer+0x14c>
 8d8:	96 cf       	rjmp	.-212    	; 0x806 <isr_nlink_io_on_timer+0x78>
            ha_nlink_io_recover();
        } else {
            if (nlink.io.rx_wr == sizeof(nlink.io.rx_buf)) {
 8da:	e0 91 f5 00 	lds	r30, 0x00F5
 8de:	e0 31       	cpi	r30, 0x10	; 16
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <isr_nlink_io_on_timer+0x156>
 8e2:	91 cf       	rjmp	.-222    	; 0x806 <isr_nlink_io_on_timer+0x78>
                ha_nlink_io_recover();
            } else {
                nlink.io.rx_buf[nlink.io.rx_wr++] = nlink.io.rx_shift_reg;
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	9e 0f       	add	r25, r30
 8e8:	90 93 f5 00 	sts	0x00F5, r25
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	e7 55       	subi	r30, 0x57	; 87
 8f0:	ff 4f       	sbci	r31, 0xFF	; 255
 8f2:	90 91 f6 00 	lds	r25, 0x00F6
 8f6:	94 af       	std	Z+60, r25	; 0x3c
 8f8:	93 cf       	rjmp	.-218    	; 0x820 <isr_nlink_io_on_timer+0x92>
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
 8fa:	20 91 e6 00 	lds	r18, 0x00E6
 8fe:	90 91 d3 00 	lds	r25, 0x00D3
 902:	29 13       	cpse	r18, r25
 904:	b4 cf       	rjmp	.-152    	; 0x86e <isr_nlink_io_on_timer+0xe0>
                     nlink.io.rx_buf[1] == nlink.io.tx_buf[1]) {
                    // Transmittion OK
                    nlink.io.tx_rd = 0;
 906:	10 92 e2 00 	sts	0x00E2, r1
                    nlink.io.tx_len = 0;
 90a:	10 92 e3 00 	sts	0x00E3, r1
 90e:	b2 cf       	rjmp	.-156    	; 0x874 <isr_nlink_io_on_timer+0xe6>

00000910 <isr_nlink_io_on_start_edge>:
}

void isr_nlink_io_on_start_edge()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
 910:	80 91 d0 00 	lds	r24, 0x00D0
 914:	88 23       	and	r24, r24
 916:	71 f0       	breq	.+28     	; 0x934 <isr_nlink_io_on_start_edge+0x24>
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
        return;
    }

    NLINK_RX_INT_DISABLE;
 918:	8b b7       	in	r24, 0x3b	; 59
 91a:	8f 7d       	andi	r24, 0xDF	; 223
 91c:	8b bf       	out	0x3b, r24	; 59
    nlink.io.is_rx_timer = 1;      // Next timer interrupt will be RX
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	80 93 d1 00 	sts	0x00D1, r24
    nlink.io.bit_cnt = 0;
 924:	10 92 f7 00 	sts	0x00F7, r1
    nlink.io.state = NLINK_IO_STATE_ACTIVE;
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	80 93 d0 00 	sts	0x00D0, r24

    NLINK_IO_TIMER_ENABLE;
 92e:	10 92 60 00 	sts	0x0060, r1
 932:	08 95       	ret

void isr_nlink_io_on_start_edge()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
 934:	80 e4       	ldi	r24, 0x40	; 64
 936:	80 93 f8 00 	sts	0x00F8, r24
        return;
 93a:	08 95       	ret

0000093c <memcpy>:
 93c:	fb 01       	movw	r30, r22
 93e:	dc 01       	movw	r26, r24
 940:	02 c0       	rjmp	.+4      	; 0x946 <memcpy+0xa>
 942:	01 90       	ld	r0, Z+
 944:	0d 92       	st	X+, r0
 946:	41 50       	subi	r20, 0x01	; 1
 948:	50 40       	sbci	r21, 0x00	; 0
 94a:	d8 f7       	brcc	.-10     	; 0x942 <memcpy+0x6>
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
