
ha-ceil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803e00  00001431  00001505  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000138e  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a3  0000938e  0000138e  00001462  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000a3  00803e08  00803e08  0000150d  2**0
                  ALLOC
  4 .eeprom       00000029  00810000  00810000  0000150d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000210  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005813  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000023ec  00000000  00000000  00006fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001ca0  00000000  00000000  000093b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004f4  00000000  00000000  0000b058  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021c0  00000000  00000000  0000b54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bad  00000000  00000000  0000d70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000330  00000000  00000000  0000f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	49 c7       	rjmp	.+3730   	; 0xe9e <__vector_5>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	68 c7       	rjmp	.+3792   	; 0xeec <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e1 e3       	ldi	r30, 0x31	; 49
      48:	f4 e1       	ldi	r31, 0x14	; 20
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a8 30       	cpi	r26, 0x08	; 8
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a8 e0       	ldi	r26, 0x08	; 8
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ab 3a       	cpi	r26, 0xAB	; 171
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	7f d7       	rcall	.+3838   	; 0xf66 <main>
      68:	90 c9       	rjmp	.-3296   	; 0xfffff38a <__eeprom_end+0xff7ef361>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <FATAL_TRAP>:
#include <stdint.h>
uint16_t gus_trap_line;

void FATAL_TRAP (uint16_t us_line_num) {
    gus_trap_line = us_line_num;
      6c:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <gus_trap_line>
      70:	90 93 19 3e 	sts	0x3E19, r25	; 0x803e19 <gus_trap_line+0x1>
      74:	ff cf       	rjmp	.-2      	; 0x74 <FATAL_TRAP+0x8>

00000076 <ha_nlink_init>:

	node->tx_flag = 0;
	uint8_t tx_buf_len = node->tx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA;
	memcpy(buf, node->tx_buf, tx_buf_len);
	return tx_buf_len;
}
      76:	81 e8       	ldi	r24, 0x81	; 129
      78:	e6 e2       	ldi	r30, 0x26	; 38
      7a:	fe e3       	ldi	r31, 0x3E	; 62
      7c:	df 01       	movw	r26, r30
      7e:	1d 92       	st	X+, r1
      80:	8a 95       	dec	r24
      82:	e9 f7       	brne	.-6      	; 0x7e <ha_nlink_init+0x8>
      84:	15 d6       	rcall	.+3114   	; 0xcb0 <ha_nlink_gpio_init>
      86:	4c 98       	cbi	0x09, 4	; 9
      88:	10 92 85 3e 	sts	0x3E85, r1	; 0x803e85 <nlink+0x5f>
      8c:	80 e4       	ldi	r24, 0x40	; 64
      8e:	80 93 a5 3e 	sts	0x3EA5, r24	; 0x803ea5 <nlink+0x7f>
      92:	10 92 a2 3e 	sts	0x3EA2, r1	; 0x803ea2 <nlink+0x7c>
      96:	8b e0       	ldi	r24, 0x0B	; 11
      98:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
      9c:	80 e2       	ldi	r24, 0x20	; 32
      9e:	8b b9       	out	0x0b, r24	; 11
      a0:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
      a4:	08 95       	ret

000000a6 <ha_nlink_node_register>:
      a6:	a6 e2       	ldi	r26, 0x26	; 38
      a8:	be e3       	ldi	r27, 0x3E	; 62
      aa:	e0 e0       	ldi	r30, 0x00	; 0
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	9c 91       	ld	r25, X
      b0:	99 23       	and	r25, r25
      b2:	41 f0       	breq	.+16     	; 0xc4 <ha_nlink_node_register+0x1e>
      b4:	31 96       	adiw	r30, 0x01	; 1
      b6:	53 96       	adiw	r26, 0x13	; 19
      b8:	e5 30       	cpi	r30, 0x05	; 5
      ba:	f1 05       	cpc	r31, r1
      bc:	c1 f7       	brne	.-16     	; 0xae <ha_nlink_node_register+0x8>
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	08 95       	ret
      c4:	93 e1       	ldi	r25, 0x13	; 19
      c6:	9e 9f       	mul	r25, r30
      c8:	d0 01       	movw	r26, r0
      ca:	9f 9f       	mul	r25, r31
      cc:	b0 0d       	add	r27, r0
      ce:	11 24       	eor	r1, r1
      d0:	fd 01       	movw	r30, r26
      d2:	ea 5d       	subi	r30, 0xDA	; 218
      d4:	f1 4c       	sbci	r31, 0xC1	; 193
      d6:	80 83       	st	Z, r24
      d8:	61 83       	std	Z+1, r22	; 0x01
      da:	42 83       	std	Z+2, r20	; 0x02
      dc:	53 83       	std	Z+3, r21	; 0x03
      de:	24 83       	std	Z+4, r18	; 0x04
      e0:	35 83       	std	Z+5, r19	; 0x05
      e2:	cf 01       	movw	r24, r30
      e4:	08 95       	ret

000000e6 <nlink_node_on_rx>:
      e6:	cf 92       	push	r12
      e8:	df 92       	push	r13
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	7c 01       	movw	r14, r24
      f8:	fc 01       	movw	r30, r24
      fa:	11 81       	ldd	r17, Z+1	; 0x01
      fc:	00 81       	ld	r16, Z
      fe:	c6 e2       	ldi	r28, 0x26	; 38
     100:	de e3       	ldi	r29, 0x3E	; 62
     102:	d1 2c       	mov	r13, r1
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	c8 2e       	mov	r12, r24
     108:	88 81       	ld	r24, Y
     10a:	88 23       	and	r24, r24
     10c:	71 f0       	breq	.+28     	; 0x12a <nlink_node_on_rx+0x44>
     10e:	08 17       	cp	r16, r24
     110:	39 f0       	breq	.+14     	; 0x120 <nlink_node_on_rx+0x3a>
     112:	18 17       	cp	r17, r24
     114:	a1 f0       	breq	.+40     	; 0x13e <nlink_node_on_rx+0x58>
     116:	99 81       	ldd	r25, Y+1	; 0x01
     118:	90 34       	cpi	r25, 0x40	; 64
     11a:	89 f0       	breq	.+34     	; 0x13e <nlink_node_on_rx+0x58>
     11c:	1f 3f       	cpi	r17, 0xFF	; 255
     11e:	79 f0       	breq	.+30     	; 0x13e <nlink_node_on_rx+0x58>
     120:	63 96       	adiw	r28, 0x13	; 19
     122:	fe e3       	ldi	r31, 0x3E	; 62
     124:	c5 38       	cpi	r28, 0x85	; 133
     126:	df 07       	cpc	r29, r31
     128:	79 f7       	brne	.-34     	; 0x108 <nlink_node_on_rx+0x22>
     12a:	8d 2d       	mov	r24, r13
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	1f 91       	pop	r17
     132:	0f 91       	pop	r16
     134:	ff 90       	pop	r15
     136:	ef 90       	pop	r14
     138:	df 90       	pop	r13
     13a:	cf 90       	pop	r12
     13c:	08 95       	ret
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	18 13       	cpse	r17, r24
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	d9 2a       	or	r13, r25
     146:	f7 01       	movw	r30, r14
     148:	92 81       	ldd	r25, Z+2	; 0x02
     14a:	91 30       	cpi	r25, 0x01	; 1
     14c:	29 f4       	brne	.+10     	; 0x158 <nlink_node_on_rx+0x72>
     14e:	8e 83       	std	Y+6, r24	; 0x06
     150:	0f 83       	std	Y+7, r16	; 0x07
     152:	c8 86       	std	Y+8, r12	; 0x08
     154:	9a 8b       	std	Y+18, r25	; 0x12
     156:	e4 cf       	rjmp	.-56     	; 0x120 <nlink_node_on_rx+0x3a>
     158:	ea 81       	ldd	r30, Y+2	; 0x02
     15a:	fb 81       	ldd	r31, Y+3	; 0x03
     15c:	b7 01       	movw	r22, r14
     15e:	8c 81       	ldd	r24, Y+4	; 0x04
     160:	9d 81       	ldd	r25, Y+5	; 0x05
     162:	09 95       	icall
     164:	dd cf       	rjmp	.-70     	; 0x120 <nlink_node_on_rx+0x3a>

00000166 <ha_nlink_node_send>:
     166:	fc 01       	movw	r30, r24
     168:	80 81       	ld	r24, Z
     16a:	86 83       	std	Z+6, r24	; 0x06
     16c:	67 83       	std	Z+7, r22	; 0x07
     16e:	40 87       	std	Z+8, r20	; 0x08
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	82 8b       	std	Z+18, r24	; 0x12
     174:	08 95       	ret

00000176 <ha_nlink_check_rx>:
     176:	80 91 85 3e 	lds	r24, 0x3E85	; 0x803e85 <nlink+0x5f>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	09 f0       	breq	.+2      	; 0x180 <ha_nlink_check_rx+0xa>
     17e:	08 95       	ret
     180:	80 91 a6 3e 	lds	r24, 0x3EA6	; 0x803ea6 <nlink+0x80>
     184:	88 23       	and	r24, r24
     186:	d9 f3       	breq	.-10     	; 0x17e <ha_nlink_check_rx+0x8>
     188:	40 91 a2 3e 	lds	r20, 0x3EA2	; 0x803ea2 <nlink+0x7c>
     18c:	45 30       	cpi	r20, 0x05	; 5
     18e:	b8 f3       	brcs	.-18     	; 0x17e <ha_nlink_check_rx+0x8>
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	20 91 9a 3e 	lds	r18, 0x3E9A	; 0x803e9a <nlink+0x74>
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	2b 5f       	subi	r18, 0xFB	; 251
     19a:	3f 4f       	sbci	r19, 0xFF	; 255
     19c:	42 17       	cp	r20, r18
     19e:	53 07       	cpc	r21, r19
     1a0:	91 f0       	breq	.+36     	; 0x1c6 <ha_nlink_check_rx+0x50>
     1a2:	8a 30       	cpi	r24, 0x0A	; 10
     1a4:	61 f7       	brne	.-40     	; 0x17e <ha_nlink_check_rx+0x8>
     1a6:	4c 98       	cbi	0x09, 4	; 9
     1a8:	10 92 85 3e 	sts	0x3E85, r1	; 0x803e85 <nlink+0x5f>
     1ac:	80 e4       	ldi	r24, 0x40	; 64
     1ae:	80 93 a5 3e 	sts	0x3EA5, r24	; 0x803ea5 <nlink+0x7f>
     1b2:	10 92 a2 3e 	sts	0x3EA2, r1	; 0x803ea2 <nlink+0x7c>
     1b6:	8b e0       	ldi	r24, 0x0B	; 11
     1b8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     1bc:	80 e2       	ldi	r24, 0x20	; 32
     1be:	8b b9       	out	0x0b, r24	; 11
     1c0:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     1c4:	08 95       	ret
     1c6:	66 e9       	ldi	r22, 0x96	; 150
     1c8:	7e e3       	ldi	r23, 0x3E	; 62
     1ca:	8a e1       	ldi	r24, 0x1A	; 26
     1cc:	9e e3       	ldi	r25, 0x3E	; 62
     1ce:	c5 d8       	rcall	.-3702   	; 0xfffff35a <__eeprom_end+0xff7ef331>
     1d0:	10 92 a2 3e 	sts	0x3EA2, r1	; 0x803ea2 <nlink+0x7c>
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	9e e3       	ldi	r25, 0x3E	; 62
     1d8:	86 cf       	rjmp	.-244    	; 0xe6 <nlink_node_on_rx>

000001da <ha_nlink_check_tx>:

void ha_nlink_check_tx()
{ 
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
    // LVL          +4  +2    ha_nlink_check_tx
    //   LVL2       +8  +2    nlink_node_on_rx
    //     LVL3     +7  +2    ledlight_on_rx
    //       LVL4   +2  +2    ha_node_ledlight_off

    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
     1e6:	80 91 85 3e 	lds	r24, 0x3E85	; 0x803e85 <nlink+0x5f>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	39 f0       	breq	.+14     	; 0x1fc <ha_nlink_check_tx+0x22>
			    nlink.io.tx_rd = 0;
			    isr_ha_nlink_io_set_idle();
            sei();
		}
    }
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	08 95       	ret
    // LVL          +4  +2    ha_nlink_check_tx
    //   LVL2       +8  +2    nlink_node_on_rx
    //     LVL3     +7  +2    ledlight_on_rx
    //       LVL4   +2  +2    ha_node_ledlight_off

    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
     1fc:	90 91 a6 3e 	lds	r25, 0x3EA6	; 0x803ea6 <nlink+0x80>
     200:	9a 30       	cpi	r25, 0x0A	; 10
     202:	a9 f7       	brne	.-22     	; 0x1ee <ha_nlink_check_tx+0x14>
        return;
    }

    // IO Idle timeout expired
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
     204:	90 91 94 3e 	lds	r25, 0x3E94	; 0x803e94 <nlink+0x6e>
     208:	91 11       	cpse	r25, r1
     20a:	32 c0       	rjmp	.+100    	; 0x270 <ha_nlink_check_tx+0x96>
     20c:	cc e2       	ldi	r28, 0x2C	; 44
     20e:	de e3       	ldi	r29, 0x3E	; 62
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     210:	ee 24       	eor	r14, r14
     212:	e3 94       	inc	r14
    nlink.io.idle_timer = 0;
    NLINK_RX_INT_ENABLE;
     214:	8b e0       	ldi	r24, 0x0B	; 11
     216:	f8 2e       	mov	r15, r24
     218:	00 e2       	ldi	r16, 0x20	; 32
    }
    // Get data to transfer from nodes
    for(uint8_t i = 0; i < ARRAY_SIZE(nlink.nodes); i++) {
        node_t *node = &nlink.nodes[i];
		uint8_t tx_buf_len;
		if (node->tx_flag == 0) {
     21a:	8c 85       	ldd	r24, Y+12	; 0x0c
     21c:	81 11       	cpse	r24, r1
     21e:	08 c0       	rjmp	.+16     	; 0x230 <ha_nlink_check_tx+0x56>
     220:	63 96       	adiw	r28, 0x13	; 19
            isr_ha_nlink_io_set_idle(); // Restart previous transfer
        sei();
        return;
    }
    // Get data to transfer from nodes
    for(uint8_t i = 0; i < ARRAY_SIZE(nlink.nodes); i++) {
     222:	8e e3       	ldi	r24, 0x3E	; 62
     224:	cb 38       	cpi	r28, 0x8B	; 139
     226:	d8 07       	cpc	r29, r24
     228:	11 f3       	breq	.-60     	; 0x1ee <ha_nlink_check_tx+0x14>
        node_t *node = &nlink.nodes[i];
		uint8_t tx_buf_len;
		if (node->tx_flag == 0) {
     22a:	8c 85       	ldd	r24, Y+12	; 0x0c
     22c:	88 23       	and	r24, r24
     22e:	c1 f3       	breq	.-16     	; 0x220 <ha_nlink_check_tx+0x46>
{
	node_t *node = &nlink.nodes[idx];

//	assert(node->tx_flag != 0)

	node->tx_flag = 0;
     230:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t tx_buf_len = node->tx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA;
     232:	1c 81       	ldd	r17, Y+4	; 0x04
     234:	1b 5f       	subi	r17, 0xFB	; 251
	memcpy(buf, node->tx_buf, tx_buf_len);
     236:	41 2f       	mov	r20, r17
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	be 01       	movw	r22, r28
     23c:	87 e8       	ldi	r24, 0x87	; 135
     23e:	9e e3       	ldi	r25, 0x3E	; 62
     240:	8c d8       	rcall	.-3816   	; 0xfffff35a <__eeprom_end+0xff7ef331>
		}

		tx_buf_len = ha_nlink_on_tx_default(i, nlink.io.tx_buf);

		// Initiate transfer in next timer interrupt
		if (tx_buf_len) {
     242:	11 23       	and	r17, r17
     244:	69 f3       	breq	.-38     	; 0x220 <ha_nlink_check_tx+0x46>
            // Check local nodes
            if (nlink_node_on_rx(nlink.io.tx_buf)) {
     246:	87 e8       	ldi	r24, 0x87	; 135
     248:	9e e3       	ldi	r25, 0x3E	; 62
     24a:	4d df       	rcall	.-358    	; 0xe6 <nlink_node_on_rx>
     24c:	81 11       	cpse	r24, r1
     24e:	cf cf       	rjmp	.-98     	; 0x1ee <ha_nlink_check_tx+0x14>
                return;
            }

            // Initiate transfer
            cli();
     250:	f8 94       	cli
			    nlink.io.tx_len = tx_buf_len;
     252:	10 93 94 3e 	sts	0x3E94, r17	; 0x803e94 <nlink+0x6e>
			    nlink.io.tx_rd = 0;
     256:	10 92 93 3e 	sts	0x3E93, r1	; 0x803e93 <nlink+0x6d>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     25a:	e0 92 85 3e 	sts	0x3E85, r14	; 0x803e85 <nlink+0x5f>
    nlink.io.idle_timer = 0;
     25e:	10 92 a6 3e 	sts	0x3EA6, r1	; 0x803ea6 <nlink+0x80>
    NLINK_RX_INT_ENABLE;
     262:	f0 92 55 04 	sts	0x0455, r15	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     266:	0b b9       	out	0x0b, r16	; 11
    NLINK_IO_TIMER_ENABLE;
     268:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
            // Initiate transfer
            cli();
			    nlink.io.tx_len = tx_buf_len;
			    nlink.io.tx_rd = 0;
			    isr_ha_nlink_io_set_idle();
            sei();
     26c:	78 94       	sei
     26e:	d8 cf       	rjmp	.-80     	; 0x220 <ha_nlink_check_tx+0x46>
    }

    // IO Idle timeout expired
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
        cli();
     270:	f8 94       	cli
            nlink.io.tx_rd = 0;
     272:	10 92 93 3e 	sts	0x3E93, r1	; 0x803e93 <nlink+0x6d>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     276:	80 93 85 3e 	sts	0x3E85, r24	; 0x803e85 <nlink+0x5f>
    nlink.io.idle_timer = 0;
     27a:	10 92 a6 3e 	sts	0x3EA6, r1	; 0x803ea6 <nlink+0x80>
    NLINK_RX_INT_ENABLE;
     27e:	8b e0       	ldi	r24, 0x0B	; 11
     280:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     284:	80 e2       	ldi	r24, 0x20	; 32
     286:	8b b9       	out	0x0b, r24	; 11
    NLINK_IO_TIMER_ENABLE;
     288:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
        cli();
            nlink.io.tx_rd = 0;
            isr_ha_nlink_io_set_idle(); // Restart previous transfer
        sei();
     28c:	78 94       	sei
        return;
     28e:	af cf       	rjmp	.-162    	; 0x1ee <ha_nlink_check_tx+0x14>

00000290 <isr_nlink_io_on_timer>:
void isr_nlink_io_on_timer ()
{ 
//   LVL-1 +2 +2
// LVL-2 +2         isr_nlink_io_on_rx_timer -> ha_nlink_io_set_idle

    if (nlink.io.is_rx_timer) {
     290:	80 91 86 3e 	lds	r24, 0x3E86	; 0x803e86 <nlink+0x60>
     294:	81 11       	cpse	r24, r1
     296:	24 c0       	rjmp	.+72     	; 0x2e0 <isr_nlink_io_on_timer+0x50>
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN0_MASK;
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN0_MASK;
     298:	4b 98       	cbi	0x09, 3	; 9
    nlink.io.rx_shift_reg = (nlink.io.rx_shift_reg >> 1) | (bit_in << 7);
}

static void isr_nlink_io_on_tx_timer()
{
    if (nlink.io.tx_len == 0) {
     29a:	90 91 94 3e 	lds	r25, 0x3E94	; 0x803e94 <nlink+0x6e>
     29e:	99 23       	and	r25, r25
     2a0:	c9 f0       	breq	.+50     	; 0x2d4 <isr_nlink_io_on_timer+0x44>
        return;
    }

    switch(nlink.io.state) {
     2a2:	20 91 85 3e 	lds	r18, 0x3E85	; 0x803e85 <nlink+0x5f>
     2a6:	21 30       	cpi	r18, 0x01	; 1
     2a8:	09 f4       	brne	.+2      	; 0x2ac <isr_nlink_io_on_timer+0x1c>
     2aa:	6e c0       	rjmp	.+220    	; 0x388 <isr_nlink_io_on_timer+0xf8>
     2ac:	98 f0       	brcs	.+38     	; 0x2d4 <isr_nlink_io_on_timer+0x44>
     2ae:	22 30       	cpi	r18, 0x02	; 2
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <isr_nlink_io_on_timer+0x24>
     2b2:	64 c0       	rjmp	.+200    	; 0x37c <isr_nlink_io_on_timer+0xec>
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
     2b4:	90 91 a4 3e 	lds	r25, 0x3EA4	; 0x803ea4 <nlink+0x7e>
     2b8:	99 23       	and	r25, r25
     2ba:	09 f4       	brne	.+2      	; 0x2be <isr_nlink_io_on_timer+0x2e>
     2bc:	9b c0       	rjmp	.+310    	; 0x3f4 <isr_nlink_io_on_timer+0x164>
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
     2be:	99 30       	cpi	r25, 0x09	; 9
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <isr_nlink_io_on_timer+0x34>
     2c2:	94 c0       	rjmp	.+296    	; 0x3ec <isr_nlink_io_on_timer+0x15c>
     2c4:	90 91 95 3e 	lds	r25, 0x3E95	; 0x803e95 <nlink+0x6f>
     2c8:	90 fd       	sbrc	r25, 0
     2ca:	92 c0       	rjmp	.+292    	; 0x3f0 <isr_nlink_io_on_timer+0x160>
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
                } else {
                    // 0-data bit
                    NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
     2cc:	4c 9a       	sbi	0x09, 4	; 9
                }
            }
            nlink.io.tx_shift_reg >>= 1;
     2ce:	96 95       	lsr	r25
     2d0:	90 93 95 3e 	sts	0x3E95, r25	; 0x803e95 <nlink+0x6f>
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN0_MASK;
        isr_nlink_io_on_tx_timer();
    }
    nlink.io.is_rx_timer = !nlink.io.is_rx_timer;
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	81 11       	cpse	r24, r1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 86 3e 	sts	0x3E86, r25	; 0x803e86 <nlink+0x60>
     2de:	08 95       	ret
{ 
//   LVL-1 +2 +2
// LVL-2 +2         isr_nlink_io_on_rx_timer -> ha_nlink_io_set_idle

    if (nlink.io.is_rx_timer) {
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN0_MASK;
     2e0:	4b 9a       	sbi	0x09, 3	; 9
    }
}

static void isr_nlink_io_on_rx_timer()
{
    switch(nlink.io.state) {
     2e2:	90 91 85 3e 	lds	r25, 0x3E85	; 0x803e85 <nlink+0x5f>
     2e6:	91 30       	cpi	r25, 0x01	; 1
     2e8:	09 f4       	brne	.+2      	; 0x2ec <isr_nlink_io_on_timer+0x5c>
     2ea:	40 c0       	rjmp	.+128    	; 0x36c <isr_nlink_io_on_timer+0xdc>
     2ec:	18 f1       	brcs	.+70     	; 0x334 <isr_nlink_io_on_timer+0xa4>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	b9 f5       	brne	.+110    	; 0x360 <isr_nlink_io_on_timer+0xd0>
    //   |   \___/\___0___X_ ... __X____7____/
    //   |     |             |                  |
    //   |     |             |                  |
    // Idle   Start       Data 8bits          Stop

    uint8_t bit_in = !!(NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK);
     2f2:	9a b1       	in	r25, 0x0a	; 10
     2f4:	90 72       	andi	r25, 0x20	; 32
    uint8_t bit_cnt = nlink.io.bit_cnt;
     2f6:	20 91 a4 3e 	lds	r18, 0x3EA4	; 0x803ea4 <nlink+0x7e>

    nlink.io.bit_cnt++;
     2fa:	31 e0       	ldi	r19, 0x01	; 1
     2fc:	32 0f       	add	r19, r18
     2fe:	30 93 a4 3e 	sts	0x3EA4, r19	; 0x803ea4 <nlink+0x7e>

    if (bit_cnt == 0) {
     302:	22 23       	and	r18, r18
     304:	09 f4       	brne	.+2      	; 0x308 <isr_nlink_io_on_timer+0x78>
     306:	56 c0       	rjmp	.+172    	; 0x3b4 <isr_nlink_io_on_timer+0x124>
            isr_ha_nlink_io_recover();
        }
        return;
    }

    if (bit_cnt == 9) {
     308:	29 30       	cpi	r18, 0x09	; 9
     30a:	09 f4       	brne	.+2      	; 0x30e <isr_nlink_io_on_timer+0x7e>
     30c:	76 c0       	rjmp	.+236    	; 0x3fa <isr_nlink_io_on_timer+0x16a>
            }
        }
        return;
    }

    nlink.io.rx_shift_reg = (nlink.io.rx_shift_reg >> 1) | (bit_in << 7);
     30e:	20 91 a3 3e 	lds	r18, 0x3EA3	; 0x803ea3 <nlink+0x7d>
     312:	42 2f       	mov	r20, r18
     314:	46 95       	lsr	r20
     316:	21 e0       	ldi	r18, 0x01	; 1
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	91 11       	cpse	r25, r1
     31c:	02 c0       	rjmp	.+4      	; 0x322 <isr_nlink_io_on_timer+0x92>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	36 95       	lsr	r19
     324:	32 2f       	mov	r19, r18
     326:	22 27       	eor	r18, r18
     328:	37 95       	ror	r19
     32a:	27 95       	ror	r18
     32c:	24 2b       	or	r18, r20
     32e:	20 93 a3 3e 	sts	0x3EA3, r18	; 0x803ea3 <nlink+0x7d>
     332:	d0 cf       	rjmp	.-96     	; 0x2d4 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_ACTIVE:
            isr_nlink_io_rx_on_receiving();
            break;
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
     334:	55 9b       	sbis	0x0a, 5	; 10
     336:	3a c0       	rjmp	.+116    	; 0x3ac <isr_nlink_io_on_timer+0x11c>
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
     338:	90 91 a5 3e 	lds	r25, 0x3EA5	; 0x803ea5 <nlink+0x7f>
     33c:	91 50       	subi	r25, 0x01	; 1
     33e:	90 93 a5 3e 	sts	0x3EA5, r25	; 0x803ea5 <nlink+0x7f>
     342:	91 11       	cpse	r25, r1
     344:	c7 cf       	rjmp	.-114    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	90 93 85 3e 	sts	0x3E85, r25	; 0x803e85 <nlink+0x5f>
    nlink.io.idle_timer = 0;
     34c:	10 92 a6 3e 	sts	0x3EA6, r1	; 0x803ea6 <nlink+0x80>
    NLINK_RX_INT_ENABLE;
     350:	9b e0       	ldi	r25, 0x0B	; 11
     352:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     356:	90 e2       	ldi	r25, 0x20	; 32
     358:	9b b9       	out	0x0b, r25	; 11
    NLINK_IO_TIMER_ENABLE;
     35a:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     35e:	ba cf       	rjmp	.-140    	; 0x2d4 <isr_nlink_io_on_timer+0x44>

        case NLINK_IO_STATE_IDLE:
            isr_nlink_io_rx_on_idle();
            break;
        default:
            FATAL_TRAP(__LINE__);
     360:	89 e5       	ldi	r24, 0x59	; 89
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	83 de       	rcall	.-762    	; 0x6c <FATAL_TRAP>
     366:	80 91 86 3e 	lds	r24, 0x3E86	; 0x803e86 <nlink+0x60>
     36a:	b4 cf       	rjmp	.-152    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
    }
}

static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
     36c:	90 91 a6 3e 	lds	r25, 0x3EA6	; 0x803ea6 <nlink+0x80>
     370:	9a 30       	cpi	r25, 0x0A	; 10
     372:	60 f5       	brcc	.+88     	; 0x3cc <isr_nlink_io_on_timer+0x13c>
        nlink.io.idle_timer++;
     374:	9f 5f       	subi	r25, 0xFF	; 255
     376:	90 93 a6 3e 	sts	0x3EA6, r25	; 0x803ea6 <nlink+0x80>
     37a:	ac cf       	rjmp	.-168    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
            }
            break;
        case NLINK_IO_STATE_RECOVERING:
            break;
        default:
            FATAL_TRAP(__LINE__);
     37c:	81 e4       	ldi	r24, 0x41	; 65
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	75 de       	rcall	.-790    	; 0x6c <FATAL_TRAP>
     382:	80 91 86 3e 	lds	r24, 0x3E86	; 0x803e86 <nlink+0x60>
     386:	a6 cf       	rjmp	.-180    	; 0x2d4 <isr_nlink_io_on_timer+0x44>

        case NLINK_IO_STATE_IDLE:
            if (nlink.io.tx_len == 0) {
                break;
            }
            if (nlink.io.tx_rd < nlink.io.tx_len) {
     388:	e0 91 93 3e 	lds	r30, 0x3E93	; 0x803e93 <nlink+0x6d>
     38c:	e9 17       	cp	r30, r25
     38e:	10 f1       	brcs	.+68     	; 0x3d4 <isr_nlink_io_on_timer+0x144>
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
     390:	9e 13       	cpse	r25, r30
     392:	a0 cf       	rjmp	.-192    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
     394:	20 91 96 3e 	lds	r18, 0x3E96	; 0x803e96 <nlink+0x70>
     398:	90 91 87 3e 	lds	r25, 0x3E87	; 0x803e87 <nlink+0x61>
     39c:	29 17       	cp	r18, r25
     39e:	f1 f1       	breq	.+124    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
                } else {
                    // Transmittion failed.
                    // Use tx_rd > tx_len as retransmit required flag
                    // Retransmittion will be initiated in idle loop
                    // after idle timeout expired
                    nlink.io.tx_rd = 0xFF; // aka (tx_len + 1)
     3a0:	9f ef       	ldi	r25, 0xFF	; 255
     3a2:	90 93 93 3e 	sts	0x3E93, r25	; 0x803e93 <nlink+0x6d>
                }
                // Invalidate just received own data
                nlink.io.rx_wr = 0;
     3a6:	10 92 a2 3e 	sts	0x3EA2, r1	; 0x803ea2 <nlink+0x7c>
     3aa:	94 cf       	rjmp	.-216    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
     3ac:	9f e3       	ldi	r25, 0x3F	; 63
     3ae:	90 93 a5 3e 	sts	0x3EA5, r25	; 0x803ea5 <nlink+0x7f>
     3b2:	90 cf       	rjmp	.-224    	; 0x2d4 <isr_nlink_io_on_timer+0x44>

    nlink.io.bit_cnt++;

    if (bit_cnt == 0) {
        // Check START bit
        if (bit_in) {
     3b4:	99 23       	and	r25, r25
     3b6:	09 f4       	brne	.+2      	; 0x3ba <isr_nlink_io_on_timer+0x12a>
     3b8:	8d cf       	rjmp	.-230    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
    NLINK_IO_TIMER_ENABLE;
}
static void isr_ha_nlink_io_recover()
{ // LVL-2 +2
    
    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
     3ba:	4c 98       	cbi	0x09, 4	; 9
    nlink.io.state = NLINK_IO_STATE_RECOVERING;
     3bc:	10 92 85 3e 	sts	0x3E85, r1	; 0x803e85 <nlink+0x5f>
    nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
     3c0:	90 e4       	ldi	r25, 0x40	; 64
     3c2:	90 93 a5 3e 	sts	0x3EA5, r25	; 0x803ea5 <nlink+0x7f>
    nlink.io.rx_wr = 0;
     3c6:	10 92 a2 3e 	sts	0x3EA2, r1	; 0x803ea2 <nlink+0x7c>
     3ca:	c2 cf       	rjmp	.-124    	; 0x350 <isr_nlink_io_on_timer+0xc0>
static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
        nlink.io.idle_timer++;
    } else {
        NLINK_IO_TIMER_DISABLE;
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
     3ce:	90 93 00 3e 	sts	0x3E00, r25	; 0x803e00 <__data_start>
     3d2:	80 cf       	rjmp	.-256    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
            if (nlink.io.tx_len == 0) {
                break;
            }
            if (nlink.io.tx_rd < nlink.io.tx_len) {
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	9e 0f       	add	r25, r30
     3d8:	90 93 93 3e 	sts	0x3E93, r25	; 0x803e93 <nlink+0x6d>
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	e9 57       	subi	r30, 0x79	; 121
     3e0:	f1 4c       	sbci	r31, 0xC1	; 193
     3e2:	90 81       	ld	r25, Z
     3e4:	90 93 95 3e 	sts	0x3E95, r25	; 0x803e95 <nlink+0x6f>
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
     3e8:	4c 9a       	sbi	0x09, 4	; 9
     3ea:	74 cf       	rjmp	.-280    	; 0x2d4 <isr_nlink_io_on_timer+0x44>
     3ec:	90 91 95 3e 	lds	r25, 0x3E95	; 0x803e95 <nlink+0x6f>
    switch(nlink.io.state) {
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
     3f0:	4c 98       	cbi	0x09, 4	; 9
     3f2:	6d cf       	rjmp	.-294    	; 0x2ce <isr_nlink_io_on_timer+0x3e>
     3f4:	90 91 95 3e 	lds	r25, 0x3E95	; 0x803e95 <nlink+0x6f>
     3f8:	6a cf       	rjmp	.-300    	; 0x2ce <isr_nlink_io_on_timer+0x3e>
        return;
    }

    if (bit_cnt == 9) {
        // Check STOP bit
        if (!bit_in) {
     3fa:	99 23       	and	r25, r25
     3fc:	f1 f2       	breq	.-68     	; 0x3ba <isr_nlink_io_on_timer+0x12a>
            isr_ha_nlink_io_recover();
        } else {
            if (nlink.io.rx_wr == sizeof(nlink.io.rx_buf)) {
     3fe:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <nlink+0x7c>
     402:	ec 30       	cpi	r30, 0x0C	; 12
     404:	d1 f2       	breq	.-76     	; 0x3ba <isr_nlink_io_on_timer+0x12a>
                isr_ha_nlink_io_recover();
            } else {
                nlink.io.rx_buf[nlink.io.rx_wr++] = nlink.io.rx_shift_reg;
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	9e 0f       	add	r25, r30
     40a:	90 93 a2 3e 	sts	0x3EA2, r25	; 0x803ea2 <nlink+0x7c>
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	ea 56       	subi	r30, 0x6A	; 106
     412:	f1 4c       	sbci	r31, 0xC1	; 193
     414:	90 91 a3 3e 	lds	r25, 0x3EA3	; 0x803ea3 <nlink+0x7d>
     418:	90 83       	st	Z, r25
     41a:	95 cf       	rjmp	.-214    	; 0x346 <isr_nlink_io_on_timer+0xb6>
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
     41c:	20 91 97 3e 	lds	r18, 0x3E97	; 0x803e97 <nlink+0x71>
     420:	90 91 88 3e 	lds	r25, 0x3E88	; 0x803e88 <nlink+0x62>
     424:	29 13       	cpse	r18, r25
     426:	bc cf       	rjmp	.-136    	; 0x3a0 <isr_nlink_io_on_timer+0x110>
                     nlink.io.rx_buf[1] == nlink.io.tx_buf[1]) {
                    // Transfer is OK
                    nlink.io.tx_rd = 0;
     428:	10 92 93 3e 	sts	0x3E93, r1	; 0x803e93 <nlink+0x6d>
                    nlink.io.tx_len = 0;
     42c:	10 92 94 3e 	sts	0x3E94, r1	; 0x803e94 <nlink+0x6e>
     430:	ba cf       	rjmp	.-140    	; 0x3a6 <isr_nlink_io_on_timer+0x116>

00000432 <isr_nlink_io_on_start_edge>:
}

void isr_nlink_io_on_start_edge ()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
     432:	80 91 85 3e 	lds	r24, 0x3E85	; 0x803e85 <nlink+0x5f>
     436:	88 23       	and	r24, r24
     438:	79 f0       	breq	.+30     	; 0x458 <isr_nlink_io_on_start_edge+0x26>
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
        return;
    }

    NLINK_RX_INT_DISABLE;
     43a:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     43e:	80 e2       	ldi	r24, 0x20	; 32
     440:	8b b9       	out	0x0b, r24	; 11
    nlink.io.is_rx_timer = 1;      // Next timer interrupt will be RX
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 86 3e 	sts	0x3E86, r24	; 0x803e86 <nlink+0x60>
    nlink.io.bit_cnt = 0;
     448:	10 92 a4 3e 	sts	0x3EA4, r1	; 0x803ea4 <nlink+0x7e>
    nlink.io.state = NLINK_IO_STATE_ACTIVE;
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	80 93 85 3e 	sts	0x3E85, r24	; 0x803e85 <nlink+0x5f>

    NLINK_IO_TIMER_ENABLE;
     452:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     456:	08 95       	ret

void isr_nlink_io_on_start_edge ()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
     458:	80 e4       	ldi	r24, 0x40	; 64
     45a:	80 93 a5 3e 	sts	0x3EA5, r24	; 0x803ea5 <nlink+0x7f>
        return;
     45e:	08 95       	ret

00000460 <ha_node_ledlight_on_param>:
#endif

uint16_t gus_trap_line;

void ha_node_ledlight_on_param (ha_node_ll_info_t *ll, uint8_t param_intensity_idx)
{ // LVL3 + 3 + 2
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	dc 01       	movw	r26, r24
    uint8_t led_mask = 1;
    node_t *ll_node = ll->node;
     466:	14 96       	adiw	r26, 0x04	; 4
     468:	cd 91       	ld	r28, X+
     46a:	dc 91       	ld	r29, X
     46c:	15 97       	sbiw	r26, 0x05	; 5
    uint8_t fadein_period = ll->cfg->fadein_period;
     46e:	12 96       	adiw	r26, 0x02	; 2
     470:	ed 91       	ld	r30, X+
     472:	fc 91       	ld	r31, X
     474:	13 97       	sbiw	r26, 0x03	; 3
     476:	81 81       	ldd	r24, Z+1	; 0x01

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
     478:	19 96       	adiw	r26, 0x09	; 9
     47a:	9c 91       	ld	r25, X
     47c:	19 97       	sbiw	r26, 0x09	; 9
     47e:	99 23       	and	r25, r25
     480:	11 f1       	breq	.+68     	; 0x4c6 <ha_node_ledlight_on_param+0x66>
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	0a c0       	rjmp	.+20     	; 0x49c <ha_node_ledlight_on_param+0x3c>
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
            led->uc_on_intensity_idx : param_intensity_idx;

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
     488:	23 2f       	mov	r18, r19
     48a:	21 83       	std	Z+1, r18	; 0x01
        led->uc_fade_timer = fadein_period;
     48c:	84 83       	std	Z+4, r24	; 0x04
{ // LVL3 + 3 + 2
    uint8_t led_mask = 1;
    node_t *ll_node = ll->node;
    uint8_t fadein_period = ll->cfg->fadein_period;

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
     48e:	9f 5f       	subi	r25, 0xFF	; 255
     490:	44 0f       	add	r20, r20
     492:	19 96       	adiw	r26, 0x09	; 9
     494:	2c 91       	ld	r18, X
     496:	19 97       	sbiw	r26, 0x09	; 9
     498:	92 17       	cp	r25, r18
     49a:	a8 f4       	brcc	.+42     	; 0x4c6 <ha_node_ledlight_on_param+0x66>
        led_info_t *led = &ll->leds[i];
     49c:	1a 96       	adiw	r26, 0x0a	; 10
     49e:	ed 91       	ld	r30, X+
     4a0:	fc 91       	ld	r31, X
     4a2:	1b 97       	sbiw	r26, 0x0b	; 11
     4a4:	26 e0       	ldi	r18, 0x06	; 6
     4a6:	92 9f       	mul	r25, r18
     4a8:	e0 0d       	add	r30, r0
     4aa:	f1 1d       	adc	r31, r1
     4ac:	11 24       	eor	r1, r1
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
     4ae:	63 31       	cpi	r22, 0x13	; 19
     4b0:	41 f0       	breq	.+16     	; 0x4c2 <ha_node_ledlight_on_param+0x62>
     4b2:	36 2f       	mov	r19, r22
            led->uc_on_intensity_idx : param_intensity_idx;

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
     4b4:	17 96       	adiw	r26, 0x07	; 7
     4b6:	2c 91       	ld	r18, X
     4b8:	17 97       	sbiw	r26, 0x07	; 7
     4ba:	24 23       	and	r18, r20
     4bc:	29 f3       	breq	.-54     	; 0x488 <ha_node_ledlight_on_param+0x28>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	e4 cf       	rjmp	.-56     	; 0x48a <ha_node_ledlight_on_param+0x2a>

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
        led_info_t *led = &ll->leds[i];
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
     4c2:	32 81       	ldd	r19, Z+2	; 0x02
     4c4:	f7 cf       	rjmp	.-18     	; 0x4b4 <ha_node_ledlight_on_param+0x54>

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
        led->uc_fade_timer = fadein_period;
    }

    ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_ON;        // mode is not ON yet, but will be soon
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	8b 87       	std	Y+11, r24	; 0x0b
    ha_nlink_node_send(ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
     4ca:	43 e0       	ldi	r20, 0x03	; 3
     4cc:	6f ef       	ldi	r22, 0xFF	; 255
     4ce:	ce 01       	movw	r24, r28
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
        led->uc_fade_timer = fadein_period;
    }

    ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_ON;        // mode is not ON yet, but will be soon
    ha_nlink_node_send(ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
     4d4:	48 ce       	rjmp	.-880    	; 0x166 <ha_nlink_node_send>

000004d6 <ha_node_ledlight_off>:
}

#define ha_node_ledlight_on(ll) ha_node_ledlight_on_param(ll, INTENSITIES_NUM)

void ha_node_ledlight_off (ha_node_ll_info_t *ll)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	dc 01       	movw	r26, r24
    // LVL +2 +2    ha_node_ledlight_off 
    
    node_t *ll_node = ll->node;
     4dc:	14 96       	adiw	r26, 0x04	; 4
     4de:	cd 91       	ld	r28, X+
     4e0:	dc 91       	ld	r29, X
     4e2:	15 97       	sbiw	r26, 0x05	; 5
    uint8_t fadeout_period = ll->cfg->fadeout_period;
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	ed 91       	ld	r30, X+
     4e8:	fc 91       	ld	r31, X
     4ea:	13 97       	sbiw	r26, 0x03	; 3
     4ec:	32 81       	ldd	r19, Z+2	; 0x02
    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     4ee:	19 96       	adiw	r26, 0x09	; 9
     4f0:	8c 91       	ld	r24, X
     4f2:	19 97       	sbiw	r26, 0x09	; 9
     4f4:	88 23       	and	r24, r24
     4f6:	91 f0       	breq	.+36     	; 0x51c <ha_node_ledlight_off+0x46>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
        led_info_t *led = &ll->leds[i];
     4fa:	1a 96       	adiw	r26, 0x0a	; 10
     4fc:	ed 91       	ld	r30, X+
     4fe:	fc 91       	ld	r31, X
     500:	1b 97       	sbiw	r26, 0x0b	; 11
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	98 9f       	mul	r25, r24
     506:	e0 0d       	add	r30, r0
     508:	f1 1d       	adc	r31, r1
     50a:	11 24       	eor	r1, r1
        led->uc_target_intensity_idx = 0;
     50c:	11 82       	std	Z+1, r1	; 0x01
        led->uc_fade_timer = fadeout_period;
     50e:	34 83       	std	Z+4, r19	; 0x04
{
    // LVL +2 +2    ha_node_ledlight_off 
    
    node_t *ll_node = ll->node;
    uint8_t fadeout_period = ll->cfg->fadeout_period;
    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     510:	9f 5f       	subi	r25, 0xFF	; 255
     512:	19 96       	adiw	r26, 0x09	; 9
     514:	2c 91       	ld	r18, X
     516:	19 97       	sbiw	r26, 0x09	; 9
     518:	92 17       	cp	r25, r18
     51a:	78 f3       	brcs	.-34     	; 0x4fa <ha_node_ledlight_off+0x24>
        led_info_t *led = &ll->leds[i];
        led->uc_target_intensity_idx = 0;
        led->uc_fade_timer = fadeout_period;
    }
    ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_OFF;        // mode is not OFF yet, but will be soon
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	8b 87       	std	Y+11, r24	; 0x0b
    ha_nlink_node_send(ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
     520:	43 e0       	ldi	r20, 0x03	; 3
     522:	6f ef       	ldi	r22, 0xFF	; 255
     524:	ce 01       	movw	r24, r28
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
        led_info_t *led = &ll->leds[i];
        led->uc_target_intensity_idx = 0;
        led->uc_fade_timer = fadeout_period;
    }
    ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_OFF;        // mode is not OFF yet, but will be soon
    ha_nlink_node_send(ll_node, NODE_ADDR_BC, NLINK_CMD_INFO);
     52a:	1d ce       	rjmp	.-966    	; 0x166 <ha_nlink_node_send>

0000052c <ledlight_on_rx>:
    } // End of action table traverse loop
    
}

void ledlight_on_rx (void *ctx, const uint8_t *buf_in)
{ 
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ac 01       	movw	r20, r24
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_LEDLIGHT) {
     53a:	eb 01       	movw	r28, r22
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	80 32       	cpi	r24, 0x20	; 32
     540:	c9 f1       	breq	.+114    	; 0x5b4 <ledlight_on_rx+0x88>
            ha_node_ledlight_on(ll_node);
        } else if (ll_node->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_off(ll_node);
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {
     542:	80 33       	cpi	r24, 0x30	; 48
     544:	39 f0       	breq	.+14     	; 0x554 <ledlight_on_rx+0x28>
        // Unexpected event type
        return;
    }
    
    return;
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	08 95       	ret
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t *)ctx;
    node_t *node = ll_node->node;
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];
     554:	8c 81       	ldd	r24, Y+4	; 0x04
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     556:	88 23       	and	r24, r24
     558:	b1 f3       	breq	.-20     	; 0x546 <ledlight_on_rx+0x1a>
    
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t *)ctx;
    node_t *node = ll_node->node;
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
     55a:	28 81       	ld	r18, Y
     55c:	ea 01       	movw	r28, r20
     55e:	08 81       	ld	r16, Y
     560:	19 81       	ldd	r17, Y+1	; 0x01
     562:	db 01       	movw	r26, r22
     564:	15 96       	adiw	r26, 0x05	; 5
     566:	81 50       	subi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	06 96       	adiw	r24, 0x06	; 6
     56c:	68 0f       	add	r22, r24
     56e:	79 1f       	adc	r23, r25

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
            uint8_t sw_param = buf_in[NLINK_HDR_OFF_DATA + i];
     570:	3d 91       	ld	r19, X+

static void sw_behavior_control(ha_node_ll_info_t *ll, uint8_t addr_from, uint8_t sw_param)
{ // LVL - static
    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_ll_evt_action_t *evt_act = ll->evt_actions; 
     572:	f8 01       	movw	r30, r16
     574:	83 81       	ldd	r24, Z+3	; 0x03
     576:	81 11       	cpse	r24, r1
     578:	05 c0       	rjmp	.+10     	; 0x584 <ledlight_on_rx+0x58>
     57a:	12 c0       	rjmp	.+36     	; 0x5a0 <ledlight_on_rx+0x74>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {
     57c:	35 96       	adiw	r30, 0x05	; 5

static void sw_behavior_control(ha_node_ll_info_t *ll, uint8_t addr_from, uint8_t sw_param)
{ // LVL - static
    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_ll_evt_action_t *evt_act = ll->evt_actions; 
     57e:	93 81       	ldd	r25, Z+3	; 0x03
     580:	99 23       	and	r25, r25
     582:	71 f0       	breq	.+28     	; 0x5a0 <ledlight_on_rx+0x74>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        if (evt_act->evt_type != NODE_TYPE_SWITCH)
     584:	90 81       	ld	r25, Z
     586:	90 33       	cpi	r25, 0x30	; 48
     588:	c9 f7       	brne	.-14     	; 0x57c <ledlight_on_rx+0x50>
            continue;

        if (evt_act->evt_addr != addr_from && evt_act->evt_addr != NODE_ADDR_BC)
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	29 17       	cp	r18, r25
     58e:	11 f0       	breq	.+4      	; 0x594 <ledlight_on_rx+0x68>
     590:	9f 3f       	cpi	r25, 0xFF	; 255
     592:	a1 f7       	brne	.-24     	; 0x57c <ledlight_on_rx+0x50>
            continue;

        if (evt_act->evt_param != sw_param) 
     594:	92 81       	ldd	r25, Z+2	; 0x02
     596:	39 13       	cpse	r19, r25
     598:	f1 cf       	rjmp	.-30     	; 0x57c <ledlight_on_rx+0x50>
            continue;

        /* Action is recognized by LL - postpone execution
           to the idle loop to reduce stack usage  */
        ll->action = evt_act;
     59a:	ea 01       	movw	r28, r20
     59c:	ec 87       	std	Y+12, r30	; 0x0c
     59e:	fd 87       	std	Y+13, r31	; 0x0d
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     5a0:	a6 17       	cp	r26, r22
     5a2:	b7 07       	cpc	r27, r23
     5a4:	29 f7       	brne	.-54     	; 0x570 <ledlight_on_rx+0x44>
        // Unexpected event type
        return;
    }
    
    return;
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	08 95       	ret
{ 
    // LVL3     +7  +2    ledlight_on_rx
    //   LVL4   +2  +2    ha_node_ledlight_off 
    
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t *)ctx;
    node_t *node = ll_node->node;
     5b4:	fa 01       	movw	r30, r20
     5b6:	e4 80       	ldd	r14, Z+4	; 0x04
     5b8:	f5 80       	ldd	r15, Z+5	; 0x05
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_LEDLIGHT) {
        // Direct LEDLIGHT state info. Typically received from user console
        // Address must be specified explicitly
        if (buf_in[NLINK_HDR_OFF_TO] != ll_node->node->addr) {
     5ba:	99 81       	ldd	r25, Y+1	; 0x01
     5bc:	e7 01       	movw	r28, r14
     5be:	88 81       	ld	r24, Y
     5c0:	98 13       	cpse	r25, r24
     5c2:	c1 cf       	rjmp	.-126    	; 0x546 <ledlight_on_rx+0x1a>
            return;
        }

        ll_node->led_mode = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE];
     5c4:	fb 01       	movw	r30, r22
     5c6:	85 81       	ldd	r24, Z+5	; 0x05
     5c8:	ea 01       	movw	r28, r20
     5ca:	88 87       	std	Y+8, r24	; 0x08
        ll_node->disabled_mask = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK];
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	8f 83       	std	Y+7, r24	; 0x07
        for (i = 0; i < ll_node->leds_num; i++) {
     5d0:	99 85       	ldd	r25, Y+9	; 0x09
     5d2:	99 23       	and	r25, r25
     5d4:	c1 f0       	breq	.+48     	; 0x606 <ledlight_on_rx+0xda>
     5d6:	eb 01       	movw	r28, r22
     5d8:	27 96       	adiw	r28, 0x07	; 7
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
            ll_node->leds[i].uc_on_intensity_idx = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i];
     5e2:	89 91       	ld	r24, Y+
     5e4:	fa 01       	movw	r30, r20
     5e6:	02 85       	ldd	r16, Z+10	; 0x0a
     5e8:	13 85       	ldd	r17, Z+11	; 0x0b
     5ea:	f8 01       	movw	r30, r16
     5ec:	ea 0f       	add	r30, r26
     5ee:	fb 1f       	adc	r31, r27
     5f0:	82 83       	std	Z+2, r24	; 0x02
            return;
        }

        ll_node->led_mode = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE];
        ll_node->disabled_mask = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK];
        for (i = 0; i < ll_node->leds_num; i++) {
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	fa 01       	movw	r30, r20
     5f8:	91 85       	ldd	r25, Z+9	; 0x09
     5fa:	16 96       	adiw	r26, 0x06	; 6
     5fc:	e9 2f       	mov	r30, r25
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	2e 17       	cp	r18, r30
     602:	3f 07       	cpc	r19, r31
     604:	74 f3       	brlt	.-36     	; 0x5e2 <ledlight_on_rx+0xb6>
     606:	8a 01       	movw	r16, r20
            ll_node->leds[i].uc_on_intensity_idx = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i];
        }

        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + ll_node->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);
     608:	9e 5f       	subi	r25, 0xFE	; 254
     60a:	49 2f       	mov	r20, r25
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	6b 5f       	subi	r22, 0xFB	; 251
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	c7 01       	movw	r24, r14
     614:	0b 96       	adiw	r24, 0x0b	; 11
     616:	a1 d6       	rcall	.+3394   	; 0x135a <memcpy>

        if (ll_node->led_mode == LED_MODE_ON) {
     618:	e8 01       	movw	r28, r16
     61a:	88 85       	ldd	r24, Y+8	; 0x08
     61c:	82 30       	cpi	r24, 0x02	; 2
     61e:	59 f0       	breq	.+22     	; 0x636 <ledlight_on_rx+0x10a>
            ha_node_ledlight_on(ll_node);
        } else if (ll_node->led_mode == LED_MODE_OFF) {
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	09 f0       	breq	.+2      	; 0x626 <ledlight_on_rx+0xfa>
     624:	90 cf       	rjmp	.-224    	; 0x546 <ledlight_on_rx+0x1a>
            ha_node_ledlight_off(ll_node);
     626:	c8 01       	movw	r24, r16
        // Unexpected event type
        return;
    }
    
    return;
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (ll_node->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(ll_node);
        } else if (ll_node->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_off(ll_node);
     634:	50 cf       	rjmp	.-352    	; 0x4d6 <ha_node_ledlight_off>
        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + ll_node->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (ll_node->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(ll_node);
     636:	63 e1       	ldi	r22, 0x13	; 19
     638:	c8 01       	movw	r24, r16
        // Unexpected event type
        return;
    }
    
    return;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + ll_node->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (ll_node->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(ll_node);
     646:	0c cf       	rjmp	.-488    	; 0x460 <ha_node_ledlight_on_param>

00000648 <ha_node_ledlight_dimm>:
/*
 * If dimm_idx == dimms_num then roll over dimm table,
 * otherwise set dimm_idx to the specified value
 */
void ha_node_ledlight_dimm (ha_node_ll_info_t *ll, uint8_t dimm_idx)
{ // LVL3    +11 +2
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ec 01       	movw	r28, r24
  //   LVL4      +2  eeprom_read
    
    node_t *ll_node = ll->node;
     660:	cc 80       	ldd	r12, Y+4	; 0x04
     662:	dd 80       	ldd	r13, Y+5	; 0x05
    uint8_t dimms_num = ll->cfg->dimms_num;
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	b6 80       	ldd	r11, Z+6	; 0x06
    uint8_t fadeout_period = ll->cfg->fadeout_period;
     66a:	a2 80       	ldd	r10, Z+2	; 0x02
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     66c:	89 85       	ldd	r24, Y+9	; 0x09
     66e:	88 23       	and	r24, r24
     670:	f1 f1       	breq	.+124    	; 0x6ee <ha_node_ledlight_dimm+0xa6>
     672:	e6 2e       	mov	r14, r22
     674:	f1 2c       	mov	r15, r1
     676:	91 2c       	mov	r9, r1
     678:	12 c0       	rjmp	.+36     	; 0x69e <ha_node_ledlight_dimm+0x56>
                all_off ++;
            } else {
                led->uc_dimm_idx--;
            }
        } else {
            led->uc_dimm_idx = dimm_idx;
     67a:	e3 82       	std	Z+3, r14	; 0x03
     67c:	9e 2d       	mov	r25, r14
        }
        
        led->uc_on_intensity_idx = eeprom_read_byte(ll->cfg->dimms + led->uc_dimm_idx);
     67e:	ea 81       	ldd	r30, Y+2	; 0x02
     680:	fb 81       	ldd	r31, Y+3	; 0x03
     682:	27 81       	ldd	r18, Z+7	; 0x07
     684:	30 85       	ldd	r19, Z+8	; 0x08
     686:	a9 01       	movw	r20, r18
     688:	49 0f       	add	r20, r25
     68a:	51 1d       	adc	r21, r1
     68c:	ca 01       	movw	r24, r20
     68e:	75 d6       	rcall	.+3306   	; 0x137a <eeprom_read_byte>
     690:	f8 01       	movw	r30, r16
     692:	82 83       	std	Z+2, r24	; 0x02
        led->uc_fade_timer = fadeout_period;
     694:	a4 82       	std	Z+4, r10	; 0x04
    node_t *ll_node = ll->node;
    uint8_t dimms_num = ll->cfg->dimms_num;
    uint8_t fadeout_period = ll->cfg->fadeout_period;
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     696:	f3 94       	inc	r15
     698:	99 85       	ldd	r25, Y+9	; 0x09
     69a:	f9 16       	cp	r15, r25
     69c:	98 f4       	brcc	.+38     	; 0x6c4 <ha_node_ledlight_dimm+0x7c>
        led_info_t *led = &ll->leds[i];
     69e:	0a 85       	ldd	r16, Y+10	; 0x0a
     6a0:	1b 85       	ldd	r17, Y+11	; 0x0b
     6a2:	46 e0       	ldi	r20, 0x06	; 6
     6a4:	f4 9e       	mul	r15, r20
     6a6:	00 0d       	add	r16, r0
     6a8:	11 1d       	adc	r17, r1
     6aa:	11 24       	eor	r1, r1
        if (dimm_idx == dimms_num) {
            // Rollover dimm table
            if (led->uc_dimm_idx == 0) {
     6ac:	f8 01       	movw	r30, r16
    uint8_t fadeout_period = ll->cfg->fadeout_period;
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < ll->leds_num; i ++) {
        led_info_t *led = &ll->leds[i];
        if (dimm_idx == dimms_num) {
     6ae:	be 10       	cpse	r11, r14
     6b0:	e4 cf       	rjmp	.-56     	; 0x67a <ha_node_ledlight_dimm+0x32>
            // Rollover dimm table
            if (led->uc_dimm_idx == 0) {
     6b2:	93 81       	ldd	r25, Z+3	; 0x03
     6b4:	91 11       	cpse	r25, r1
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <ha_node_ledlight_dimm+0x74>
                all_off ++;
     6b8:	93 94       	inc	r9
     6ba:	e1 cf       	rjmp	.-62     	; 0x67e <ha_node_ledlight_dimm+0x36>
            } else {
                led->uc_dimm_idx--;
     6bc:	91 50       	subi	r25, 0x01	; 1
     6be:	f8 01       	movw	r30, r16
     6c0:	93 83       	std	Z+3, r25	; 0x03
     6c2:	dd cf       	rjmp	.-70     	; 0x67e <ha_node_ledlight_dimm+0x36>
        led->uc_on_intensity_idx = eeprom_read_byte(ll->cfg->dimms + led->uc_dimm_idx);
        led->uc_fade_timer = fadeout_period;
    }

    // Wrap around intensity only when LED are OFF
    if (all_off == ll->leds_num) {
     6c4:	99 16       	cp	r9, r25
     6c6:	f9 f0       	breq	.+62     	; 0x706 <ha_node_ledlight_dimm+0xbe>
            led->uc_on_intensity_idx = last_intensity;
        }
    }

    // Update NLINK buffer
    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     6c8:	99 23       	and	r25, r25
     6ca:	89 f0       	breq	.+34     	; 0x6ee <ha_node_ledlight_dimm+0xa6>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
        led_info_t *led = &ll->leds[i];
        ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
     6ce:	ea 85       	ldd	r30, Y+10	; 0x0a
     6d0:	fb 85       	ldd	r31, Y+11	; 0x0b
     6d2:	56 e0       	ldi	r21, 0x06	; 6
     6d4:	85 9f       	mul	r24, r21
     6d6:	e0 0d       	add	r30, r0
     6d8:	f1 1d       	adc	r31, r1
     6da:	11 24       	eor	r1, r1
     6dc:	92 81       	ldd	r25, Z+2	; 0x02
     6de:	f6 01       	movw	r30, r12
     6e0:	e8 0f       	add	r30, r24
     6e2:	f1 1d       	adc	r31, r1
     6e4:	95 87       	std	Z+13, r25	; 0x0d
            led->uc_on_intensity_idx = last_intensity;
        }
    }

    // Update NLINK buffer
    for (uint8_t i = 0; i < ll->leds_num; i ++) {
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	99 85       	ldd	r25, Y+9	; 0x09
     6ea:	89 17       	cp	r24, r25
     6ec:	80 f3       	brcs	.-32     	; 0x6ce <ha_node_ledlight_dimm+0x86>
        led_info_t *led = &ll->leds[i];
        ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
    }
    return;
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	08 95       	ret
        led->uc_fade_timer = fadeout_period;
    }

    // Wrap around intensity only when LED are OFF
    if (all_off == ll->leds_num) {
        uint8_t last_idx = dimms_num - 1;
     706:	ba 94       	dec	r11
        uint8_t last_intensity = eeprom_read_byte(ll->cfg->dimms + last_idx);
     708:	ea 81       	ldd	r30, Y+2	; 0x02
     70a:	fb 81       	ldd	r31, Y+3	; 0x03
     70c:	87 81       	ldd	r24, Z+7	; 0x07
     70e:	90 85       	ldd	r25, Z+8	; 0x08
     710:	8b 0d       	add	r24, r11
     712:	91 1d       	adc	r25, r1
     714:	32 d6       	rcall	.+3172   	; 0x137a <eeprom_read_byte>
        for (uint8_t i = 0; i < ll->leds_num; i ++) {
     716:	99 20       	and	r9, r9
     718:	51 f3       	breq	.-44     	; 0x6ee <ha_node_ledlight_dimm+0xa6>
     71a:	20 e0       	ldi	r18, 0x00	; 0
            led_info_t *led = &ll->leds[i];
     71c:	ea 85       	ldd	r30, Y+10	; 0x0a
     71e:	fb 85       	ldd	r31, Y+11	; 0x0b
     720:	46 e0       	ldi	r20, 0x06	; 6
     722:	24 9f       	mul	r18, r20
     724:	e0 0d       	add	r30, r0
     726:	f1 1d       	adc	r31, r1
     728:	11 24       	eor	r1, r1
            led->uc_dimm_idx = last_idx;
     72a:	b3 82       	std	Z+3, r11	; 0x03
            led->uc_on_intensity_idx = last_intensity;
     72c:	82 83       	std	Z+2, r24	; 0x02

    // Wrap around intensity only when LED are OFF
    if (all_off == ll->leds_num) {
        uint8_t last_idx = dimms_num - 1;
        uint8_t last_intensity = eeprom_read_byte(ll->cfg->dimms + last_idx);
        for (uint8_t i = 0; i < ll->leds_num; i ++) {
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	99 85       	ldd	r25, Y+9	; 0x09
     732:	29 17       	cp	r18, r25
     734:	98 f3       	brcs	.-26     	; 0x71c <ha_node_ledlight_dimm+0xd4>
     736:	c8 cf       	rjmp	.-112    	; 0x6c8 <ha_node_ledlight_dimm+0x80>

00000738 <ha_node_ledlight_roll>:
    }
    return;
}

void ha_node_ledlight_roll(ha_node_ll_info_t *ll)
{ // LVL3     +4 +2
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	fc 01       	movw	r30, r24
  //   LVL4      +2 eeprom
  
    node_t *ll_node = ll->node;

    if (ll->cfg->disable_masks == NULL || ll->cfg->disable_masks_num == 0)
     742:	a2 81       	ldd	r26, Z+2	; 0x02
     744:	b3 81       	ldd	r27, Z+3	; 0x03
     746:	1a 96       	adiw	r26, 0x0a	; 10
     748:	8d 91       	ld	r24, X+
     74a:	9c 91       	ld	r25, X
     74c:	1b 97       	sbiw	r26, 0x0b	; 11
     74e:	89 2b       	or	r24, r25
     750:	d9 f0       	breq	.+54     	; 0x788 <ha_node_ledlight_roll+0x50>
     752:	19 96       	adiw	r26, 0x09	; 9
     754:	8c 91       	ld	r24, X
     756:	19 97       	sbiw	r26, 0x09	; 9
     758:	88 23       	and	r24, r24
     75a:	b1 f0       	breq	.+44     	; 0x788 <ha_node_ledlight_roll+0x50>

void ha_node_ledlight_roll(ha_node_ll_info_t *ll)
{ // LVL3     +4 +2
  //   LVL4      +2 eeprom
  
    node_t *ll_node = ll->node;
     75c:	04 81       	ldd	r16, Z+4	; 0x04
     75e:	15 81       	ldd	r17, Z+5	; 0x05

    if (ll->cfg->disable_masks == NULL || ll->cfg->disable_masks_num == 0)
        return;

    ll->disabled_idx++;
     760:	86 81       	ldd	r24, Z+6	; 0x06
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	86 83       	std	Z+6, r24	; 0x06
    if (ll->disabled_idx == ll->cfg->disable_masks_num) ll->disabled_idx = 0;
     766:	19 96       	adiw	r26, 0x09	; 9
     768:	9c 91       	ld	r25, X
     76a:	19 97       	sbiw	r26, 0x09	; 9
     76c:	89 17       	cp	r24, r25
     76e:	89 f0       	breq	.+34     	; 0x792 <ha_node_ledlight_roll+0x5a>
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	ef 01       	movw	r28, r30
    ll->disabled_mask = eeprom_read_byte(ll->cfg->disable_masks + ll->disabled_idx);
     774:	1a 96       	adiw	r26, 0x0a	; 10
     776:	2d 91       	ld	r18, X+
     778:	3c 91       	ld	r19, X
     77a:	1b 97       	sbiw	r26, 0x0b	; 11
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	fc d5       	rcall	.+3064   	; 0x137a <eeprom_read_byte>
     782:	8f 83       	std	Y+7, r24	; 0x07
    ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = ll->disabled_mask;
     784:	f8 01       	movw	r30, r16
     786:	84 87       	std	Z+12, r24	; 0x0c
    
    return;
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

    if (ll->cfg->disable_masks == NULL || ll->cfg->disable_masks_num == 0)
        return;

    ll->disabled_idx++;
    if (ll->disabled_idx == ll->cfg->disable_masks_num) ll->disabled_idx = 0;
     792:	16 82       	std	Z+6, r1	; 0x06
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	ec cf       	rjmp	.-40     	; 0x772 <ha_node_ledlight_roll+0x3a>

0000079a <ha_node_ledlight_on_idle>:
    
    return;
}

void ha_node_ledlight_on_idle(ha_node_ll_info_t *ll)
{ // LVL2        +2  +2
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
  //   LVL3      +2  +2   ha_node_ledlight_on_param
  
    uint8_t act_type;
    uint8_t act_param;

    if (!ll->action) return;
     79e:	dc 01       	movw	r26, r24
     7a0:	1c 96       	adiw	r26, 0x0c	; 12
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	1d 97       	sbiw	r26, 0x0d	; 13
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	99 f0       	breq	.+38     	; 0x7d2 <ha_node_ledlight_on_idle+0x38>
    
    act_type = ll->action->act_type;
     7ac:	23 81       	ldd	r18, Z+3	; 0x03
    act_param = ll->action->act_param;
     7ae:	64 81       	ldd	r22, Z+4	; 0x04
    
    ll->action = NULL;
     7b0:	1c 96       	adiw	r26, 0x0c	; 12
     7b2:	1d 92       	st	X+, r1
     7b4:	1c 92       	st	X, r1
     7b6:	1d 97       	sbiw	r26, 0x0d	; 13
    
    switch(act_type) {
     7b8:	23 30       	cpi	r18, 0x03	; 3
     7ba:	f9 f0       	breq	.+62     	; 0x7fa <ha_node_ledlight_on_idle+0x60>
     7bc:	68 f0       	brcs	.+26     	; 0x7d8 <ha_node_ledlight_on_idle+0x3e>
     7be:	ec 01       	movw	r28, r24
     7c0:	25 30       	cpi	r18, 0x05	; 5
     7c2:	91 f0       	breq	.+36     	; 0x7e8 <ha_node_ledlight_on_idle+0x4e>
     7c4:	26 30       	cpi	r18, 0x06	; 6
     7c6:	29 f4       	brne	.+10     	; 0x7d2 <ha_node_ledlight_on_idle+0x38>
            ll->led_mode = LED_MODE_ON_TRANS;
            ha_node_ledlight_on(ll);
        }
        break;
    case LL_ACT_TYPE_ROLLDIMM:
        if (ll->led_mode == LED_MODE_ON) {
     7c8:	88 85       	ldd	r24, Y+8	; 0x08
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	51 f1       	breq	.+84     	; 0x822 <ha_node_ledlight_on_idle+0x88>
            ha_node_ledlight_dimm(ll, 0);
            ha_node_ledlight_on(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	01 f1       	breq	.+64     	; 0x812 <ha_node_ledlight_on_idle+0x78>
        ha_node_ledlight_on_param(ll, act_param);
        break;
    }

    return;
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret
    act_type = ll->action->act_type;
    act_param = ll->action->act_param;
    
    ll->action = NULL;
    
    switch(act_type) {
     7d8:	21 30       	cpi	r18, 0x01	; 1
     7da:	d9 f7       	brne	.-10     	; 0x7d2 <ha_node_ledlight_on_idle+0x38>
        ll->led_mode = LED_MODE_ON_TRANS;
        ha_node_ledlight_dimm(ll, act_param);
        ha_node_ledlight_on(ll);
        break;
    case LL_ACT_TYPE_ON:
        ll->led_mode = LED_MODE_ON_TRANS;
     7dc:	24 e0       	ldi	r18, 0x04	; 4
     7de:	fc 01       	movw	r30, r24
     7e0:	20 87       	std	Z+8, r18	; 0x08
        ha_node_ledlight_on_param(ll, act_param);
        break;
    }

    return;
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
        ha_node_ledlight_dimm(ll, act_param);
        ha_node_ledlight_on(ll);
        break;
    case LL_ACT_TYPE_ON:
        ll->led_mode = LED_MODE_ON_TRANS;
        ha_node_ledlight_on_param(ll, act_param);
     7e6:	3c ce       	rjmp	.-904    	; 0x460 <ha_node_ledlight_on_param>
            ha_node_ledlight_roll(ll);
            ha_node_ledlight_on(ll);
        }
        break;
    case LL_ACT_TYPE_DIMM:
        ll->led_mode = LED_MODE_ON_TRANS;
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	88 87       	std	Y+8, r24	; 0x08
        ha_node_ledlight_dimm(ll, act_param);
     7ec:	cd 01       	movw	r24, r26
     7ee:	2c df       	rcall	.-424    	; 0x648 <ha_node_ledlight_dimm>
        if (ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(ll, 0);
            ha_node_ledlight_on(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(ll);
            ha_node_ledlight_on(ll);
     7f0:	63 e1       	ldi	r22, 0x13	; 19
     7f2:	ce 01       	movw	r24, r28
        ha_node_ledlight_on_param(ll, act_param);
        break;
    }

    return;
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
        if (ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(ll, 0);
            ha_node_ledlight_on(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(ll);
            ha_node_ledlight_on(ll);
     7f8:	33 ce       	rjmp	.-922    	; 0x460 <ha_node_ledlight_on_param>
    
    ll->action = NULL;
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (ll->led_mode == LED_MODE_ON) {
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 85       	ldd	r18, Z+8	; 0x08
     7fe:	22 30       	cpi	r18, 0x02	; 2
     800:	59 f0       	breq	.+22     	; 0x818 <ha_node_ledlight_on_idle+0x7e>
            ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
     802:	23 30       	cpi	r18, 0x03	; 3
     804:	31 f7       	brne	.-52     	; 0x7d2 <ha_node_ledlight_on_idle+0x38>
            ll->led_mode = LED_MODE_ON_TRANS;
     806:	24 e0       	ldi	r18, 0x04	; 4
     808:	20 87       	std	Z+8, r18	; 0x08
            ha_node_ledlight_on(ll);
     80a:	63 e1       	ldi	r22, 0x13	; 19
        ha_node_ledlight_on_param(ll, act_param);
        break;
    }

    return;
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
        if (ll->led_mode == LED_MODE_ON) {
            ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
            ll->led_mode = LED_MODE_ON_TRANS;
            ha_node_ledlight_on(ll);
     810:	27 ce       	rjmp	.-946    	; 0x460 <ha_node_ledlight_on_param>
    case LL_ACT_TYPE_ROLLDIMM:
        if (ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(ll, 0);
            ha_node_ledlight_on(ll);
        } else if (ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(ll);
     812:	cd 01       	movw	r24, r26
     814:	91 df       	rcall	.-222    	; 0x738 <ha_node_ledlight_roll>
     816:	ec cf       	rjmp	.-40     	; 0x7f0 <ha_node_ledlight_on_idle+0x56>
    ll->action = NULL;
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (ll->led_mode == LED_MODE_ON) {
            ll->led_mode = LED_MODE_OFF_TRANS;
     818:	25 e0       	ldi	r18, 0x05	; 5
     81a:	20 87       	std	Z+8, r18	; 0x08
        ha_node_ledlight_on_param(ll, act_param);
        break;
    }

    return;
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (ll->led_mode == LED_MODE_ON) {
            ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(ll);
     820:	5a ce       	rjmp	.-844    	; 0x4d6 <ha_node_ledlight_off>
            ha_node_ledlight_on(ll);
        }
        break;
    case LL_ACT_TYPE_ROLLDIMM:
        if (ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(ll, 0);
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	cd 01       	movw	r24, r26
     826:	10 df       	rcall	.-480    	; 0x648 <ha_node_ledlight_dimm>
     828:	e3 cf       	rjmp	.-58     	; 0x7f0 <ha_node_ledlight_on_idle+0x56>

0000082a <ha_node_ledlight_create>:
    
    return;
}

ha_node_ll_info_t *ha_node_ledlight_create (const ha_node_ll_cfg_t *cfg, const ha_node_ll_evt_action_t *cfg_evt_actions)
{
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	6c 01       	movw	r12, r24
     846:	7b 01       	movw	r14, r22
    int i;
    led_info_t *leds = (led_info_t*)calloc(cfg->leds_num, sizeof(led_info_t));
     848:	dc 01       	movw	r26, r24
     84a:	13 96       	adiw	r26, 0x03	; 3
     84c:	bc 90       	ld	r11, X
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	8b 2d       	mov	r24, r11
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	46 d4       	rcall	.+2188   	; 0x10e4 <calloc>
     858:	ec 01       	movw	r28, r24
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
     85a:	6e e0       	ldi	r22, 0x0E	; 14
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	40 d4       	rcall	.+2176   	; 0x10e4 <calloc>
     864:	8c 01       	movw	r16, r24
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
     866:	f7 01       	movw	r30, r14
     868:	83 81       	ldd	r24, Z+3	; 0x03
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
     86a:	81 11       	cpse	r24, r1
     86c:	0d c0       	rjmp	.+26     	; 0x888 <ha_node_ledlight_create+0x5e>
     86e:	14 c0       	rjmp	.+40     	; 0x898 <ha_node_ledlight_create+0x6e>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
     870:	85 30       	cpi	r24, 0x05	; 5
     872:	31 f4       	brne	.+12     	; 0x880 <ha_node_ledlight_create+0x56>
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
     874:	94 81       	ldd	r25, Z+4	; 0x04
     876:	d6 01       	movw	r26, r12
     878:	16 96       	adiw	r26, 0x06	; 6
     87a:	8c 91       	ld	r24, X
     87c:	89 17       	cp	r24, r25
     87e:	48 f0       	brcs	.+18     	; 0x892 <ha_node_ledlight_create+0x68>
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {
     880:	35 96       	adiw	r30, 0x05	; 5
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
     882:	83 81       	ldd	r24, Z+3	; 0x03
    ha_node_ll_info_t *ll_node = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
     884:	88 23       	and	r24, r24
     886:	41 f0       	breq	.+16     	; 0x898 <ha_node_ledlight_create+0x6e>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	91 f7       	brne	.-28     	; 0x870 <ha_node_ledlight_create+0x46>
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
                break;
            case LL_ACT_TYPE_ON: 
                if (evt_act->act_param > INTENSITIES_NUM) return NULL;
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	84 31       	cpi	r24, 0x14	; 20
     890:	b8 f3       	brcs	.-18     	; 0x880 <ha_node_ledlight_create+0x56>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	71 c0       	rjmp	.+226    	; 0x97a <ha_node_ledlight_create+0x150>
            default:
                break;
        }
    }

    ll_node->evt_actions = cfg_evt_actions;
     898:	f8 01       	movw	r30, r16
     89a:	e0 82       	st	Z, r14
     89c:	f1 82       	std	Z+1, r15	; 0x01
    ll_node->cfg = cfg;
     89e:	c2 82       	std	Z+2, r12	; 0x02
     8a0:	d3 82       	std	Z+3, r13	; 0x03
    ll_node->leds = leds;
     8a2:	c2 87       	std	Z+10, r28	; 0x0a
     8a4:	d3 87       	std	Z+11, r29	; 0x0b
    ll_node->leds_num = cfg->leds_num;
     8a6:	b1 86       	std	Z+9, r11	; 0x09

    node = ha_nlink_node_register(cfg->node_addr, NODE_TYPE_LEDLIGHT, ledlight_on_rx, ll_node);
     8a8:	98 01       	movw	r18, r16
     8aa:	46 e9       	ldi	r20, 0x96	; 150
     8ac:	52 e0       	ldi	r21, 0x02	; 2
     8ae:	60 e2       	ldi	r22, 0x20	; 32
     8b0:	d6 01       	movw	r26, r12
     8b2:	8c 91       	ld	r24, X
     8b4:	f8 db       	rcall	.-2064   	; 0xa6 <ha_nlink_node_register>
     8b6:	5c 01       	movw	r10, r24
    ll_node->node = node;
     8b8:	e8 01       	movw	r28, r16
     8ba:	8c 83       	std	Y+4, r24	; 0x04
     8bc:	9d 83       	std	Y+5, r25	; 0x05

    // Switch LEDs off on startup
    ll_node->led_mode = LED_MODE_OFF_TRANS;
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	88 87       	std	Y+8, r24	; 0x08

    ll_node->disabled_idx = 0;                      // All Enabled
     8c2:	1e 82       	std	Y+6, r1	; 0x06
    ll_node->disabled_mask = eeprom_read_byte(cfg->disable_masks + ll_node->disabled_idx);
     8c4:	f6 01       	movw	r30, r12
     8c6:	82 85       	ldd	r24, Z+10	; 0x0a
     8c8:	93 85       	ldd	r25, Z+11	; 0x0b
     8ca:	57 d5       	rcall	.+2734   	; 0x137a <eeprom_read_byte>
     8cc:	8f 83       	std	Y+7, r24	; 0x07
    
    max_intensity = eeprom_read_byte(cfg->dimms + cfg->dimms_num - 1);  // Max intensity by default    
     8ce:	d6 01       	movw	r26, r12
     8d0:	16 96       	adiw	r26, 0x06	; 6
     8d2:	8c 91       	ld	r24, X
     8d4:	16 97       	sbiw	r26, 0x06	; 6
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	17 96       	adiw	r26, 0x07	; 7
     8dc:	2d 91       	ld	r18, X+
     8de:	3c 91       	ld	r19, X
     8e0:	18 97       	sbiw	r26, 0x08	; 8
     8e2:	82 0f       	add	r24, r18
     8e4:	93 1f       	adc	r25, r19
     8e6:	49 d5       	rcall	.+2706   	; 0x137a <eeprom_read_byte>
     8e8:	78 2e       	mov	r7, r24
    
    for (i = 0; i < ll_node->leds_num; i++) {
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	88 23       	and	r24, r24
     8ee:	01 f1       	breq	.+64     	; 0x930 <ha_node_ledlight_create+0x106>
     8f0:	81 2c       	mov	r8, r1
     8f2:	91 2c       	mov	r9, r1
     8f4:	e1 2c       	mov	r14, r1
     8f6:	f1 2c       	mov	r15, r1
        led_info_t *led = &ll_node->leds[i];
     8f8:	d8 01       	movw	r26, r16
     8fa:	1a 96       	adiw	r26, 0x0a	; 10
     8fc:	cd 91       	ld	r28, X+
     8fe:	dc 91       	ld	r29, X
     900:	1b 97       	sbiw	r26, 0x0b	; 11
     902:	c8 0d       	add	r28, r8
     904:	d9 1d       	adc	r29, r9
        led->uc_on_intensity_idx = max_intensity;
     906:	7a 82       	std	Y+2, r7	; 0x02
        led->uc_ch_mask = eeprom_read_byte(cfg->leds_ch_masks + i);
     908:	f6 01       	movw	r30, r12
     90a:	84 81       	ldd	r24, Z+4	; 0x04
     90c:	95 81       	ldd	r25, Z+5	; 0x05
     90e:	8e 0d       	add	r24, r14
     910:	9f 1d       	adc	r25, r15
     912:	33 d5       	rcall	.+2662   	; 0x137a <eeprom_read_byte>
     914:	8d 83       	std	Y+5, r24	; 0x05
    ll_node->disabled_idx = 0;                      // All Enabled
    ll_node->disabled_mask = eeprom_read_byte(cfg->disable_masks + ll_node->disabled_idx);
    
    max_intensity = eeprom_read_byte(cfg->dimms + cfg->dimms_num - 1);  // Max intensity by default    
    
    for (i = 0; i < ll_node->leds_num; i++) {
     916:	ff ef       	ldi	r31, 0xFF	; 255
     918:	ef 1a       	sub	r14, r31
     91a:	ff 0a       	sbc	r15, r31
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	88 0e       	add	r8, r24
     920:	91 1c       	adc	r9, r1
     922:	d8 01       	movw	r26, r16
     924:	19 96       	adiw	r26, 0x09	; 9
     926:	8c 91       	ld	r24, X
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	e8 16       	cp	r14, r24
     92c:	f9 06       	cpc	r15, r25
     92e:	24 f3       	brlt	.-56     	; 0x8f8 <ha_node_ledlight_create+0xce>
        led_info_t *led = &ll_node->leds[i];
        led->uc_on_intensity_idx = max_intensity;
        led->uc_ch_mask = eeprom_read_byte(cfg->leds_ch_masks + i);
    }

    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_LEDLIGHT;
     930:	80 e2       	ldi	r24, 0x20	; 32
     932:	e5 01       	movw	r28, r10
     934:	89 87       	std	Y+9, r24	; 0x09
    node->tx_buf[NLINK_HDR_OFF_LEN] = LL_DATA_OFF_INTENSITY0 + ll_node->leds_num;
     936:	f8 01       	movw	r30, r16
     938:	81 85       	ldd	r24, Z+9	; 0x09
     93a:	8e 5f       	subi	r24, 0xFE	; 254
     93c:	8a 87       	std	Y+10, r24	; 0x0a
    // ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE     ] = LED_MODE_OFF;     // Is set unconditionally on every packet send
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = ll_node->disabled_mask;
     93e:	87 81       	ldd	r24, Z+7	; 0x07
     940:	8c 87       	std	Y+12, r24	; 0x0c

    for (i = 0; i < ll_node->leds_num; i++) {
     942:	81 85       	ldd	r24, Z+9	; 0x09
     944:	88 23       	and	r24, r24
     946:	b1 f0       	breq	.+44     	; 0x974 <ha_node_ledlight_create+0x14a>
     948:	d5 01       	movw	r26, r10
     94a:	1d 96       	adiw	r26, 0x0d	; 13
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
        led_info_t *led = &ll_node->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
     954:	e8 01       	movw	r28, r16
     956:	ea 85       	ldd	r30, Y+10	; 0x0a
     958:	fb 85       	ldd	r31, Y+11	; 0x0b
     95a:	e4 0f       	add	r30, r20
     95c:	f5 1f       	adc	r31, r21
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	8d 93       	st	X+, r24
    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_LEDLIGHT;
    node->tx_buf[NLINK_HDR_OFF_LEN] = LL_DATA_OFF_INTENSITY0 + ll_node->leds_num;
    // ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE     ] = LED_MODE_OFF;     // Is set unconditionally on every packet send
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = ll_node->disabled_mask;

    for (i = 0; i < ll_node->leds_num; i++) {
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	4a 5f       	subi	r20, 0xFA	; 250
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
     972:	84 f3       	brlt	.-32     	; 0x954 <ha_node_ledlight_create+0x12a>
        led_info_t *led = &ll_node->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
    }

    ha_node_ledlight_off(ll_node);
     974:	c8 01       	movw	r24, r16
     976:	af dd       	rcall	.-1186   	; 0x4d6 <ha_node_ledlight_off>
    return ll_node;
     978:	c8 01       	movw	r24, r16
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	7f 90       	pop	r7
     994:	08 95       	ret

00000996 <ha_node_ledlight_on_timer>:

void ha_node_ledlight_on_timer(ha_node_ll_info_t   *ll_node)
{ 
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
  
  
    uint8_t uc_target_intensity, uc_current_intensity;
    uint8_t uc_leds_steady = 1;

    if (ll_node == NULL) return;
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	c1 f1       	breq	.+112    	; 0xa12 <ha_node_ledlight_on_timer+0x7c>
     9a2:	8c 01       	movw	r16, r24

    // Loop over all LEDs
    for (uint8_t i = 0; i < ll_node->leds_num; i ++) {
     9a4:	dc 01       	movw	r26, r24
     9a6:	19 96       	adiw	r26, 0x09	; 9
     9a8:	9c 91       	ld	r25, X
     9aa:	99 23       	and	r25, r25
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <ha_node_ledlight_on_timer+0x1a>
     9ae:	50 c0       	rjmp	.+160    	; 0xa50 <ha_node_ledlight_on_timer+0xba>
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	21 e0       	ldi	r18, 0x01	; 1
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
                // FADE OUT
                uc_current_intensity --;
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
     9b4:	d2 e0       	ldi	r29, 0x02	; 2
     9b6:	0d c0       	rjmp	.+26     	; 0x9d2 <ha_node_ledlight_on_timer+0x3c>
        // LEDs' intensity are in transition
        // check fade timer
        led->uc_fade_timer --;
        if ( led->uc_fade_timer == 0) {
            // Its time to update fade in/out
            if (uc_target_intensity > uc_current_intensity) {
     9b8:	68 17       	cp	r22, r24
     9ba:	80 f5       	brcc	.+96     	; 0xa1c <ha_node_ledlight_on_timer+0x86>
                // FADE IN
                uc_current_intensity ++;
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
     9be:	d4 83       	std	Z+4, r29	; 0x04
                // FADE OUT
                uc_current_intensity --;
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
            }

            led->uc_current_intensity_idx = uc_current_intensity;
     9c0:	60 83       	st	Z, r22
            ha_node_ledlight_set_intensity(led->uc_ch_mask, uc_current_intensity);
     9c2:	85 81       	ldd	r24, Z+5	; 0x05
     9c4:	c7 d2       	rcall	.+1422   	; 0xf54 <ha_node_ledlight_set_intensity>

        if (uc_target_intensity == uc_current_intensity) {
            continue;
        }

        uc_leds_steady = 0;
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	f8 01       	movw	r30, r16
     9ca:	91 85       	ldd	r25, Z+9	; 0x09
    uint8_t uc_leds_steady = 1;

    if (ll_node == NULL) return;

    // Loop over all LEDs
    for (uint8_t i = 0; i < ll_node->leds_num; i ++) {
     9cc:	cf 5f       	subi	r28, 0xFF	; 255
     9ce:	c9 17       	cp	r28, r25
     9d0:	d0 f4       	brcc	.+52     	; 0xa06 <ha_node_ledlight_on_timer+0x70>
        led_info_t *led = &ll_node->leds[i];
     9d2:	d8 01       	movw	r26, r16
     9d4:	1a 96       	adiw	r26, 0x0a	; 10
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	1b 97       	sbiw	r26, 0x0b	; 11
     9dc:	b6 e0       	ldi	r27, 0x06	; 6
     9de:	cb 9f       	mul	r28, r27
     9e0:	e0 0d       	add	r30, r0
     9e2:	f1 1d       	adc	r31, r1
     9e4:	11 24       	eor	r1, r1

        uc_target_intensity = led->uc_target_intensity_idx;
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
        uc_current_intensity = led->uc_current_intensity_idx;
     9e8:	60 81       	ld	r22, Z

        if (uc_target_intensity == uc_current_intensity) {
     9ea:	86 17       	cp	r24, r22
     9ec:	79 f3       	breq	.-34     	; 0x9cc <ha_node_ledlight_on_timer+0x36>

        uc_leds_steady = 0;

        // LEDs' intensity are in transition
        // check fade timer
        led->uc_fade_timer --;
     9ee:	94 81       	ldd	r25, Z+4	; 0x04
     9f0:	91 50       	subi	r25, 0x01	; 1
     9f2:	94 83       	std	Z+4, r25	; 0x04
        if ( led->uc_fade_timer == 0) {
     9f4:	99 23       	and	r25, r25
     9f6:	01 f3       	breq	.-64     	; 0x9b8 <ha_node_ledlight_on_timer+0x22>

        if (uc_target_intensity == uc_current_intensity) {
            continue;
        }

        uc_leds_steady = 0;
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	d8 01       	movw	r26, r16
     9fc:	19 96       	adiw	r26, 0x09	; 9
     9fe:	9c 91       	ld	r25, X
    uint8_t uc_leds_steady = 1;

    if (ll_node == NULL) return;

    // Loop over all LEDs
    for (uint8_t i = 0; i < ll_node->leds_num; i ++) {
     a00:	cf 5f       	subi	r28, 0xFF	; 255
     a02:	c9 17       	cp	r28, r25
     a04:	30 f3       	brcs	.-52     	; 0x9d2 <ha_node_ledlight_on_timer+0x3c>
    } // End all LEDs loop

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (ll_node->led_mode == LED_MODE_ON_TRANS) {
     a06:	f8 01       	movw	r30, r16
     a08:	80 85       	ldd	r24, Z+8	; 0x08
     a0a:	84 30       	cpi	r24, 0x04	; 4
     a0c:	b1 f0       	breq	.+44     	; 0xa3a <ha_node_ledlight_on_timer+0xa4>
        if (uc_leds_steady) {
            ll_node->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (ll_node->led_mode == LED_MODE_OFF_TRANS) {
     a0e:	85 30       	cpi	r24, 0x05	; 5
     a10:	51 f0       	breq	.+20     	; 0xa26 <ha_node_ledlight_on_timer+0x90>
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret
            if (uc_target_intensity > uc_current_intensity) {
                // FADE IN
                uc_current_intensity ++;
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
     a1c:	86 17       	cp	r24, r22
     a1e:	80 f6       	brcc	.-96     	; 0x9c0 <ha_node_ledlight_on_timer+0x2a>
                // FADE OUT
                uc_current_intensity --;
     a20:	61 50       	subi	r22, 0x01	; 1
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
     a22:	d4 83       	std	Z+4, r29	; 0x04
     a24:	cd cf       	rjmp	.-102    	; 0x9c0 <ha_node_ledlight_on_timer+0x2a>
            ll_node->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (ll_node->led_mode == LED_MODE_OFF_TRANS) {
        if (uc_leds_steady) {
     a26:	22 23       	and	r18, r18
     a28:	a1 f3       	breq	.-24     	; 0xa12 <ha_node_ledlight_on_timer+0x7c>
            ll_node->led_mode = LED_MODE_OFF;
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 87       	std	Z+8, r24	; 0x08
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (ll_node->led_mode == LED_MODE_ON_TRANS) {
        if (uc_leds_steady) {
     a3a:	22 23       	and	r18, r18
     a3c:	51 f3       	breq	.-44     	; 0xa12 <ha_node_ledlight_on_timer+0x7c>
            ll_node->led_mode = LED_MODE_ON;
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	d8 01       	movw	r26, r16
     a42:	18 96       	adiw	r26, 0x08	; 8
     a44:	8c 93       	st	X, r24
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret
    } // End all LEDs loop

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (ll_node->led_mode == LED_MODE_ON_TRANS) {
     a50:	d8 01       	movw	r26, r16
     a52:	18 96       	adiw	r26, 0x08	; 8
     a54:	8c 91       	ld	r24, X
     a56:	84 30       	cpi	r24, 0x04	; 4
     a58:	91 f3       	breq	.-28     	; 0xa3e <ha_node_ledlight_on_timer+0xa8>
        if (uc_leds_steady) {
            ll_node->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (ll_node->led_mode == LED_MODE_OFF_TRANS) {
     a5a:	85 30       	cpi	r24, 0x05	; 5
     a5c:	d1 f6       	brne	.-76     	; 0xa12 <ha_node_ledlight_on_timer+0x7c>
     a5e:	e5 cf       	rjmp	.-54     	; 0xa2a <ha_node_ledlight_on_timer+0x94>

00000a60 <switch_on_rx>:
#define SW_PIN_RELEASED 1

#define SW_TYPE_BUTT   2

void switch_on_rx(void *ctx, const uint8_t *buf_in)
{
     a60:	08 95       	ret

00000a62 <ha_node_switch_create>:
    // Nothing to do here. Switch is neither
    // controllable nor configurable
}

ha_node_sw_info_t *ha_node_switch_create (const ha_node_sw_cfg_t *cfg)
{
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	7c 01       	movw	r14, r24
    switch_info_t *sw;
    ha_node_sw_info_t *node_sw;
    node_t *node;
    uint8_t node_addr = eeprom_read_byte(&cfg->node_addr);
     a74:	82 d4       	rcall	.+2308   	; 0x137a <eeprom_read_byte>
     a76:	c8 2e       	mov	r12, r24
    uint8_t sw_num = eeprom_read_byte(&cfg->switches_num);
     a78:	c7 01       	movw	r24, r14
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	7e d4       	rcall	.+2300   	; 0x137a <eeprom_read_byte>
     a7e:	c8 2f       	mov	r28, r24

    sw = (switch_info_t*)calloc(sw_num, sizeof(switch_info_t));            /* 7B */
     a80:	67 e0       	ldi	r22, 0x07	; 7
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	2e d3       	rcall	.+1628   	; 0x10e4 <calloc>
     a88:	d8 2e       	mov	r13, r24
     a8a:	d9 2f       	mov	r29, r25
    node_sw = (ha_node_sw_info_t*)calloc(1, sizeof(ha_node_sw_info_t));    /* 7B */
     a8c:	67 e0       	ldi	r22, 0x07	; 7
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	27 d3       	rcall	.+1614   	; 0x10e4 <calloc>
     a96:	8c 01       	movw	r16, r24

    node = ha_nlink_node_register(node_addr, NODE_TYPE_SWITCH, switch_on_rx, NULL);
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e3       	ldi	r20, 0x30	; 48
     a9e:	55 e0       	ldi	r21, 0x05	; 5
     aa0:	60 e3       	ldi	r22, 0x30	; 48
     aa2:	8c 2d       	mov	r24, r12
     aa4:	00 db       	rcall	.-2560   	; 0xa6 <ha_nlink_node_register>
     aa6:	dc 01       	movw	r26, r24

    node_sw->cfg = cfg;
     aa8:	f8 01       	movw	r30, r16
     aaa:	e0 82       	st	Z, r14
     aac:	f1 82       	std	Z+1, r15	; 0x01
    node_sw->switches_num = sw_num;
     aae:	c4 83       	std	Z+4, r28	; 0x04
    node_sw->sw = sw;
     ab0:	d5 82       	std	Z+5, r13	; 0x05
     ab2:	d6 83       	std	Z+6, r29	; 0x06
    node_sw->node = node;
     ab4:	82 83       	std	Z+2, r24	; 0x02
     ab6:	93 83       	std	Z+3, r25	; 0x03
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
     ab8:	cc 23       	and	r28, r28
     aba:	c1 f0       	breq	.+48     	; 0xaec <ha_node_switch_create+0x8a>
     abc:	ed 2d       	mov	r30, r13
     abe:	fd 2f       	mov	r31, r29
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
        sw[uc_i].uc_prev_pin = SW_PIN_RELEASED;
     ac4:	91 e0       	ldi	r25, 0x01	; 1
        sw[uc_i].uc_prev_sw = SW_PIN_RELEASED;
        sw[uc_i].uc_hold_timer = 0;
        sw[uc_i].uc_debounce_timer = 0;
        sw[uc_i].uc_pin_mask = _BV(uc_i);
     ac6:	61 e0       	ldi	r22, 0x01	; 1
        sw[uc_i].uc_switch_type = SW_TYPE_BUTT;       // mark all switches as a button
     ac8:	52 e0       	ldi	r21, 0x02	; 2
    node_sw->sw = sw;
    node_sw->node = node;
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
        sw[uc_i].uc_prev_pin = SW_PIN_RELEASED;
     aca:	91 83       	std	Z+1, r25	; 0x01
        sw[uc_i].uc_prev_sw = SW_PIN_RELEASED;
     acc:	92 83       	std	Z+2, r25	; 0x02
        sw[uc_i].uc_hold_timer = 0;
     ace:	13 82       	std	Z+3, r1	; 0x03
        sw[uc_i].uc_debounce_timer = 0;
     ad0:	14 82       	std	Z+4, r1	; 0x04
        sw[uc_i].uc_pin_mask = _BV(uc_i);
     ad2:	46 2f       	mov	r20, r22
     ad4:	02 2e       	mov	r0, r18
     ad6:	01 c0       	rjmp	.+2      	; 0xada <ha_node_switch_create+0x78>
     ad8:	44 0f       	add	r20, r20
     ada:	0a 94       	dec	r0
     adc:	ea f7       	brpl	.-6      	; 0xad8 <ha_node_switch_create+0x76>
     ade:	45 83       	std	Z+5, r20	; 0x05
        sw[uc_i].uc_switch_type = SW_TYPE_BUTT;       // mark all switches as a button
     ae0:	56 83       	std	Z+6, r21	; 0x06
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	37 96       	adiw	r30, 0x07	; 7
    node_sw->switches_num = sw_num;
    node_sw->sw = sw;
    node_sw->node = node;
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
     ae8:	2c 17       	cp	r18, r28
     aea:	78 f3       	brcs	.-34     	; 0xaca <ha_node_switch_create+0x68>
    }

// SWITCH DATA
//      TYPE(SWITCH) EVENT(%)
//
    node->tx_buf[NLINK_HDR_OFF_LEN] = 0;
     aec:	1a 96       	adiw	r26, 0x0a	; 10
     aee:	1c 92       	st	X, r1
     af0:	1a 97       	sbiw	r26, 0x0a	; 10
    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_SWITCH;
     af2:	80 e3       	ldi	r24, 0x30	; 48
     af4:	19 96       	adiw	r26, 0x09	; 9
     af6:	8c 93       	st	X, r24
    
    return node_sw;
}
     af8:	c8 01       	movw	r24, r16
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <ha_node_switch_on_timer>:


void ha_node_switch_on_timer(ha_node_sw_info_t *node_sw)
{// +5 +2
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
    uint8_t  uc_i;
    uint8_t  uc_sw_state;
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();
     b16:	1d d2       	rcall	.+1082   	; 0xf52 <ha_node_switch_get_pins>

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	99 23       	and	r25, r25
     b1c:	09 f4       	brne	.+2      	; 0xb20 <ha_node_switch_on_timer+0x14>
     b1e:	57 c0       	rjmp	.+174    	; 0xbce <ha_node_switch_on_timer+0xc2>
     b20:	20 e0       	ldi	r18, 0x00	; 0
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
     b22:	64 e0       	ldi	r22, 0x04	; 4
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD NEXT ---
     b24:	73 e0       	ldi	r23, 0x03	; 3
                    sw->uc_hold_timer = SW_HOLD_TIMER;
     b26:	a4 e6       	ldi	r26, 0x64	; 100

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
     b28:	52 e0       	ldi	r21, 0x02	; 2
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];
     b2a:	ed 81       	ldd	r30, Y+5	; 0x05
     b2c:	fe 81       	ldd	r31, Y+6	; 0x06
     b2e:	97 e0       	ldi	r25, 0x07	; 7
     b30:	29 9f       	mul	r18, r25
     b32:	e0 0d       	add	r30, r0
     b34:	f1 1d       	adc	r31, r1
     b36:	11 24       	eor	r1, r1

        uc_sw_state = sw->uc_prev_sw;
     b38:	42 81       	ldd	r20, Z+2	; 0x02
        uc_curr_pin = !!(uc_sw_pins & sw->uc_pin_mask);
     b3a:	35 81       	ldd	r19, Z+5	; 0x05
     b3c:	38 23       	and	r19, r24
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	09 f4       	brne	.+2      	; 0xb44 <ha_node_switch_on_timer+0x38>
     b42:	90 e0       	ldi	r25, 0x00	; 0

#if 1
        // ------------------------------------
        // --- debouncing
        // -----------------------------------
        if (uc_curr_pin != sw->uc_prev_pin) {
     b44:	31 81       	ldd	r19, Z+1	; 0x01
     b46:	93 17       	cp	r25, r19
     b48:	09 f4       	brne	.+2      	; 0xb4c <ha_node_switch_on_timer+0x40>
     b4a:	55 c0       	rjmp	.+170    	; 0xbf6 <ha_node_switch_on_timer+0xea>
            // current pin state differs from previous
            // increment debounce timer
            sw->uc_debounce_timer ++;
     b4c:	34 81       	ldd	r19, Z+4	; 0x04
     b4e:	3f 5f       	subi	r19, 0xFF	; 255
     b50:	34 83       	std	Z+4, r19	; 0x04

            if (sw->uc_debounce_timer == SW_DEBOUNCE_TIMER) {
     b52:	35 30       	cpi	r19, 0x05	; 5
     b54:	09 f4       	brne	.+2      	; 0xb58 <ha_node_switch_on_timer+0x4c>
     b56:	52 c0       	rjmp	.+164    	; 0xbfc <ha_node_switch_on_timer+0xf0>
    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];

        uc_sw_state = sw->uc_prev_sw;
     b58:	94 2f       	mov	r25, r20
        }
#endif
        // ------------------------------------
        // --- transition proceed
        // -----------------------------------
        sw->uc_event = SW_EVENT_NONE;
     b5a:	10 82       	st	Z, r1

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
     b5c:	91 11       	cpse	r25, r1
     b5e:	3c c0       	rjmp	.+120    	; 0xbd8 <ha_node_switch_on_timer+0xcc>
     b60:	41 30       	cpi	r20, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <ha_node_switch_on_timer+0x5a>
     b64:	4e c0       	rjmp	.+156    	; 0xc02 <ha_node_switch_on_timer+0xf6>
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
            }
        }
        else if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_PRESSED) {
     b66:	41 11       	cpse	r20, r1
     b68:	0b c0       	rjmp	.+22     	; 0xb80 <ha_node_switch_on_timer+0x74>
            if (sw->uc_hold_timer < SW_HOLD_TIMER_NEXT) {
     b6a:	33 81       	ldd	r19, Z+3	; 0x03
     b6c:	36 39       	cpi	r19, 0x96	; 150
     b6e:	40 f4       	brcc	.+16     	; 0xb80 <ha_node_switch_on_timer+0x74>
                // hold timer not saturated yet
                // increase hold timer & check saturation
                sw->uc_hold_timer ++;
     b70:	3f 5f       	subi	r19, 0xFF	; 255
     b72:	33 83       	std	Z+3, r19	; 0x03

                if (sw->uc_hold_timer == SW_HOLD_TIMER) {
     b74:	34 36       	cpi	r19, 0x64	; 100
     b76:	09 f4       	brne	.+2      	; 0xb7a <ha_node_switch_on_timer+0x6e>
     b78:	68 c0       	rjmp	.+208    	; 0xc4a <ha_node_switch_on_timer+0x13e>
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
     b7a:	36 39       	cpi	r19, 0x96	; 150
     b7c:	09 f4       	brne	.+2      	; 0xb80 <ha_node_switch_on_timer+0x74>
     b7e:	52 c0       	rjmp	.+164    	; 0xc24 <ha_node_switch_on_timer+0x118>
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     b80:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     b82:	2f 5f       	subi	r18, 0xFF	; 255
     b84:	3c 81       	ldd	r19, Y+4	; 0x04
     b86:	23 17       	cp	r18, r19
     b88:	80 f2       	brcs	.-96     	; 0xb2a <ha_node_switch_on_timer+0x1e>
        sw->uc_prev_sw = uc_sw_state;

    } // End of switch loop

    // Check events - if any occur then send event
    node_t *node = node_sw->node;
     b8a:	0a 81       	ldd	r16, Y+2	; 0x02
     b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    uint8_t len = 0;
#if 1
     for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) {
     b8e:	33 23       	and	r19, r19
     b90:	f1 f0       	breq	.+60     	; 0xbce <ha_node_switch_on_timer+0xc2>
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
        switch_info_t *sw = &node_sw->sw[uc_i];
     b96:	ed 81       	ldd	r30, Y+5	; 0x05
     b98:	fe 81       	ldd	r31, Y+6	; 0x06
     b9a:	87 e0       	ldi	r24, 0x07	; 7
     b9c:	98 9f       	mul	r25, r24
     b9e:	e0 0d       	add	r30, r0
     ba0:	f1 1d       	adc	r31, r1
     ba2:	11 24       	eor	r1, r1
        if (sw->uc_event != SW_EVENT_NONE) {
     ba4:	20 81       	ld	r18, Z
     ba6:	22 23       	and	r18, r18
     ba8:	69 f0       	breq	.+26     	; 0xbc4 <ha_node_switch_on_timer+0xb8>
            node->tx_buf[NLINK_HDR_OFF_DATA + len] = (uc_i << 4) | sw->uc_event;
     baa:	d8 01       	movw	r26, r16
     bac:	a6 0f       	add	r26, r22
     bae:	b1 1d       	adc	r27, r1
     bb0:	80 e1       	ldi	r24, 0x10	; 16
     bb2:	98 9f       	mul	r25, r24
     bb4:	a0 01       	movw	r20, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	24 2b       	or	r18, r20
     bba:	1b 96       	adiw	r26, 0x0b	; 11
     bbc:	2c 93       	st	X, r18
            sw->uc_event = SW_EVENT_NONE;
     bbe:	10 82       	st	Z, r1
            len ++;
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	3c 81       	ldd	r19, Y+4	; 0x04

    // Check events - if any occur then send event
    node_t *node = node_sw->node;
    uint8_t len = 0;
#if 1
     for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) {
     bc4:	9f 5f       	subi	r25, 0xFF	; 255
     bc6:	93 17       	cp	r25, r19
     bc8:	30 f3       	brcs	.-52     	; 0xb96 <ha_node_switch_on_timer+0x8a>
            len ++;
        }
    }
#endif    

    if (len) {
     bca:	61 11       	cpse	r22, r1
     bcc:	34 c0       	rjmp	.+104    	; 0xc36 <ha_node_switch_on_timer+0x12a>
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
        // TODO: configure the destination address ^^^ as a param
    }
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
        }
        else if (uc_sw_state == SW_PIN_RELEASED && sw->uc_prev_sw == SW_PIN_PRESSED) {
     bd8:	91 30       	cpi	r25, 0x01	; 1
     bda:	91 f6       	brne	.-92     	; 0xb80 <ha_node_switch_on_timer+0x74>
     bdc:	41 11       	cpse	r20, r1
     bde:	d0 cf       	rjmp	.-96     	; 0xb80 <ha_node_switch_on_timer+0x74>
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
     be0:	33 81       	ldd	r19, Z+3	; 0x03
     be2:	34 36       	cpi	r19, 0x64	; 100
     be4:	b8 f4       	brcc	.+46     	; 0xc14 <ha_node_switch_on_timer+0x108>
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
     be6:	90 83       	st	Z, r25
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     be8:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3c 81       	ldd	r19, Y+4	; 0x04
     bee:	23 17       	cp	r18, r19
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <ha_node_switch_on_timer+0xe8>
     bf2:	9b cf       	rjmp	.-202    	; 0xb2a <ha_node_switch_on_timer+0x1e>
     bf4:	ca cf       	rjmp	.-108    	; 0xb8a <ha_node_switch_on_timer+0x7e>
                uc_sw_state = uc_curr_pin;
                sw->uc_debounce_timer = 0;
            }
        }
        else {
            sw->uc_debounce_timer = 0;
     bf6:	14 82       	std	Z+4, r1	; 0x04
    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];

        uc_sw_state = sw->uc_prev_sw;
     bf8:	94 2f       	mov	r25, r20
     bfa:	af cf       	rjmp	.-162    	; 0xb5a <ha_node_switch_on_timer+0x4e>
            // increment debounce timer
            sw->uc_debounce_timer ++;

            if (sw->uc_debounce_timer == SW_DEBOUNCE_TIMER) {
                // debounce timer expired
                sw->uc_prev_pin = uc_curr_pin;
     bfc:	91 83       	std	Z+1, r25	; 0x01

                // modify current switch state (pressed/released)
                uc_sw_state = uc_curr_pin;
                sw->uc_debounce_timer = 0;
     bfe:	14 82       	std	Z+4, r1	; 0x04
     c00:	ac cf       	rjmp	.-168    	; 0xb5a <ha_node_switch_on_timer+0x4e>
        sw->uc_event = SW_EVENT_NONE;

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
     c02:	13 82       	std	Z+3, r1	; 0x03
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
     c04:	50 83       	st	Z, r21
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     c06:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3c 81       	ldd	r19, Y+4	; 0x04
     c0c:	23 17       	cp	r18, r19
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <ha_node_switch_on_timer+0x106>
     c10:	8c cf       	rjmp	.-232    	; 0xb2a <ha_node_switch_on_timer+0x1e>
     c12:	bb cf       	rjmp	.-138    	; 0xb8a <ha_node_switch_on_timer+0x7e>
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
     c14:	60 83       	st	Z, r22
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     c16:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3c 81       	ldd	r19, Y+4	; 0x04
     c1c:	23 17       	cp	r18, r19
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <ha_node_switch_on_timer+0x116>
     c20:	84 cf       	rjmp	.-248    	; 0xb2a <ha_node_switch_on_timer+0x1e>
     c22:	b3 cf       	rjmp	.-154    	; 0xb8a <ha_node_switch_on_timer+0x7e>
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD NEXT ---
     c24:	70 83       	st	Z, r23
                    sw->uc_hold_timer = SW_HOLD_TIMER;
     c26:	a3 83       	std	Z+3, r26	; 0x03
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     c28:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3c 81       	ldd	r19, Y+4	; 0x04
     c2e:	23 17       	cp	r18, r19
     c30:	08 f4       	brcc	.+2      	; 0xc34 <ha_node_switch_on_timer+0x128>
     c32:	7b cf       	rjmp	.-266    	; 0xb2a <ha_node_switch_on_timer+0x1e>
     c34:	aa cf       	rjmp	.-172    	; 0xb8a <ha_node_switch_on_timer+0x7e>
        }
    }
#endif    

    if (len) {
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
     c36:	f8 01       	movw	r30, r16
     c38:	62 87       	std	Z+10, r22	; 0x0a
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     c3a:	43 e0       	ldi	r20, 0x03	; 3
     c3c:	6f ef       	ldi	r22, 0xFF	; 255
     c3e:	c8 01       	movw	r24, r16
        // TODO: configure the destination address ^^^ as a param
    }
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
    }
#endif    

    if (len) {
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     c48:	8e ca       	rjmp	.-2788   	; 0x166 <ha_nlink_node_send>
                // increase hold timer & check saturation
                sw->uc_hold_timer ++;

                if (sw->uc_hold_timer == SW_HOLD_TIMER) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
     c4a:	70 83       	st	Z, r23
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     c4c:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3c 81       	ldd	r19, Y+4	; 0x04
     c52:	23 17       	cp	r18, r19
     c54:	08 f4       	brcc	.+2      	; 0xc58 <ha_node_switch_on_timer+0x14c>
     c56:	69 cf       	rjmp	.-302    	; 0xb2a <ha_node_switch_on_timer+0x1e>
     c58:	98 cf       	rjmp	.-208    	; 0xb8a <ha_node_switch_on_timer+0x7e>

00000c5a <ha_dev_base_get_in_pins>:
    // Select PWM register
    switch(ch_num) {
        case 0: // C1, WOB, PINA5
            TCD0.CMPBSET = SLOW_PWM_PERIOD - pwm_val;
            TCD0.CMPBCLR = SLOW_PWM_PERIOD;
            break;
     c5a:	82 b1       	in	r24, 0x02	; 2
     c5c:	86 fb       	bst	r24, 6
     c5e:	88 27       	eor	r24, r24
     c60:	80 f9       	bld	r24, 0
     c62:	17 99       	sbic	0x02, 7	; 2
     c64:	0b c0       	rjmp	.+22     	; 0xc7c <ha_dev_base_get_in_pins+0x22>
     c66:	35 99       	sbic	0x06, 5	; 6
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	34 99       	sbic	0x06, 4	; 6
     c6c:	88 60       	ori	r24, 0x08	; 8
     c6e:	33 99       	sbic	0x06, 3	; 6
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	50 99       	sbic	0x0a, 0	; 10
     c74:	80 62       	ori	r24, 0x20	; 32
     c76:	52 99       	sbic	0x0a, 2	; 10
     c78:	80 64       	ori	r24, 0x40	; 64
     c7a:	08 95       	ret
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	f3 cf       	rjmp	.-26     	; 0xc66 <ha_dev_base_get_in_pins+0xc>

00000c80 <fast_pwm_init>:
     c80:	e0 e0       	ldi	r30, 0x00	; 0
     c82:	fa e0       	ldi	r31, 0x0A	; 10
     c84:	80 81       	ld	r24, Z
     c86:	8e 7f       	andi	r24, 0xFE	; 254
     c88:	80 83       	st	Z, r24
     c8a:	8c e0       	ldi	r24, 0x0C	; 12
     c8c:	85 83       	std	Z+5, r24	; 0x05
     c8e:	87 e7       	ldi	r24, 0x77	; 119
     c90:	81 83       	std	Z+1, r24	; 0x01
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	83 83       	std	Z+3, r24	; 0x03
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	86 a3       	std	Z+38, r24	; 0x26
     c9a:	87 a3       	std	Z+39, r24	; 0x27
     c9c:	80 81       	ld	r24, Z
     c9e:	81 60       	ori	r24, 0x01	; 1
     ca0:	80 83       	st	Z, r24
     ca2:	10 a6       	std	Z+40, r1	; 0x28
     ca4:	12 a6       	std	Z+42, r1	; 0x2a
     ca6:	14 a6       	std	Z+44, r1	; 0x2c
     ca8:	11 a6       	std	Z+41, r1	; 0x29
     caa:	13 a6       	std	Z+43, r1	; 0x2b
     cac:	15 a6       	std	Z+45, r1	; 0x2d
     cae:	08 95       	ret

00000cb0 <ha_nlink_gpio_init>:
     cb0:	4d 9a       	sbi	0x09, 5	; 9
     cb2:	45 98       	cbi	0x08, 5	; 8
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f4 e0       	ldi	r31, 0x04	; 4
     cb8:	8b e0       	ldi	r24, 0x0B	; 11
     cba:	85 8b       	std	Z+21, r24	; 0x15
     cbc:	4c 98       	cbi	0x09, 4	; 9
     cbe:	44 9a       	sbi	0x08, 4	; 8
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	84 8b       	std	Z+20, r24	; 0x14
     cc4:	89 b1       	in	r24, 0x09	; 9
     cc6:	83 7f       	andi	r24, 0xF3	; 243
     cc8:	89 b9       	out	0x09, r24	; 9
     cca:	88 b1       	in	r24, 0x08	; 8
     ccc:	8c 60       	ori	r24, 0x0C	; 12
     cce:	88 b9       	out	0x08, r24	; 8
     cd0:	08 95       	ret

00000cd2 <ha_dev_base_init>:
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	88 ed       	ldi	r24, 0xD8	; 216
     cd8:	84 bf       	out	0x34, r24	; 52
     cda:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	fa e0       	ldi	r31, 0x0A	; 10
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	84 87       	std	Z+12, r24	; 0x0c
     ce8:	95 87       	std	Z+13, r25	; 0x0d
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	96 83       	std	Z+6, r25	; 0x06
     cee:	95 83       	std	Z+5, r25	; 0x05
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	81 83       	std	Z+1, r24	; 0x01
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	80 83       	st	Z, r24
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
     cfe:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <__TEXT_REGION_LENGTH__+0x700417>
     d02:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     d06:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     d0a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     d0e:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x700450>
     d12:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x700452>
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b4 e0       	ldi	r27, 0x04	; 4
     d1a:	20 e4       	ldi	r18, 0x40	; 64
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	2c 93       	st	X, r18
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	20 e8       	ldi	r18, 0x80	; 128
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	2c 93       	st	X, r18
     d28:	12 97       	sbiw	r26, 0x02	; 2
     d2a:	e0 e2       	ldi	r30, 0x20	; 32
     d2c:	f4 e0       	ldi	r31, 0x04	; 4
     d2e:	50 e2       	ldi	r21, 0x20	; 32
     d30:	52 83       	std	Z+2, r21	; 0x02
     d32:	40 e1       	ldi	r20, 0x10	; 16
     d34:	42 83       	std	Z+2, r20	; 0x02
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	c0 e4       	ldi	r28, 0x40	; 64
     d3a:	d4 e0       	ldi	r29, 0x04	; 4
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	34 e0       	ldi	r19, 0x04	; 4
     d40:	3a 83       	std	Y+2, r19	; 0x02
     d42:	16 96       	adiw	r26, 0x06	; 6
     d44:	5c 93       	st	X, r21
     d46:	16 97       	sbiw	r26, 0x06	; 6
     d48:	16 96       	adiw	r26, 0x06	; 6
     d4a:	4c 93       	st	X, r20
     d4c:	16 97       	sbiw	r26, 0x06	; 6
     d4e:	16 96       	adiw	r26, 0x06	; 6
     d50:	8c 93       	st	X, r24
     d52:	16 97       	sbiw	r26, 0x06	; 6
     d54:	36 83       	std	Z+6, r19	; 0x06
     d56:	22 e0       	ldi	r18, 0x02	; 2
     d58:	26 83       	std	Z+6, r18	; 0x06
     d5a:	96 83       	std	Z+6, r25	; 0x06
     d5c:	2e 83       	std	Y+6, r18	; 0x06
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	5c 93       	st	X, r21
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	11 96       	adiw	r26, 0x01	; 1
     d66:	4c 93       	st	X, r20
     d68:	11 97       	sbiw	r26, 0x01	; 1
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	8c 93       	st	X, r24
     d6e:	31 83       	std	Z+1, r19	; 0x01
     d70:	21 83       	std	Z+1, r18	; 0x01
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	29 83       	std	Y+1, r18	; 0x01
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	82 cf       	rjmp	.-252    	; 0xc80 <fast_pwm_init>

00000d7c <ha_dev_base_set_steady>:
     d7c:	84 30       	cpi	r24, 0x04	; 4
     d7e:	71 f1       	breq	.+92     	; 0xddc <ha_dev_base_set_steady+0x60>
     d80:	38 f0       	brcs	.+14     	; 0xd90 <ha_dev_base_set_steady+0x14>
     d82:	80 31       	cpi	r24, 0x10	; 16
     d84:	a1 f0       	breq	.+40     	; 0xdae <ha_dev_base_set_steady+0x32>
     d86:	80 32       	cpi	r24, 0x20	; 32
     d88:	e9 f1       	breq	.+122    	; 0xe04 <ha_dev_base_set_steady+0x88>
     d8a:	88 30       	cpi	r24, 0x08	; 8
     d8c:	d9 f0       	breq	.+54     	; 0xdc4 <ha_dev_base_set_steady+0x48>
     d8e:	08 95       	ret
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	79 f1       	breq	.+94     	; 0xdf2 <ha_dev_base_set_steady+0x76>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	09 f5       	brne	.+66     	; 0xdda <ha_dev_base_set_steady+0x5e>
     d98:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     d9c:	8f 7d       	andi	r24, 0xDF	; 223
     d9e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     da2:	80 e1       	ldi	r24, 0x10	; 16
     da4:	66 23       	and	r22, r22
     da6:	11 f1       	breq	.+68     	; 0xdec <ha_dev_base_set_steady+0x70>
     da8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     dac:	08 95       	ret
     dae:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     db2:	8d 7f       	andi	r24, 0xFD	; 253
     db4:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	66 23       	and	r22, r22
     dbc:	59 f0       	breq	.+22     	; 0xdd4 <ha_dev_base_set_steady+0x58>
     dbe:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     dc2:	08 95       	ret
     dc4:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     dc8:	8b 7f       	andi	r24, 0xFB	; 251
     dca:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	61 11       	cpse	r22, r1
     dd2:	f5 cf       	rjmp	.-22     	; 0xdbe <ha_dev_base_set_steady+0x42>
     dd4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     dd8:	08 95       	ret
     dda:	08 95       	ret
     ddc:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     de0:	8f 7e       	andi	r24, 0xEF	; 239
     de2:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	61 11       	cpse	r22, r1
     dea:	de cf       	rjmp	.-68     	; 0xda8 <ha_dev_base_set_steady+0x2c>
     dec:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     df0:	08 95       	ret
     df2:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     df6:	8f 7b       	andi	r24, 0xBF	; 191
     df8:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	66 23       	and	r22, r22
     e00:	a9 f3       	breq	.-22     	; 0xdec <ha_dev_base_set_steady+0x70>
     e02:	d2 cf       	rjmp	.-92     	; 0xda8 <ha_dev_base_set_steady+0x2c>
     e04:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	66 23       	and	r22, r22
     e12:	01 f3       	breq	.-64     	; 0xdd4 <ha_dev_base_set_steady+0x58>
     e14:	d4 cf       	rjmp	.-88     	; 0xdbe <ha_dev_base_set_steady+0x42>

00000e16 <ha_dev_base_set_fast_pwm>:
    }
}

void ha_dev_base_set_fast_pwm (uint8_t mask, uint8_t pwm_val_idx)
{
    uint8_t pwm_val = guca_pwm_intensity_table[pwm_val_idx];
     e16:	e6 2f       	mov	r30, r22
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ea 5f       	subi	r30, 0xFA	; 250
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	90 81       	ld	r25, Z

    // Select PWM register
    // L0..2 => WO0..WO2 => C11, C9, C7 => PB0, PB1, PB2
    // H0..2 => WO3..WO5 =>  C5, C3, C1 => PA3, PA4, PA5

    switch(mask) {
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	29 f1       	breq	.+74     	; 0xe6e <ha_dev_base_set_fast_pwm+0x58>
     e24:	38 f0       	brcs	.+14     	; 0xe34 <ha_dev_base_set_fast_pwm+0x1e>
     e26:	80 31       	cpi	r24, 0x10	; 16
     e28:	89 f0       	breq	.+34     	; 0xe4c <ha_dev_base_set_fast_pwm+0x36>
     e2a:	80 32       	cpi	r24, 0x20	; 32
     e2c:	81 f1       	breq	.+96     	; 0xe8e <ha_dev_base_set_fast_pwm+0x78>
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	a9 f0       	breq	.+42     	; 0xe5c <ha_dev_base_set_fast_pwm+0x46>
     e32:	08 95       	ret
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	19 f1       	breq	.+70     	; 0xe7e <ha_dev_base_set_fast_pwm+0x68>
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	c1 f4       	brne	.+48     	; 0xe6c <ha_dev_base_set_fast_pwm+0x56>
        case 0x01: // C1
            TCA0.SPLIT.HCMP2 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP2EN_bm;
            break;
        case 0x02: // C3
            TCA0.SPLIT.HCMP1 = pwm_val;
     e3c:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP1EN_bm;
     e40:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e44:	80 62       	ori	r24, 0x20	; 32
     e46:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
     e4a:	08 95       	ret
        case 0x08: // C7
            TCA0.SPLIT.LCMP2 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP2EN_bm;
            break;
        case 0x10: // C9
            TCA0.SPLIT.LCMP1 = pwm_val;
     e4c:	90 93 2a 0a 	sts	0x0A2A, r25	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP1EN_bm;
     e50:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e54:	82 60       	ori	r24, 0x02	; 2
     e56:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
     e5a:	08 95       	ret
        case 0x04: // C5
            TCA0.SPLIT.HCMP0 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm;
            break;
        case 0x08: // C7
            TCA0.SPLIT.LCMP2 = pwm_val;
     e5c:	90 93 2c 0a 	sts	0x0A2C, r25	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP2EN_bm;
     e60:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
     e6a:	08 95       	ret
     e6c:	08 95       	ret
        case 0x02: // C3
            TCA0.SPLIT.HCMP1 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP1EN_bm;
            break;
        case 0x04: // C5
            TCA0.SPLIT.HCMP0 = pwm_val;
     e6e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm;
     e72:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
     e7c:	08 95       	ret
    // L0..2 => WO0..WO2 => C11, C9, C7 => PB0, PB1, PB2
    // H0..2 => WO3..WO5 =>  C5, C3, C1 => PA3, PA4, PA5

    switch(mask) {
        case 0x01: // C1
            TCA0.SPLIT.HCMP2 = pwm_val;
     e7e:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP2EN_bm;
     e82:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
     e8c:	08 95       	ret
        case 0x10: // C9
            TCA0.SPLIT.LCMP1 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP1EN_bm;
            break;
        case 0x20: // C11
            TCA0.SPLIT.LCMP0 = pwm_val;
     e8e:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP0EN_bm;
     e92:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     e9c:	08 95       	ret

00000e9e <__vector_5>:
            break;
    }
}

ISR(PORTC_PORT_vect) {
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
    if (NLINK_IO_RX_INTFLAG & NLINK_IO_RX_PIN_MASK) {
     ec0:	5d 9b       	sbis	0x0b, 5	; 11
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <__vector_5+0x2c>
        NLINK_IO_RX_INTFLAG = NLINK_IO_RX_PIN_MASK;
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	8b b9       	out	0x0b, r24	; 11
        // Call NLINK start callback on RX pin falling edge
        isr_nlink_io_on_start_edge();
     ec8:	b4 da       	rcall	.-2712   	; 0x432 <isr_nlink_io_on_start_edge>
    }
}
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_13>:

// Interrupt triggered every 256 timer clocks and count periods
ISR(TCB0_INT_vect) {
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31

    // 256 clocks @ 20 MHz ==> 12.8usec
    TCB0.INTFLAGS = TCB_CAPT_bm;     // Clear CAPTURE interrupt
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
     f14:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     f18:	87 fd       	sbrc	r24, 7
     f1a:	05 c0       	rjmp	.+10     	; 0xf26 <__vector_13+0x3a>
        g_ha_nlink_timer_cnt++;
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
        if (g_ha_nlink_timer_cnt == 20) {
     f1e:	84 31       	cpi	r24, 0x14	; 20
     f20:	a1 f0       	breq	.+40     	; 0xf4a <__vector_13+0x5e>
    // 256 clocks @ 20 MHz ==> 12.8usec
    TCB0.INTFLAGS = TCB_CAPT_bm;     // Clear CAPTURE interrupt

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
        g_ha_nlink_timer_cnt++;
     f22:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
            g_ha_nlink_timer_cnt = 0;
            isr_nlink_io_on_timer();
        }
    }

    isr_ha_app_on_timer();
     f26:	b3 d0       	rcall	.+358    	; 0x108e <isr_ha_app_on_timer>

}
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
        g_ha_nlink_timer_cnt++;
        if (g_ha_nlink_timer_cnt == 20) {
            g_ha_nlink_timer_cnt = 0;
     f4a:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
            isr_nlink_io_on_timer();
     f4e:	a0 d9       	rcall	.-3264   	; 0x290 <isr_nlink_io_on_timer>
     f50:	ea cf       	rjmp	.-44     	; 0xf26 <__vector_13+0x3a>

00000f52 <ha_node_switch_get_pins>:

ha_node_sw_info_t *sw_ceil = NULL;

uint8_t ha_node_switch_get_pins() 
{
    return ha_dev_base_get_in_pins();
     f52:	83 ce       	rjmp	.-762    	; 0xc5a <ha_dev_base_get_in_pins>

00000f54 <ha_node_ledlight_set_intensity>:
}

void ha_node_ledlight_set_intensity (uint8_t led_mask, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;
     f54:	63 31       	cpi	r22, 0x13	; 19
     f56:	10 f0       	brcs	.+4      	; 0xf5c <ha_node_ledlight_set_intensity+0x8>

    if (intensity_idx == 0) {
        ha_dev_base_set_steady(led_mask, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
        ha_dev_base_set_steady(led_mask, 1);
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	10 cf       	rjmp	.-480    	; 0xd7c <ha_dev_base_set_steady>

void ha_node_ledlight_set_intensity (uint8_t led_mask, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;

    if (intensity_idx == 0) {
     f5c:	66 23       	and	r22, r22
     f5e:	e9 f3       	breq	.-6      	; 0xf5a <ha_node_ledlight_set_intensity+0x6>
        ha_dev_base_set_steady(led_mask, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
     f60:	62 31       	cpi	r22, 0x12	; 18
     f62:	d1 f3       	breq	.-12     	; 0xf58 <ha_node_ledlight_set_intensity+0x4>
        ha_dev_base_set_steady(led_mask, 1);
    } else {
        ha_dev_base_set_fast_pwm(led_mask, intensity_idx);
     f64:	58 cf       	rjmp	.-336    	; 0xe16 <ha_dev_base_set_fast_pwm>

00000f66 <main>:
    }
}

int main(void)
{
     f66:	8f ef       	ldi	r24, 0xFF	; 255
	...
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){

        __asm__ __volatile__ ("    nop\n    nop\n    nop\n    nop\n"\
     f88:	81 50       	subi	r24, 0x01	; 1
}

int main(void)
{
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){
     f8a:	71 f7       	brne	.-36     	; 0xf68 <main+0x2>
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"
                                ::);
    }

    ha_dev_base_init();
     f8c:	a2 de       	rcall	.-700    	; 0xcd2 <ha_dev_base_init>

    ha_nlink_init();
     f8e:	73 d8       	rcall	.-3866   	; 0x76 <ha_nlink_init>

    ll_room_amb     = ha_node_ledlight_create(&room_amb_ll_cfg,     &room_amb_ll_action[0]);
     f90:	63 ee       	ldi	r22, 0xE3	; 227
     f92:	73 e9       	ldi	r23, 0x93	; 147
     f94:	85 e2       	ldi	r24, 0x25	; 37
     f96:	94 e9       	ldi	r25, 0x94	; 148
     f98:	48 dc       	rcall	.-1904   	; 0x82a <ha_node_ledlight_create>
     f9a:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <ll_room_amb>
     f9e:	90 93 0f 3e 	sts	0x3E0F, r25	; 0x803e0f <ll_room_amb+0x1>
    ll_hall_spt     = ha_node_ledlight_create(&hall_spt_ll_cfg,     &hall_spt_ll_action[0]);
     fa2:	65 ec       	ldi	r22, 0xC5	; 197
     fa4:	73 e9       	ldi	r23, 0x93	; 147
     fa6:	89 e1       	ldi	r24, 0x19	; 25
     fa8:	94 e9       	ldi	r25, 0x94	; 148
     faa:	3f dc       	rcall	.-1922   	; 0x82a <ha_node_ledlight_create>
     fac:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <ll_hall_spt>
     fb0:	90 93 11 3e 	sts	0x3E11, r25	; 0x803e11 <ll_hall_spt+0x1>
    ll_room_spt_mid = ha_node_ledlight_create(&room_spt_mid_ll_cfg, &room_spt_mid_ll_action[0]);
     fb4:	67 ea       	ldi	r22, 0xA7	; 167
     fb6:	73 e9       	ldi	r23, 0x93	; 147
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
     fba:	94 e9       	ldi	r25, 0x94	; 148
     fbc:	36 dc       	rcall	.-1940   	; 0x82a <ha_node_ledlight_create>
     fbe:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <ll_room_spt_mid>
     fc2:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <ll_room_spt_mid+0x1>
    ll_room_spt_bed = ha_node_ledlight_create(&room_spt_bed_ll_cfg, &room_spt_bed_ll_action[0]);
     fc6:	6e e8       	ldi	r22, 0x8E	; 142
     fc8:	73 e9       	ldi	r23, 0x93	; 147
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	94 e9       	ldi	r25, 0x94	; 148
     fce:	2d dc       	rcall	.-1958   	; 0x82a <ha_node_ledlight_create>
     fd0:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <ll_room_spt_bed>
     fd4:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <ll_room_spt_bed+0x1>
    
    sw_ceil         = ha_node_switch_create (&ceil_sw_cfg);
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	42 dd       	rcall	.-1404   	; 0xa62 <ha_node_switch_create>
     fde:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <__data_end>
     fe2:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <__data_end+0x1>
   

    sei();
     fe6:	78 94       	sei
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <main+0x8c>
            ha_node_ledlight_on_timer(ll_room_amb);
            ha_node_ledlight_on_timer(ll_room_spt_mid);
            ha_node_ledlight_on_timer(ll_room_spt_bed);
        }
        
        if (guc_switches_timer) {
     fea:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <guc_switches_timer>
     fee:	81 11       	cpse	r24, r1
     ff0:	46 c0       	rjmp	.+140    	; 0x107e <main+0x118>
	...
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"
                                ::);
                                
        ha_node_ledlight_on_idle(ll_hall_spt);
    1012:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <ll_hall_spt>
    1016:	90 91 11 3e 	lds	r25, 0x3E11	; 0x803e11 <ll_hall_spt+0x1>
    101a:	bf db       	rcall	.-2178   	; 0x79a <ha_node_ledlight_on_idle>
        ha_node_ledlight_on_idle(ll_room_amb);
    101c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <ll_room_amb>
    1020:	90 91 0f 3e 	lds	r25, 0x3E0F	; 0x803e0f <ll_room_amb+0x1>
    1024:	ba db       	rcall	.-2188   	; 0x79a <ha_node_ledlight_on_idle>
        ha_node_ledlight_on_idle(ll_room_spt_mid);
    1026:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <ll_room_spt_mid>
    102a:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <ll_room_spt_mid+0x1>
    102e:	b5 db       	rcall	.-2198   	; 0x79a <ha_node_ledlight_on_idle>
        ha_node_ledlight_on_idle(ll_room_spt_bed);
    1030:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <ll_room_spt_bed>
    1034:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <ll_room_spt_bed+0x1>
    1038:	b0 db       	rcall	.-2208   	; 0x79a <ha_node_ledlight_on_idle>
                                
        ha_nlink_check_rx();
    103a:	9d d8       	rcall	.-3782   	; 0x176 <ha_nlink_check_rx>
        ha_nlink_check_tx();
    103c:	ce d8       	rcall	.-3684   	; 0x1da <ha_nlink_check_tx>
        
        if (guc_led_intenisity_timer) {
    103e:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <guc_led_intenisity_timer>
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <main+0xe2>
    1046:	d1 cf       	rjmp	.-94     	; 0xfea <main+0x84>
            guc_led_intenisity_timer = 0;
    1048:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <guc_led_intenisity_timer>
            ha_node_ledlight_on_timer(ll_hall_spt);
    104c:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <ll_hall_spt>
    1050:	90 91 11 3e 	lds	r25, 0x3E11	; 0x803e11 <ll_hall_spt+0x1>
    1054:	a0 dc       	rcall	.-1728   	; 0x996 <ha_node_ledlight_on_timer>
            ha_node_ledlight_on_timer(ll_room_amb);
    1056:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <ll_room_amb>
    105a:	90 91 0f 3e 	lds	r25, 0x3E0F	; 0x803e0f <ll_room_amb+0x1>
    105e:	9b dc       	rcall	.-1738   	; 0x996 <ha_node_ledlight_on_timer>
            ha_node_ledlight_on_timer(ll_room_spt_mid);
    1060:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <ll_room_spt_mid>
    1064:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <ll_room_spt_mid+0x1>
    1068:	96 dc       	rcall	.-1748   	; 0x996 <ha_node_ledlight_on_timer>
            ha_node_ledlight_on_timer(ll_room_spt_bed);
    106a:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <ll_room_spt_bed>
    106e:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <ll_room_spt_bed+0x1>
    1072:	91 dc       	rcall	.-1758   	; 0x996 <ha_node_ledlight_on_timer>
        }
        
        if (guc_switches_timer) {
    1074:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <guc_switches_timer>
    1078:	88 23       	and	r24, r24
    107a:	09 f4       	brne	.+2      	; 0x107e <main+0x118>
    107c:	ba cf       	rjmp	.-140    	; 0xff2 <main+0x8c>
            guc_switches_timer = 0;
    107e:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <guc_switches_timer>
            ha_node_switch_on_timer(sw_ceil);
    1082:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
    1086:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
    108a:	40 dd       	rcall	.-1408   	; 0xb0c <ha_node_switch_on_timer>
    108c:	b2 cf       	rjmp	.-156    	; 0xff2 <main+0x8c>

0000108e <isr_ha_app_on_timer>:
void isr_ha_app_on_timer()
{
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    108e:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <g_led_intensity_cnt>
    1092:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <g_led_intensity_cnt+0x1>
    1096:	01 96       	adiw	r24, 0x01	; 1
    if (g_led_intensity_cnt == 781) {
    1098:	8d 30       	cpi	r24, 0x0D	; 13
    109a:	23 e0       	ldi	r18, 0x03	; 3
    109c:	92 07       	cpc	r25, r18
    109e:	d1 f0       	breq	.+52     	; 0x10d4 <isr_ha_app_on_timer+0x46>
void isr_ha_app_on_timer()
{
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    10a0:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <g_led_intensity_cnt>
    10a4:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <g_led_intensity_cnt+0x1>
        g_led_intensity_cnt = 0;
        guc_led_intenisity_timer = 1;
    }

    // Set switch timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_switches_cnt++;
    10a8:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <g_switches_cnt>
    10ac:	90 91 14 3e 	lds	r25, 0x3E14	; 0x803e14 <g_switches_cnt+0x1>
    10b0:	01 96       	adiw	r24, 0x01	; 1
    if (g_switches_cnt == 781) {
    10b2:	8d 30       	cpi	r24, 0x0D	; 13
    10b4:	23 e0       	ldi	r18, 0x03	; 3
    10b6:	92 07       	cpc	r25, r18
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <isr_ha_app_on_timer+0x36>
        g_led_intensity_cnt = 0;
        guc_led_intenisity_timer = 1;
    }

    // Set switch timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_switches_cnt++;
    10ba:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <g_switches_cnt>
    10be:	90 93 14 3e 	sts	0x3E14, r25	; 0x803e14 <g_switches_cnt+0x1>
    10c2:	08 95       	ret
    if (g_switches_cnt == 781) {
        g_switches_cnt = 0;
    10c4:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <g_switches_cnt>
    10c8:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <g_switches_cnt+0x1>
        guc_switches_timer = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <guc_switches_timer>
    10d2:	08 95       	ret
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    if (g_led_intensity_cnt == 781) {
        g_led_intensity_cnt = 0;
    10d4:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <g_led_intensity_cnt>
    10d8:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <g_led_intensity_cnt+0x1>
        guc_led_intenisity_timer = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 15 3e 	sts	0x3E15, r24	; 0x803e15 <guc_led_intenisity_timer>
    10e2:	e2 cf       	rjmp	.-60     	; 0x10a8 <isr_ha_app_on_timer+0x1a>

000010e4 <calloc>:
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	86 9f       	mul	r24, r22
    10ee:	80 01       	movw	r16, r0
    10f0:	87 9f       	mul	r24, r23
    10f2:	10 0d       	add	r17, r0
    10f4:	96 9f       	mul	r25, r22
    10f6:	10 0d       	add	r17, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	c8 01       	movw	r24, r16
    10fc:	0d d0       	rcall	.+26     	; 0x1118 <malloc>
    10fe:	ec 01       	movw	r28, r24
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	21 f0       	breq	.+8      	; 0x110c <calloc+0x28>
    1104:	a8 01       	movw	r20, r16
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	30 d1       	rcall	.+608    	; 0x136c <memset>
    110c:	ce 01       	movw	r24, r28
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <malloc>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	91 05       	cpc	r25, r1
    1124:	10 f4       	brcc	.+4      	; 0x112a <malloc+0x12>
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	e0 91 a9 3e 	lds	r30, 0x3EA9	; 0x803ea9 <__flp>
    112e:	f0 91 aa 3e 	lds	r31, 0x3EAA	; 0x803eaa <__flp+0x1>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	19 f1       	breq	.+70     	; 0x1184 <malloc+0x6c>
    113e:	40 81       	ld	r20, Z
    1140:	51 81       	ldd	r21, Z+1	; 0x01
    1142:	02 81       	ldd	r16, Z+2	; 0x02
    1144:	13 81       	ldd	r17, Z+3	; 0x03
    1146:	48 17       	cp	r20, r24
    1148:	59 07       	cpc	r21, r25
    114a:	c8 f0       	brcs	.+50     	; 0x117e <malloc+0x66>
    114c:	84 17       	cp	r24, r20
    114e:	95 07       	cpc	r25, r21
    1150:	69 f4       	brne	.+26     	; 0x116c <malloc+0x54>
    1152:	10 97       	sbiw	r26, 0x00	; 0
    1154:	31 f0       	breq	.+12     	; 0x1162 <malloc+0x4a>
    1156:	12 96       	adiw	r26, 0x02	; 2
    1158:	0c 93       	st	X, r16
    115a:	12 97       	sbiw	r26, 0x02	; 2
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	1c 93       	st	X, r17
    1160:	27 c0       	rjmp	.+78     	; 0x11b0 <malloc+0x98>
    1162:	00 93 a9 3e 	sts	0x3EA9, r16	; 0x803ea9 <__flp>
    1166:	10 93 aa 3e 	sts	0x3EAA, r17	; 0x803eaa <__flp+0x1>
    116a:	22 c0       	rjmp	.+68     	; 0x11b0 <malloc+0x98>
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	19 f0       	breq	.+6      	; 0x1178 <malloc+0x60>
    1172:	42 17       	cp	r20, r18
    1174:	53 07       	cpc	r21, r19
    1176:	18 f4       	brcc	.+6      	; 0x117e <malloc+0x66>
    1178:	9a 01       	movw	r18, r20
    117a:	bd 01       	movw	r22, r26
    117c:	ef 01       	movw	r28, r30
    117e:	df 01       	movw	r26, r30
    1180:	f8 01       	movw	r30, r16
    1182:	db cf       	rjmp	.-74     	; 0x113a <malloc+0x22>
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	f9 f0       	breq	.+62     	; 0x11c8 <malloc+0xb0>
    118a:	28 1b       	sub	r18, r24
    118c:	39 0b       	sbc	r19, r25
    118e:	24 30       	cpi	r18, 0x04	; 4
    1190:	31 05       	cpc	r19, r1
    1192:	80 f4       	brcc	.+32     	; 0x11b4 <malloc+0x9c>
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	61 15       	cp	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	21 f0       	breq	.+8      	; 0x11a6 <malloc+0x8e>
    119e:	fb 01       	movw	r30, r22
    11a0:	82 83       	std	Z+2, r24	; 0x02
    11a2:	93 83       	std	Z+3, r25	; 0x03
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <malloc+0x96>
    11a6:	80 93 a9 3e 	sts	0x3EA9, r24	; 0x803ea9 <__flp>
    11aa:	90 93 aa 3e 	sts	0x3EAA, r25	; 0x803eaa <__flp+0x1>
    11ae:	fe 01       	movw	r30, r28
    11b0:	32 96       	adiw	r30, 0x02	; 2
    11b2:	44 c0       	rjmp	.+136    	; 0x123c <malloc+0x124>
    11b4:	fe 01       	movw	r30, r28
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	81 93       	st	Z+, r24
    11bc:	91 93       	st	Z+, r25
    11be:	22 50       	subi	r18, 0x02	; 2
    11c0:	31 09       	sbc	r19, r1
    11c2:	28 83       	st	Y, r18
    11c4:	39 83       	std	Y+1, r19	; 0x01
    11c6:	3a c0       	rjmp	.+116    	; 0x123c <malloc+0x124>
    11c8:	20 91 a7 3e 	lds	r18, 0x3EA7	; 0x803ea7 <__brkval>
    11cc:	30 91 a8 3e 	lds	r19, 0x3EA8	; 0x803ea8 <__brkval+0x1>
    11d0:	23 2b       	or	r18, r19
    11d2:	41 f4       	brne	.+16     	; 0x11e4 <malloc+0xcc>
    11d4:	20 91 03 3e 	lds	r18, 0x3E03	; 0x803e03 <__malloc_heap_start>
    11d8:	30 91 04 3e 	lds	r19, 0x3E04	; 0x803e04 <__malloc_heap_start+0x1>
    11dc:	20 93 a7 3e 	sts	0x3EA7, r18	; 0x803ea7 <__brkval>
    11e0:	30 93 a8 3e 	sts	0x3EA8, r19	; 0x803ea8 <__brkval+0x1>
    11e4:	20 91 01 3e 	lds	r18, 0x3E01	; 0x803e01 <__malloc_heap_end>
    11e8:	30 91 02 3e 	lds	r19, 0x3E02	; 0x803e02 <__malloc_heap_end+0x1>
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	41 f4       	brne	.+16     	; 0x1202 <malloc+0xea>
    11f2:	2d b7       	in	r18, 0x3d	; 61
    11f4:	3e b7       	in	r19, 0x3e	; 62
    11f6:	40 91 05 3e 	lds	r20, 0x3E05	; 0x803e05 <__malloc_margin>
    11fa:	50 91 06 3e 	lds	r21, 0x3E06	; 0x803e06 <__malloc_margin+0x1>
    11fe:	24 1b       	sub	r18, r20
    1200:	35 0b       	sbc	r19, r21
    1202:	e0 91 a7 3e 	lds	r30, 0x3EA7	; 0x803ea7 <__brkval>
    1206:	f0 91 a8 3e 	lds	r31, 0x3EA8	; 0x803ea8 <__brkval+0x1>
    120a:	e2 17       	cp	r30, r18
    120c:	f3 07       	cpc	r31, r19
    120e:	a0 f4       	brcc	.+40     	; 0x1238 <malloc+0x120>
    1210:	2e 1b       	sub	r18, r30
    1212:	3f 0b       	sbc	r19, r31
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	78 f0       	brcs	.+30     	; 0x1238 <malloc+0x120>
    121a:	ac 01       	movw	r20, r24
    121c:	4e 5f       	subi	r20, 0xFE	; 254
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	24 17       	cp	r18, r20
    1222:	35 07       	cpc	r19, r21
    1224:	48 f0       	brcs	.+18     	; 0x1238 <malloc+0x120>
    1226:	4e 0f       	add	r20, r30
    1228:	5f 1f       	adc	r21, r31
    122a:	40 93 a7 3e 	sts	0x3EA7, r20	; 0x803ea7 <__brkval>
    122e:	50 93 a8 3e 	sts	0x3EA8, r21	; 0x803ea8 <__brkval+0x1>
    1232:	81 93       	st	Z+, r24
    1234:	91 93       	st	Z+, r25
    1236:	02 c0       	rjmp	.+4      	; 0x123c <malloc+0x124>
    1238:	e0 e0       	ldi	r30, 0x00	; 0
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	cf 01       	movw	r24, r30
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <free>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	09 f4       	brne	.+2      	; 0x1252 <free+0xa>
    1250:	81 c0       	rjmp	.+258    	; 0x1354 <free+0x10c>
    1252:	fc 01       	movw	r30, r24
    1254:	32 97       	sbiw	r30, 0x02	; 2
    1256:	12 82       	std	Z+2, r1	; 0x02
    1258:	13 82       	std	Z+3, r1	; 0x03
    125a:	a0 91 a9 3e 	lds	r26, 0x3EA9	; 0x803ea9 <__flp>
    125e:	b0 91 aa 3e 	lds	r27, 0x3EAA	; 0x803eaa <__flp+0x1>
    1262:	10 97       	sbiw	r26, 0x00	; 0
    1264:	81 f4       	brne	.+32     	; 0x1286 <free+0x3e>
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	20 91 a7 3e 	lds	r18, 0x3EA7	; 0x803ea7 <__brkval>
    1272:	30 91 a8 3e 	lds	r19, 0x3EA8	; 0x803ea8 <__brkval+0x1>
    1276:	28 17       	cp	r18, r24
    1278:	39 07       	cpc	r19, r25
    127a:	51 f5       	brne	.+84     	; 0x12d0 <free+0x88>
    127c:	e0 93 a7 3e 	sts	0x3EA7, r30	; 0x803ea7 <__brkval>
    1280:	f0 93 a8 3e 	sts	0x3EA8, r31	; 0x803ea8 <__brkval+0x1>
    1284:	67 c0       	rjmp	.+206    	; 0x1354 <free+0x10c>
    1286:	ed 01       	movw	r28, r26
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	ce 17       	cp	r28, r30
    128e:	df 07       	cpc	r29, r31
    1290:	40 f4       	brcc	.+16     	; 0x12a2 <free+0x5a>
    1292:	4a 81       	ldd	r20, Y+2	; 0x02
    1294:	5b 81       	ldd	r21, Y+3	; 0x03
    1296:	9e 01       	movw	r18, r28
    1298:	41 15       	cp	r20, r1
    129a:	51 05       	cpc	r21, r1
    129c:	f1 f0       	breq	.+60     	; 0x12da <free+0x92>
    129e:	ea 01       	movw	r28, r20
    12a0:	f5 cf       	rjmp	.-22     	; 0x128c <free+0x44>
    12a2:	c2 83       	std	Z+2, r28	; 0x02
    12a4:	d3 83       	std	Z+3, r29	; 0x03
    12a6:	40 81       	ld	r20, Z
    12a8:	51 81       	ldd	r21, Z+1	; 0x01
    12aa:	84 0f       	add	r24, r20
    12ac:	95 1f       	adc	r25, r21
    12ae:	c8 17       	cp	r28, r24
    12b0:	d9 07       	cpc	r29, r25
    12b2:	59 f4       	brne	.+22     	; 0x12ca <free+0x82>
    12b4:	88 81       	ld	r24, Y
    12b6:	99 81       	ldd	r25, Y+1	; 0x01
    12b8:	84 0f       	add	r24, r20
    12ba:	95 1f       	adc	r25, r21
    12bc:	02 96       	adiw	r24, 0x02	; 2
    12be:	80 83       	st	Z, r24
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	82 83       	std	Z+2, r24	; 0x02
    12c8:	93 83       	std	Z+3, r25	; 0x03
    12ca:	21 15       	cp	r18, r1
    12cc:	31 05       	cpc	r19, r1
    12ce:	29 f4       	brne	.+10     	; 0x12da <free+0x92>
    12d0:	e0 93 a9 3e 	sts	0x3EA9, r30	; 0x803ea9 <__flp>
    12d4:	f0 93 aa 3e 	sts	0x3EAA, r31	; 0x803eaa <__flp+0x1>
    12d8:	3d c0       	rjmp	.+122    	; 0x1354 <free+0x10c>
    12da:	e9 01       	movw	r28, r18
    12dc:	ea 83       	std	Y+2, r30	; 0x02
    12de:	fb 83       	std	Y+3, r31	; 0x03
    12e0:	49 91       	ld	r20, Y+
    12e2:	59 91       	ld	r21, Y+
    12e4:	c4 0f       	add	r28, r20
    12e6:	d5 1f       	adc	r29, r21
    12e8:	ec 17       	cp	r30, r28
    12ea:	fd 07       	cpc	r31, r29
    12ec:	61 f4       	brne	.+24     	; 0x1306 <free+0xbe>
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	84 0f       	add	r24, r20
    12f4:	95 1f       	adc	r25, r21
    12f6:	02 96       	adiw	r24, 0x02	; 2
    12f8:	e9 01       	movw	r28, r18
    12fa:	88 83       	st	Y, r24
    12fc:	99 83       	std	Y+1, r25	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	9b 83       	std	Y+3, r25	; 0x03
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	12 96       	adiw	r26, 0x02	; 2
    130c:	8d 91       	ld	r24, X+
    130e:	9c 91       	ld	r25, X
    1310:	13 97       	sbiw	r26, 0x03	; 3
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	19 f0       	breq	.+6      	; 0x131c <free+0xd4>
    1316:	fd 01       	movw	r30, r26
    1318:	dc 01       	movw	r26, r24
    131a:	f7 cf       	rjmp	.-18     	; 0x130a <free+0xc2>
    131c:	8d 91       	ld	r24, X+
    131e:	9c 91       	ld	r25, X
    1320:	11 97       	sbiw	r26, 0x01	; 1
    1322:	9d 01       	movw	r18, r26
    1324:	2e 5f       	subi	r18, 0xFE	; 254
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	20 91 a7 3e 	lds	r18, 0x3EA7	; 0x803ea7 <__brkval>
    1330:	30 91 a8 3e 	lds	r19, 0x3EA8	; 0x803ea8 <__brkval+0x1>
    1334:	28 17       	cp	r18, r24
    1336:	39 07       	cpc	r19, r25
    1338:	69 f4       	brne	.+26     	; 0x1354 <free+0x10c>
    133a:	30 97       	sbiw	r30, 0x00	; 0
    133c:	29 f4       	brne	.+10     	; 0x1348 <free+0x100>
    133e:	10 92 a9 3e 	sts	0x3EA9, r1	; 0x803ea9 <__flp>
    1342:	10 92 aa 3e 	sts	0x3EAA, r1	; 0x803eaa <__flp+0x1>
    1346:	02 c0       	rjmp	.+4      	; 0x134c <free+0x104>
    1348:	12 82       	std	Z+2, r1	; 0x02
    134a:	13 82       	std	Z+3, r1	; 0x03
    134c:	a0 93 a7 3e 	sts	0x3EA7, r26	; 0x803ea7 <__brkval>
    1350:	b0 93 a8 3e 	sts	0x3EA8, r27	; 0x803ea8 <__brkval+0x1>
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <memcpy>:
    135a:	fb 01       	movw	r30, r22
    135c:	dc 01       	movw	r26, r24
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <memcpy+0xa>
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	41 50       	subi	r20, 0x01	; 1
    1366:	50 40       	sbci	r21, 0x00	; 0
    1368:	d8 f7       	brcc	.-10     	; 0x1360 <memcpy+0x6>
    136a:	08 95       	ret

0000136c <memset>:
    136c:	dc 01       	movw	r26, r24
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <memset+0x6>
    1370:	6d 93       	st	X+, r22
    1372:	41 50       	subi	r20, 0x01	; 1
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	e0 f7       	brcc	.-8      	; 0x1370 <memset+0x4>
    1378:	08 95       	ret

0000137a <eeprom_read_byte>:
    137a:	03 d0       	rcall	.+6      	; 0x1382 <eeprom_mapen>
    137c:	80 81       	ld	r24, Z
    137e:	99 27       	eor	r25, r25
    1380:	08 95       	ret

00001382 <eeprom_mapen>:
    1382:	fc 01       	movw	r30, r24
    1384:	e0 50       	subi	r30, 0x00	; 0
    1386:	fc 4e       	sbci	r31, 0xEC	; 236
    1388:	08 95       	ret

0000138a <_exit>:
    138a:	f8 94       	cli

0000138c <__stop_program>:
    138c:	ff cf       	rjmp	.-2      	; 0x138c <__stop_program>
