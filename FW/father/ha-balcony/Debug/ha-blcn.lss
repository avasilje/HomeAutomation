
ha-blcn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803e00  000015bb  0000168f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157c  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003f  0000957c  0000157c  00001650  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000066  00803e08  00803e08  00001697  2**0
                  ALLOC
  4 .eeprom       00000028  00810000  00810000  00001697  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000250  00000000  00000000  00001730  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000611b  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002637  00000000  00000000  00007a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f7a  00000000  00000000  0000a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000005cc  00000000  00000000  0000c04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022bc  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000021f7  00000000  00000000  0000e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003c8  00000000  00000000  00010acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	33 c8       	rjmp	.-3994   	; 0xfffff072 <__eeprom_end+0xff7ef04a>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	52 c8       	rjmp	.-3932   	; 0xfffff0c0 <__eeprom_end+0xff7ef098>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	eb eb       	ldi	r30, 0xBB	; 187
      48:	f5 e1       	ldi	r31, 0x15	; 21
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a8 30       	cpi	r26, 0x08	; 8
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a8 e0       	ldi	r26, 0x08	; 8
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ae 36       	cpi	r26, 0x6E	; 110
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	9f d8       	rcall	.-3778   	; 0xfffff1a6 <__eeprom_end+0xff7ef17e>
      68:	87 ca       	rjmp	.-2802   	; 0xfffff578 <__eeprom_end+0xff7ef550>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <FATAL_TRAP>:
#include <stdint.h>
uint16_t gus_trap_line;

void FATAL_TRAP (uint16_t us_line_num) {
    gus_trap_line = us_line_num;
      6c:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <gus_trap_line>
      70:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <gus_trap_line+0x1>
      74:	ff cf       	rjmp	.-2      	; 0x74 <FATAL_TRAP+0x8>

00000076 <ha_nlink_init>:

	node->tx_flag = 0;
	uint8_t tx_buf_len = node->tx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA;
	memcpy(buf, node->tx_buf, tx_buf_len);
	return tx_buf_len;
}
      76:	cf 93       	push	r28
      78:	df 93       	push	r29
      7a:	c2 e2       	ldi	r28, 0x22	; 34
      7c:	de e3       	ldi	r29, 0x3E	; 62
      7e:	88 e4       	ldi	r24, 0x48	; 72
      80:	fe 01       	movw	r30, r28
      82:	11 92       	st	Z+, r1
      84:	8a 95       	dec	r24
      86:	e9 f7       	brne	.-6      	; 0x82 <ha_nlink_init+0xc>
      88:	fd d6       	rcall	.+3578   	; 0xe84 <ha_nlink_gpio_init>
      8a:	4c 98       	cbi	0x09, 4	; 9
      8c:	1e a2       	std	Y+38, r1	; 0x26
      8e:	80 e4       	ldi	r24, 0x40	; 64
      90:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <nlink+0x46>
      94:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <nlink+0x43>
      98:	8b e0       	ldi	r24, 0x0B	; 11
      9a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
      9e:	80 e2       	ldi	r24, 0x20	; 32
      a0:	8b b9       	out	0x0b, r24	; 11
      a2:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
      a6:	df 91       	pop	r29
      a8:	cf 91       	pop	r28
      aa:	08 95       	ret

000000ac <ha_nlink_node_register>:
      ac:	90 91 22 3e 	lds	r25, 0x3E22	; 0x803e22 <nlink>
      b0:	99 23       	and	r25, r25
      b2:	39 f0       	breq	.+14     	; 0xc2 <ha_nlink_node_register+0x16>
      b4:	90 91 35 3e 	lds	r25, 0x3E35	; 0x803e35 <nlink+0x13>
      b8:	99 23       	and	r25, r25
      ba:	69 f0       	breq	.+26     	; 0xd6 <ha_nlink_node_register+0x2a>
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	08 95       	ret
      c2:	e2 e2       	ldi	r30, 0x22	; 34
      c4:	fe e3       	ldi	r31, 0x3E	; 62
      c6:	80 83       	st	Z, r24
      c8:	61 83       	std	Z+1, r22	; 0x01
      ca:	42 83       	std	Z+2, r20	; 0x02
      cc:	53 83       	std	Z+3, r21	; 0x03
      ce:	24 83       	std	Z+4, r18	; 0x04
      d0:	35 83       	std	Z+5, r19	; 0x05
      d2:	cf 01       	movw	r24, r30
      d4:	08 95       	ret
      d6:	e5 e3       	ldi	r30, 0x35	; 53
      d8:	fe e3       	ldi	r31, 0x3E	; 62
      da:	f5 cf       	rjmp	.-22     	; 0xc6 <ha_nlink_node_register+0x1a>

000000dc <nlink_node_on_rx>:
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	8c 01       	movw	r16, r24
      ee:	fc 01       	movw	r30, r24
      f0:	f1 80       	ldd	r15, Z+1	; 0x01
      f2:	d0 80       	ld	r13, Z
      f4:	c2 e2       	ldi	r28, 0x22	; 34
      f6:	de e3       	ldi	r29, 0x3E	; 62
      f8:	e1 2c       	mov	r14, r1
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	c8 2e       	mov	r12, r24
      fe:	88 81       	ld	r24, Y
     100:	88 23       	and	r24, r24
     102:	79 f0       	breq	.+30     	; 0x122 <nlink_node_on_rx+0x46>
     104:	d8 16       	cp	r13, r24
     106:	41 f0       	breq	.+16     	; 0x118 <nlink_node_on_rx+0x3c>
     108:	f8 16       	cp	r15, r24
     10a:	a9 f0       	breq	.+42     	; 0x136 <nlink_node_on_rx+0x5a>
     10c:	99 81       	ldd	r25, Y+1	; 0x01
     10e:	90 34       	cpi	r25, 0x40	; 64
     110:	91 f0       	breq	.+36     	; 0x136 <nlink_node_on_rx+0x5a>
     112:	ff ef       	ldi	r31, 0xFF	; 255
     114:	ff 16       	cp	r15, r31
     116:	79 f0       	breq	.+30     	; 0x136 <nlink_node_on_rx+0x5a>
     118:	63 96       	adiw	r28, 0x13	; 19
     11a:	fe e3       	ldi	r31, 0x3E	; 62
     11c:	c8 34       	cpi	r28, 0x48	; 72
     11e:	df 07       	cpc	r29, r31
     120:	71 f7       	brne	.-36     	; 0xfe <nlink_node_on_rx+0x22>
     122:	8e 2d       	mov	r24, r14
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	1f 91       	pop	r17
     12a:	0f 91       	pop	r16
     12c:	ff 90       	pop	r15
     12e:	ef 90       	pop	r14
     130:	df 90       	pop	r13
     132:	cf 90       	pop	r12
     134:	08 95       	ret
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	f8 12       	cpse	r15, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	e9 2a       	or	r14, r25
     13e:	f8 01       	movw	r30, r16
     140:	92 81       	ldd	r25, Z+2	; 0x02
     142:	91 30       	cpi	r25, 0x01	; 1
     144:	39 f0       	breq	.+14     	; 0x154 <nlink_node_on_rx+0x78>
     146:	ea 81       	ldd	r30, Y+2	; 0x02
     148:	fb 81       	ldd	r31, Y+3	; 0x03
     14a:	b8 01       	movw	r22, r16
     14c:	8c 81       	ldd	r24, Y+4	; 0x04
     14e:	9d 81       	ldd	r25, Y+5	; 0x05
     150:	09 95       	icall
     152:	e2 cf       	rjmp	.-60     	; 0x118 <nlink_node_on_rx+0x3c>
     154:	8e 83       	std	Y+6, r24	; 0x06
     156:	df 82       	std	Y+7, r13	; 0x07
     158:	c8 86       	std	Y+8, r12	; 0x08
     15a:	9a 8b       	std	Y+18, r25	; 0x12
     15c:	dd cf       	rjmp	.-70     	; 0x118 <nlink_node_on_rx+0x3c>

0000015e <ha_nlink_node_send>:
     15e:	fc 01       	movw	r30, r24
     160:	80 81       	ld	r24, Z
     162:	86 83       	std	Z+6, r24	; 0x06
     164:	67 83       	std	Z+7, r22	; 0x07
     166:	40 87       	std	Z+8, r20	; 0x08
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	82 8b       	std	Z+18, r24	; 0x12
     16c:	08 95       	ret

0000016e <ha_nlink_check_rx>:
     16e:	80 91 48 3e 	lds	r24, 0x3E48	; 0x803e48 <nlink+0x26>
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	09 f0       	breq	.+2      	; 0x178 <ha_nlink_check_rx+0xa>
     176:	08 95       	ret
     178:	80 91 69 3e 	lds	r24, 0x3E69	; 0x803e69 <nlink+0x47>
     17c:	88 23       	and	r24, r24
     17e:	d9 f3       	breq	.-10     	; 0x176 <ha_nlink_check_rx+0x8>
     180:	40 91 65 3e 	lds	r20, 0x3E65	; 0x803e65 <nlink+0x43>
     184:	45 30       	cpi	r20, 0x05	; 5
     186:	b8 f3       	brcs	.-18     	; 0x176 <ha_nlink_check_rx+0x8>
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	20 91 5d 3e 	lds	r18, 0x3E5D	; 0x803e5d <nlink+0x3b>
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	2b 5f       	subi	r18, 0xFB	; 251
     192:	3f 4f       	sbci	r19, 0xFF	; 255
     194:	42 17       	cp	r20, r18
     196:	53 07       	cpc	r21, r19
     198:	91 f0       	breq	.+36     	; 0x1be <ha_nlink_check_rx+0x50>
     19a:	8e 30       	cpi	r24, 0x0E	; 14
     19c:	61 f7       	brne	.-40     	; 0x176 <ha_nlink_check_rx+0x8>
     19e:	4c 98       	cbi	0x09, 4	; 9
     1a0:	10 92 48 3e 	sts	0x3E48, r1	; 0x803e48 <nlink+0x26>
     1a4:	80 e4       	ldi	r24, 0x40	; 64
     1a6:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <nlink+0x46>
     1aa:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <nlink+0x43>
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	8b b9       	out	0x0b, r24	; 11
     1b8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     1bc:	08 95       	ret
     1be:	69 e5       	ldi	r22, 0x59	; 89
     1c0:	7e e3       	ldi	r23, 0x3E	; 62
     1c2:	86 e1       	ldi	r24, 0x16	; 22
     1c4:	9e e3       	ldi	r25, 0x3E	; 62
     1c6:	bc d9       	rcall	.-3208   	; 0xfffff540 <__eeprom_end+0xff7ef518>
     1c8:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <nlink+0x43>
     1cc:	86 e1       	ldi	r24, 0x16	; 22
     1ce:	9e e3       	ldi	r25, 0x3E	; 62
     1d0:	85 cf       	rjmp	.-246    	; 0xdc <nlink_node_on_rx>

000001d2 <ha_nlink_check_tx>:

void ha_nlink_check_tx()
{ 
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
    // LVL          +4  +2    ha_nlink_check_tx
    //   LVL2       +8  +2    nlink_node_on_rx
    //     LVL3     +7  +2    ledlight_on_rx
    //       LVL4   +2  +2    ha_node_ledlight_off

    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
     1de:	80 91 48 3e 	lds	r24, 0x3E48	; 0x803e48 <nlink+0x26>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	39 f0       	breq	.+14     	; 0x1f4 <ha_nlink_check_tx+0x22>
			    nlink.io.tx_rd = 0;
			    isr_ha_nlink_io_set_idle();
            sei();
		}
    }
}
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	08 95       	ret
    // LVL          +4  +2    ha_nlink_check_tx
    //   LVL2       +8  +2    nlink_node_on_rx
    //     LVL3     +7  +2    ledlight_on_rx
    //       LVL4   +2  +2    ha_node_ledlight_off

    if (nlink.io.state != NLINK_IO_STATE_IDLE ||
     1f4:	90 91 69 3e 	lds	r25, 0x3E69	; 0x803e69 <nlink+0x47>
     1f8:	9e 30       	cpi	r25, 0x0E	; 14
     1fa:	a9 f7       	brne	.-22     	; 0x1e6 <ha_nlink_check_tx+0x14>
        return;
    }

    // IO Idle timeout expired
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
     1fc:	90 91 57 3e 	lds	r25, 0x3E57	; 0x803e57 <nlink+0x35>
     200:	91 11       	cpse	r25, r1
     202:	10 c0       	rjmp	.+32     	; 0x224 <ha_nlink_check_tx+0x52>
     204:	c8 e2       	ldi	r28, 0x28	; 40
     206:	de e3       	ldi	r29, 0x3E	; 62
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     208:	ee 24       	eor	r14, r14
     20a:	e3 94       	inc	r14
    nlink.io.idle_timer = 0;
    NLINK_RX_INT_ENABLE;
     20c:	8b e0       	ldi	r24, 0x0B	; 11
     20e:	f8 2e       	mov	r15, r24
     210:	00 e2       	ldi	r16, 0x20	; 32
    }
    // Get data to transfer from nodes
    for(uint8_t i = 0; i < ARRAY_SIZE(nlink.nodes); i++) {
        node_t *node = &nlink.nodes[i];
		uint8_t tx_buf_len;
		if (node->tx_flag == 0) {
     212:	8c 85       	ldd	r24, Y+12	; 0x0c
     214:	81 11       	cpse	r24, r1
     216:	16 c0       	rjmp	.+44     	; 0x244 <ha_nlink_check_tx+0x72>
     218:	63 96       	adiw	r28, 0x13	; 19
            isr_ha_nlink_io_set_idle(); // Restart previous transfer
        sei();
        return;
    }
    // Get data to transfer from nodes
    for(uint8_t i = 0; i < ARRAY_SIZE(nlink.nodes); i++) {
     21a:	8e e3       	ldi	r24, 0x3E	; 62
     21c:	ce 34       	cpi	r28, 0x4E	; 78
     21e:	d8 07       	cpc	r29, r24
     220:	11 f3       	breq	.-60     	; 0x1e6 <ha_nlink_check_tx+0x14>
     222:	f7 cf       	rjmp	.-18     	; 0x212 <ha_nlink_check_tx+0x40>
    }

    // IO Idle timeout expired
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
        cli();
     224:	f8 94       	cli
            nlink.io.tx_rd = 0;
     226:	10 92 56 3e 	sts	0x3E56, r1	; 0x803e56 <nlink+0x34>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     22a:	80 93 48 3e 	sts	0x3E48, r24	; 0x803e48 <nlink+0x26>
    nlink.io.idle_timer = 0;
     22e:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <nlink+0x47>
    NLINK_RX_INT_ENABLE;
     232:	8b e0       	ldi	r24, 0x0B	; 11
     234:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	8b b9       	out	0x0b, r24	; 11
    NLINK_IO_TIMER_ENABLE;
     23c:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
    // Check pending transfer (in case of previous one failed)
    if (nlink.io.tx_len) {
        cli();
            nlink.io.tx_rd = 0;
            isr_ha_nlink_io_set_idle(); // Restart previous transfer
        sei();
     240:	78 94       	sei
        return;
     242:	d1 cf       	rjmp	.-94     	; 0x1e6 <ha_nlink_check_tx+0x14>
{
	node_t *node = &nlink.nodes[idx];

//	assert(node->tx_flag != 0)

	node->tx_flag = 0;
     244:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t tx_buf_len = node->tx_buf[NLINK_HDR_OFF_LEN] + NLINK_HDR_OFF_DATA;
     246:	1c 81       	ldd	r17, Y+4	; 0x04
     248:	1b 5f       	subi	r17, 0xFB	; 251
	memcpy(buf, node->tx_buf, tx_buf_len);
     24a:	41 2f       	mov	r20, r17
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	be 01       	movw	r22, r28
     250:	8a e4       	ldi	r24, 0x4A	; 74
     252:	9e e3       	ldi	r25, 0x3E	; 62
     254:	75 d9       	rcall	.-3350   	; 0xfffff540 <__eeprom_end+0xff7ef518>
		}

		tx_buf_len = ha_nlink_on_tx_default(i, nlink.io.tx_buf);

		// Initiate transfer in next timer interrupt
		if (tx_buf_len) {
     256:	11 23       	and	r17, r17
     258:	f9 f2       	breq	.-66     	; 0x218 <ha_nlink_check_tx+0x46>
            // Check local nodes
            if (nlink_node_on_rx(nlink.io.tx_buf)) {
     25a:	8a e4       	ldi	r24, 0x4A	; 74
     25c:	9e e3       	ldi	r25, 0x3E	; 62
     25e:	3e df       	rcall	.-388    	; 0xdc <nlink_node_on_rx>
     260:	81 11       	cpse	r24, r1
     262:	c1 cf       	rjmp	.-126    	; 0x1e6 <ha_nlink_check_tx+0x14>
                return;
            }

            // Initiate transfer
            cli();
     264:	f8 94       	cli
			    nlink.io.tx_len = tx_buf_len;
     266:	10 93 57 3e 	sts	0x3E57, r17	; 0x803e57 <nlink+0x35>
			    nlink.io.tx_rd = 0;
     26a:	10 92 56 3e 	sts	0x3E56, r1	; 0x803e56 <nlink+0x34>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     26e:	e0 92 48 3e 	sts	0x3E48, r14	; 0x803e48 <nlink+0x26>
    nlink.io.idle_timer = 0;
     272:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <nlink+0x47>
    NLINK_RX_INT_ENABLE;
     276:	f0 92 55 04 	sts	0x0455, r15	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     27a:	0b b9       	out	0x0b, r16	; 11
    NLINK_IO_TIMER_ENABLE;
     27c:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
            // Initiate transfer
            cli();
			    nlink.io.tx_len = tx_buf_len;
			    nlink.io.tx_rd = 0;
			    isr_ha_nlink_io_set_idle();
            sei();
     280:	78 94       	sei
     282:	ca cf       	rjmp	.-108    	; 0x218 <ha_nlink_check_tx+0x46>

00000284 <isr_nlink_io_on_timer>:
void isr_nlink_io_on_timer ()
{ 
//   LVL-1 +2 +2
// LVL-2 +2         isr_nlink_io_on_rx_timer -> ha_nlink_io_set_idle

    if (nlink.io.is_rx_timer) {
     284:	80 91 49 3e 	lds	r24, 0x3E49	; 0x803e49 <nlink+0x27>
     288:	81 11       	cpse	r24, r1
     28a:	24 c0       	rjmp	.+72     	; 0x2d4 <isr_nlink_io_on_timer+0x50>
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN0_MASK;
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN0_MASK;
     28c:	4b 98       	cbi	0x09, 3	; 9
    nlink.io.rx_shift_reg = (nlink.io.rx_shift_reg >> 1) | (bit_in << 7);
}

static void isr_nlink_io_on_tx_timer()
{
    if (nlink.io.tx_len == 0) {
     28e:	90 91 57 3e 	lds	r25, 0x3E57	; 0x803e57 <nlink+0x35>
     292:	99 23       	and	r25, r25
     294:	c9 f0       	breq	.+50     	; 0x2c8 <isr_nlink_io_on_timer+0x44>
        return;
    }

    switch(nlink.io.state) {
     296:	20 91 48 3e 	lds	r18, 0x3E48	; 0x803e48 <nlink+0x26>
     29a:	21 30       	cpi	r18, 0x01	; 1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <isr_nlink_io_on_timer+0x1c>
     29e:	6e c0       	rjmp	.+220    	; 0x37c <isr_nlink_io_on_timer+0xf8>
     2a0:	98 f0       	brcs	.+38     	; 0x2c8 <isr_nlink_io_on_timer+0x44>
     2a2:	22 30       	cpi	r18, 0x02	; 2
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <isr_nlink_io_on_timer+0x24>
     2a6:	64 c0       	rjmp	.+200    	; 0x370 <isr_nlink_io_on_timer+0xec>
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
     2a8:	90 91 67 3e 	lds	r25, 0x3E67	; 0x803e67 <nlink+0x45>
     2ac:	99 23       	and	r25, r25
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <isr_nlink_io_on_timer+0x2e>
     2b0:	9b c0       	rjmp	.+310    	; 0x3e8 <isr_nlink_io_on_timer+0x164>
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
     2b2:	99 30       	cpi	r25, 0x09	; 9
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <isr_nlink_io_on_timer+0x34>
     2b6:	94 c0       	rjmp	.+296    	; 0x3e0 <isr_nlink_io_on_timer+0x15c>
     2b8:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <nlink+0x36>
     2bc:	90 fd       	sbrc	r25, 0
     2be:	92 c0       	rjmp	.+292    	; 0x3e4 <isr_nlink_io_on_timer+0x160>
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
                } else {
                    // 0-data bit
                    NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
     2c0:	4c 9a       	sbi	0x09, 4	; 9
                }
            }
            nlink.io.tx_shift_reg >>= 1;
     2c2:	96 95       	lsr	r25
     2c4:	90 93 58 3e 	sts	0x3E58, r25	; 0x803e58 <nlink+0x36>
        isr_nlink_io_on_rx_timer();
    } else {
        NLINK_IO_DBG_PORT &= ~NLINK_IO_DBG_PIN0_MASK;
        isr_nlink_io_on_tx_timer();
    }
    nlink.io.is_rx_timer = !nlink.io.is_rx_timer;
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	81 11       	cpse	r24, r1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 49 3e 	sts	0x3E49, r25	; 0x803e49 <nlink+0x27>
     2d2:	08 95       	ret
{ 
//   LVL-1 +2 +2
// LVL-2 +2         isr_nlink_io_on_rx_timer -> ha_nlink_io_set_idle

    if (nlink.io.is_rx_timer) {
        NLINK_IO_DBG_PORT |= NLINK_IO_DBG_PIN0_MASK;
     2d4:	4b 9a       	sbi	0x09, 3	; 9
    }
}

static void isr_nlink_io_on_rx_timer()
{
    switch(nlink.io.state) {
     2d6:	90 91 48 3e 	lds	r25, 0x3E48	; 0x803e48 <nlink+0x26>
     2da:	91 30       	cpi	r25, 0x01	; 1
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <isr_nlink_io_on_timer+0x5c>
     2de:	40 c0       	rjmp	.+128    	; 0x360 <isr_nlink_io_on_timer+0xdc>
     2e0:	18 f1       	brcs	.+70     	; 0x328 <isr_nlink_io_on_timer+0xa4>
     2e2:	92 30       	cpi	r25, 0x02	; 2
     2e4:	b9 f5       	brne	.+110    	; 0x354 <isr_nlink_io_on_timer+0xd0>
    //   |   \___/\___0___X_ ... __X____7____/
    //   |     |             |                  |
    //   |     |             |                  |
    // Idle   Start       Data 8bits          Stop

    uint8_t bit_in = !!(NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK);
     2e6:	9a b1       	in	r25, 0x0a	; 10
     2e8:	90 72       	andi	r25, 0x20	; 32
    uint8_t bit_cnt = nlink.io.bit_cnt;
     2ea:	20 91 67 3e 	lds	r18, 0x3E67	; 0x803e67 <nlink+0x45>

    nlink.io.bit_cnt++;
     2ee:	31 e0       	ldi	r19, 0x01	; 1
     2f0:	32 0f       	add	r19, r18
     2f2:	30 93 67 3e 	sts	0x3E67, r19	; 0x803e67 <nlink+0x45>

    if (bit_cnt == 0) {
     2f6:	22 23       	and	r18, r18
     2f8:	09 f4       	brne	.+2      	; 0x2fc <isr_nlink_io_on_timer+0x78>
     2fa:	56 c0       	rjmp	.+172    	; 0x3a8 <isr_nlink_io_on_timer+0x124>
            isr_ha_nlink_io_recover();
        }
        return;
    }

    if (bit_cnt == 9) {
     2fc:	29 30       	cpi	r18, 0x09	; 9
     2fe:	09 f4       	brne	.+2      	; 0x302 <isr_nlink_io_on_timer+0x7e>
     300:	76 c0       	rjmp	.+236    	; 0x3ee <isr_nlink_io_on_timer+0x16a>
            }
        }
        return;
    }

    nlink.io.rx_shift_reg = (nlink.io.rx_shift_reg >> 1) | (bit_in << 7);
     302:	20 91 66 3e 	lds	r18, 0x3E66	; 0x803e66 <nlink+0x44>
     306:	42 2f       	mov	r20, r18
     308:	46 95       	lsr	r20
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	91 11       	cpse	r25, r1
     310:	02 c0       	rjmp	.+4      	; 0x316 <isr_nlink_io_on_timer+0x92>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	36 95       	lsr	r19
     318:	32 2f       	mov	r19, r18
     31a:	22 27       	eor	r18, r18
     31c:	37 95       	ror	r19
     31e:	27 95       	ror	r18
     320:	24 2b       	or	r18, r20
     322:	20 93 66 3e 	sts	0x3E66, r18	; 0x803e66 <nlink+0x44>
     326:	d0 cf       	rjmp	.-96     	; 0x2c8 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_ACTIVE:
            isr_nlink_io_rx_on_receiving();
            break;
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
     328:	55 9b       	sbis	0x0a, 5	; 10
     32a:	3a c0       	rjmp	.+116    	; 0x3a0 <isr_nlink_io_on_timer+0x11c>
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
     32c:	90 91 68 3e 	lds	r25, 0x3E68	; 0x803e68 <nlink+0x46>
     330:	91 50       	subi	r25, 0x01	; 1
     332:	90 93 68 3e 	sts	0x3E68, r25	; 0x803e68 <nlink+0x46>
     336:	91 11       	cpse	r25, r1
     338:	c7 cf       	rjmp	.-114    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
uint8_t g_rx_buf[NLINK_COMM_BUF_SIZE];    /*  get rid off it stop process incoming package until this one being processed */

static void isr_ha_nlink_io_set_idle()
{ // LVL-2 +2

    nlink.io.state = NLINK_IO_STATE_IDLE;
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	90 93 48 3e 	sts	0x3E48, r25	; 0x803e48 <nlink+0x26>
    nlink.io.idle_timer = 0;
     340:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <nlink+0x47>
    NLINK_RX_INT_ENABLE;
     344:	9b e0       	ldi	r25, 0x0B	; 11
     346:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     34a:	90 e2       	ldi	r25, 0x20	; 32
     34c:	9b b9       	out	0x0b, r25	; 11
    NLINK_IO_TIMER_ENABLE;
     34e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     352:	ba cf       	rjmp	.-140    	; 0x2c8 <isr_nlink_io_on_timer+0x44>

        case NLINK_IO_STATE_IDLE:
            isr_nlink_io_rx_on_idle();
            break;
        default:
            FATAL_TRAP(__LINE__);
     354:	89 e5       	ldi	r24, 0x59	; 89
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	89 de       	rcall	.-750    	; 0x6c <FATAL_TRAP>
     35a:	80 91 49 3e 	lds	r24, 0x3E49	; 0x803e49 <nlink+0x27>
     35e:	b4 cf       	rjmp	.-152    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
    }
}

static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
     360:	90 91 69 3e 	lds	r25, 0x3E69	; 0x803e69 <nlink+0x47>
     364:	9e 30       	cpi	r25, 0x0E	; 14
     366:	60 f5       	brcc	.+88     	; 0x3c0 <isr_nlink_io_on_timer+0x13c>
        nlink.io.idle_timer++;
     368:	9f 5f       	subi	r25, 0xFF	; 255
     36a:	90 93 69 3e 	sts	0x3E69, r25	; 0x803e69 <nlink+0x47>
     36e:	ac cf       	rjmp	.-168    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
            }
            break;
        case NLINK_IO_STATE_RECOVERING:
            break;
        default:
            FATAL_TRAP(__LINE__);
     370:	81 e4       	ldi	r24, 0x41	; 65
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	7b de       	rcall	.-778    	; 0x6c <FATAL_TRAP>
     376:	80 91 49 3e 	lds	r24, 0x3E49	; 0x803e49 <nlink+0x27>
     37a:	a6 cf       	rjmp	.-180    	; 0x2c8 <isr_nlink_io_on_timer+0x44>

        case NLINK_IO_STATE_IDLE:
            if (nlink.io.tx_len == 0) {
                break;
            }
            if (nlink.io.tx_rd < nlink.io.tx_len) {
     37c:	e0 91 56 3e 	lds	r30, 0x3E56	; 0x803e56 <nlink+0x34>
     380:	e9 17       	cp	r30, r25
     382:	10 f1       	brcs	.+68     	; 0x3c8 <isr_nlink_io_on_timer+0x144>
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
     384:	9e 13       	cpse	r25, r30
     386:	a0 cf       	rjmp	.-192    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
     388:	20 91 59 3e 	lds	r18, 0x3E59	; 0x803e59 <nlink+0x37>
     38c:	90 91 4a 3e 	lds	r25, 0x3E4A	; 0x803e4a <nlink+0x28>
     390:	29 17       	cp	r18, r25
     392:	f1 f1       	breq	.+124    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
                } else {
                    // Transmittion failed.
                    // Use tx_rd > tx_len as retransmit required flag
                    // Retransmittion will be initiated in idle loop
                    // after idle timeout expired
                    nlink.io.tx_rd = 0xFF; // aka (tx_len + 1)
     394:	9f ef       	ldi	r25, 0xFF	; 255
     396:	90 93 56 3e 	sts	0x3E56, r25	; 0x803e56 <nlink+0x34>
                }
                // Invalidate just received own data
                nlink.io.rx_wr = 0;
     39a:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <nlink+0x43>
     39e:	94 cf       	rjmp	.-216    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
        case NLINK_IO_STATE_RECOVERING:
            // Reload timer if pin still in 0
            if (0 == (NLINK_IO_RX_PIN & NLINK_IO_RX_PIN_MASK)) {
                nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
            }
            if (--nlink.io.recover_timer == 0) {
     3a0:	9f e3       	ldi	r25, 0x3F	; 63
     3a2:	90 93 68 3e 	sts	0x3E68, r25	; 0x803e68 <nlink+0x46>
     3a6:	90 cf       	rjmp	.-224    	; 0x2c8 <isr_nlink_io_on_timer+0x44>

    nlink.io.bit_cnt++;

    if (bit_cnt == 0) {
        // Check START bit
        if (bit_in) {
     3a8:	99 23       	and	r25, r25
     3aa:	09 f4       	brne	.+2      	; 0x3ae <isr_nlink_io_on_timer+0x12a>
     3ac:	8d cf       	rjmp	.-230    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
    NLINK_IO_TIMER_ENABLE;
}
static void isr_ha_nlink_io_recover()
{ // LVL-2 +2
    
    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
     3ae:	4c 98       	cbi	0x09, 4	; 9
    nlink.io.state = NLINK_IO_STATE_RECOVERING;
     3b0:	10 92 48 3e 	sts	0x3E48, r1	; 0x803e48 <nlink+0x26>
    nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
     3b4:	90 e4       	ldi	r25, 0x40	; 64
     3b6:	90 93 68 3e 	sts	0x3E68, r25	; 0x803e68 <nlink+0x46>
    nlink.io.rx_wr = 0;
     3ba:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <nlink+0x43>
     3be:	c2 cf       	rjmp	.-124    	; 0x344 <isr_nlink_io_on_timer+0xc0>
static void isr_nlink_io_rx_on_idle()
{
    if (nlink.io.idle_timer < NLINK_IO_IDLE_TIMEOUT) {
        nlink.io.idle_timer++;
    } else {
        NLINK_IO_TIMER_DISABLE;
     3c0:	9f ef       	ldi	r25, 0xFF	; 255
     3c2:	90 93 00 3e 	sts	0x3E00, r25	; 0x803e00 <__data_start>
     3c6:	80 cf       	rjmp	.-256    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
            if (nlink.io.tx_len == 0) {
                break;
            }
            if (nlink.io.tx_rd < nlink.io.tx_len) {
                // Something to send
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	9e 0f       	add	r25, r30
     3cc:	90 93 56 3e 	sts	0x3E56, r25	; 0x803e56 <nlink+0x34>
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	ee 5d       	subi	r30, 0xDE	; 222
     3d4:	f1 4c       	sbci	r31, 0xC1	; 193
     3d6:	90 a5       	ldd	r25, Z+40	; 0x28
     3d8:	90 93 58 3e 	sts	0x3E58, r25	; 0x803e58 <nlink+0x36>
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
     3dc:	4c 9a       	sbi	0x09, 4	; 9
     3de:	74 cf       	rjmp	.-280    	; 0x2c8 <isr_nlink_io_on_timer+0x44>
     3e0:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <nlink+0x36>
    switch(nlink.io.state) {
        case NLINK_IO_STATE_ACTIVE:
            if (nlink.io.bit_cnt > 0) {
                if ( (nlink.io.bit_cnt == 9) || (nlink.io.tx_shift_reg & 1)) {
                    // Stop bit or 1-data bit
                    NLINK_IO_TX_PORT &= ~NLINK_IO_TX_PIN_MASK;
     3e4:	4c 98       	cbi	0x09, 4	; 9
     3e6:	6d cf       	rjmp	.-294    	; 0x2c2 <isr_nlink_io_on_timer+0x3e>
     3e8:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <nlink+0x36>
     3ec:	6a cf       	rjmp	.-300    	; 0x2c2 <isr_nlink_io_on_timer+0x3e>
        return;
    }

    if (bit_cnt == 9) {
        // Check STOP bit
        if (!bit_in) {
     3ee:	99 23       	and	r25, r25
     3f0:	f1 f2       	breq	.-68     	; 0x3ae <isr_nlink_io_on_timer+0x12a>
            isr_ha_nlink_io_recover();
        } else {
            if (nlink.io.rx_wr == sizeof(nlink.io.rx_buf)) {
     3f2:	e0 91 65 3e 	lds	r30, 0x3E65	; 0x803e65 <nlink+0x43>
     3f6:	ec 30       	cpi	r30, 0x0C	; 12
     3f8:	d1 f2       	breq	.-76     	; 0x3ae <isr_nlink_io_on_timer+0x12a>
                isr_ha_nlink_io_recover();
            } else {
                nlink.io.rx_buf[nlink.io.rx_wr++] = nlink.io.rx_shift_reg;
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	9e 0f       	add	r25, r30
     3fe:	90 93 65 3e 	sts	0x3E65, r25	; 0x803e65 <nlink+0x43>
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ee 5d       	subi	r30, 0xDE	; 222
     406:	f1 4c       	sbci	r31, 0xC1	; 193
     408:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <nlink+0x44>
     40c:	97 ab       	std	Z+55, r25	; 0x37
     40e:	95 cf       	rjmp	.-214    	; 0x33a <isr_nlink_io_on_timer+0xb6>
                nlink.io.tx_shift_reg = nlink.io.tx_buf[nlink.io.tx_rd++];
                // Start bit
                NLINK_IO_TX_PORT |= NLINK_IO_TX_PIN_MASK;
            } else if (nlink.io.tx_rd == nlink.io.tx_len) {
                // Check that transmitted header equals to received
                if ( nlink.io.rx_buf[0] == nlink.io.tx_buf[0] &&
     410:	20 91 5a 3e 	lds	r18, 0x3E5A	; 0x803e5a <nlink+0x38>
     414:	90 91 4b 3e 	lds	r25, 0x3E4B	; 0x803e4b <nlink+0x29>
     418:	29 13       	cpse	r18, r25
     41a:	bc cf       	rjmp	.-136    	; 0x394 <isr_nlink_io_on_timer+0x110>
                     nlink.io.rx_buf[1] == nlink.io.tx_buf[1]) {
                    // Transfer is OK
                    nlink.io.tx_rd = 0;
     41c:	10 92 56 3e 	sts	0x3E56, r1	; 0x803e56 <nlink+0x34>
                    nlink.io.tx_len = 0;
     420:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <nlink+0x35>
     424:	ba cf       	rjmp	.-140    	; 0x39a <isr_nlink_io_on_timer+0x116>

00000426 <isr_nlink_io_on_start_edge>:
}

void isr_nlink_io_on_start_edge ()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
     426:	80 91 48 3e 	lds	r24, 0x3E48	; 0x803e48 <nlink+0x26>
     42a:	88 23       	and	r24, r24
     42c:	79 f0       	breq	.+30     	; 0x44c <isr_nlink_io_on_start_edge+0x26>
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
        return;
    }

    NLINK_RX_INT_DISABLE;
     42e:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     432:	80 e2       	ldi	r24, 0x20	; 32
     434:	8b b9       	out	0x0b, r24	; 11
    nlink.io.is_rx_timer = 1;      // Next timer interrupt will be RX
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 49 3e 	sts	0x3E49, r24	; 0x803e49 <nlink+0x27>
    nlink.io.bit_cnt = 0;
     43c:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <nlink+0x45>
    nlink.io.state = NLINK_IO_STATE_ACTIVE;
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 48 3e 	sts	0x3E48, r24	; 0x803e48 <nlink+0x26>

    NLINK_IO_TIMER_ENABLE;
     446:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
     44a:	08 95       	ret

void isr_nlink_io_on_start_edge ()
{
    // Triggered on RX falling edge
    if (nlink.io.state == NLINK_IO_STATE_RECOVERING) {
        nlink.io.recover_timer = NLINK_IO_RECOVER_TIMER;
     44c:	80 e4       	ldi	r24, 0x40	; 64
     44e:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <nlink+0x46>
        return;
     452:	08 95       	ret

00000454 <ha_node_ledlight_on_param>:
#endif

uint16_t gus_trap_line;

void ha_node_ledlight_on_param (ha_node_ll_info_t *ll, uint8_t param_intensity_idx)
{ // LVL3 + 3 + 2
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	dc 01       	movw	r26, r24
    uint8_t led_mask = 1;
    node_t *node = ll->node;
     45a:	14 96       	adiw	r26, 0x04	; 4
     45c:	cd 91       	ld	r28, X+
     45e:	dc 91       	ld	r29, X
     460:	15 97       	sbiw	r26, 0x05	; 5
    uint8_t fadein_period = ll->cfg->fadein_period;
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	ed 91       	ld	r30, X+
     466:	fc 91       	ld	r31, X
     468:	13 97       	sbiw	r26, 0x03	; 3
     46a:	81 81       	ldd	r24, Z+1	; 0x01

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
     46c:	19 96       	adiw	r26, 0x09	; 9
     46e:	9c 91       	ld	r25, X
     470:	19 97       	sbiw	r26, 0x09	; 9
     472:	99 23       	and	r25, r25
     474:	11 f1       	breq	.+68     	; 0x4ba <ha_node_ledlight_on_param+0x66>
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	0a c0       	rjmp	.+20     	; 0x490 <ha_node_ledlight_on_param+0x3c>
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
            led->uc_on_intensity_idx : param_intensity_idx;

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
     47c:	23 2f       	mov	r18, r19
     47e:	21 83       	std	Z+1, r18	; 0x01
        led->uc_fade_timer = fadein_period;
     480:	84 83       	std	Z+4, r24	; 0x04
{ // LVL3 + 3 + 2
    uint8_t led_mask = 1;
    node_t *node = ll->node;
    uint8_t fadein_period = ll->cfg->fadein_period;

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
     482:	9f 5f       	subi	r25, 0xFF	; 255
     484:	44 0f       	add	r20, r20
     486:	19 96       	adiw	r26, 0x09	; 9
     488:	2c 91       	ld	r18, X
     48a:	19 97       	sbiw	r26, 0x09	; 9
     48c:	92 17       	cp	r25, r18
     48e:	a8 f4       	brcc	.+42     	; 0x4ba <ha_node_ledlight_on_param+0x66>
        led_info_t *led = &ll->leds[i];
     490:	1a 96       	adiw	r26, 0x0a	; 10
     492:	ed 91       	ld	r30, X+
     494:	fc 91       	ld	r31, X
     496:	1b 97       	sbiw	r26, 0x0b	; 11
     498:	26 e0       	ldi	r18, 0x06	; 6
     49a:	92 9f       	mul	r25, r18
     49c:	e0 0d       	add	r30, r0
     49e:	f1 1d       	adc	r31, r1
     4a0:	11 24       	eor	r1, r1
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
     4a2:	63 31       	cpi	r22, 0x13	; 19
     4a4:	41 f0       	breq	.+16     	; 0x4b6 <ha_node_ledlight_on_param+0x62>
     4a6:	36 2f       	mov	r19, r22
            led->uc_on_intensity_idx : param_intensity_idx;

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
     4a8:	17 96       	adiw	r26, 0x07	; 7
     4aa:	2c 91       	ld	r18, X
     4ac:	17 97       	sbiw	r26, 0x07	; 7
     4ae:	24 23       	and	r18, r20
     4b0:	29 f3       	breq	.-54     	; 0x47c <ha_node_ledlight_on_param+0x28>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	e4 cf       	rjmp	.-56     	; 0x47e <ha_node_ledlight_on_param+0x2a>

    for (uint8_t i = 0; i < ll->leds_num; i ++, led_mask <<= 1) {
        led_info_t *led = &ll->leds[i];
        // If intensity not specified, then use the current one
        // otherwise set explicitly specified intensity
        uint8_t intensity_idx = (param_intensity_idx == INTENSITIES_NUM) ?
     4b6:	32 81       	ldd	r19, Z+2	; 0x02
     4b8:	f7 cf       	rjmp	.-18     	; 0x4a8 <ha_node_ledlight_on_param+0x54>

        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
        led->uc_fade_timer = fadein_period;
    }

    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_ON;        // mode is not ON yet, but will be soon
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	8b 87       	std	Y+11, r24	; 0x0b
    ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     4be:	43 e0       	ldi	r20, 0x03	; 3
     4c0:	6f ef       	ldi	r22, 0xFF	; 255
     4c2:	ce 01       	movw	r24, r28
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
        led->uc_target_intensity_idx = led_mask & ll->disabled_mask ? 0 : intensity_idx;
        led->uc_fade_timer = fadein_period;
    }

    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_ON;        // mode is not ON yet, but will be soon
    ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     4c8:	4a ce       	rjmp	.-876    	; 0x15e <ha_nlink_node_send>

000004ca <ha_node_ledlight_off>:
}

#define ha_node_ledlight_on(ll) ha_node_ledlight_on_param(ll, INTENSITIES_NUM)

void ha_node_ledlight_off (ha_node_ll_info_t *node_ll)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	dc 01       	movw	r26, r24
    // LVL +2 +2    ha_node_ledlight_off 
    
    node_t *node = node_ll->node;
     4d0:	14 96       	adiw	r26, 0x04	; 4
     4d2:	cd 91       	ld	r28, X+
     4d4:	dc 91       	ld	r29, X
     4d6:	15 97       	sbiw	r26, 0x05	; 5
    uint8_t fadeout_period = node_ll->cfg->fadeout_period;
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	32 81       	ldd	r19, Z+2	; 0x02
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     4e2:	19 96       	adiw	r26, 0x09	; 9
     4e4:	8c 91       	ld	r24, X
     4e6:	19 97       	sbiw	r26, 0x09	; 9
     4e8:	88 23       	and	r24, r24
     4ea:	91 f0       	breq	.+36     	; 0x510 <ha_node_ledlight_off+0x46>
     4ec:	90 e0       	ldi	r25, 0x00	; 0
        led_info_t *led = &node_ll->leds[i];
     4ee:	1a 96       	adiw	r26, 0x0a	; 10
     4f0:	ed 91       	ld	r30, X+
     4f2:	fc 91       	ld	r31, X
     4f4:	1b 97       	sbiw	r26, 0x0b	; 11
     4f6:	86 e0       	ldi	r24, 0x06	; 6
     4f8:	98 9f       	mul	r25, r24
     4fa:	e0 0d       	add	r30, r0
     4fc:	f1 1d       	adc	r31, r1
     4fe:	11 24       	eor	r1, r1
        led->uc_target_intensity_idx = 0;
     500:	11 82       	std	Z+1, r1	; 0x01
        led->uc_fade_timer = fadeout_period;
     502:	34 83       	std	Z+4, r19	; 0x04
{
    // LVL +2 +2    ha_node_ledlight_off 
    
    node_t *node = node_ll->node;
    uint8_t fadeout_period = node_ll->cfg->fadeout_period;
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     504:	9f 5f       	subi	r25, 0xFF	; 255
     506:	19 96       	adiw	r26, 0x09	; 9
     508:	2c 91       	ld	r18, X
     50a:	19 97       	sbiw	r26, 0x09	; 9
     50c:	92 17       	cp	r25, r18
     50e:	78 f3       	brcs	.-34     	; 0x4ee <ha_node_ledlight_off+0x24>
        led_info_t *led = &node_ll->leds[i];
        led->uc_target_intensity_idx = 0;
        led->uc_fade_timer = fadeout_period;
    }
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_OFF;        // mode is not OFF yet, but will be soon
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	8b 87       	std	Y+11, r24	; 0x0b
    ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     514:	43 e0       	ldi	r20, 0x03	; 3
     516:	6f ef       	ldi	r22, 0xFF	; 255
     518:	ce 01       	movw	r24, r28
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
        led_info_t *led = &node_ll->leds[i];
        led->uc_target_intensity_idx = 0;
        led->uc_fade_timer = fadeout_period;
    }
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE] = LED_MODE_OFF;        // mode is not OFF yet, but will be soon
    ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     51e:	1f ce       	rjmp	.-962    	; 0x15e <ha_nlink_node_send>

00000520 <ledlight_on_rx>:
    } // End of action table traverse loop
    
}

void ledlight_on_rx (void *ctx, const uint8_t *buf_in)
{ 
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ac 01       	movw	r20, r24
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_LEDLIGHT) {
     52e:	eb 01       	movw	r28, r22
     530:	8b 81       	ldd	r24, Y+3	; 0x03
     532:	80 32       	cpi	r24, 0x20	; 32
     534:	c9 f1       	breq	.+114    	; 0x5a8 <ledlight_on_rx+0x88>
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_off(node_ll);
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {
     536:	80 33       	cpi	r24, 0x30	; 48
     538:	39 f0       	breq	.+14     	; 0x548 <ledlight_on_rx+0x28>
        // Unexpected event type
        return;
    }
    
    return;
}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	08 95       	ret
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t *)ctx;
    node_t *node = node_ll->node;
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];
     548:	8c 81       	ldd	r24, Y+4	; 0x04
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     54a:	88 23       	and	r24, r24
     54c:	b1 f3       	breq	.-20     	; 0x53a <ledlight_on_rx+0x1a>
    
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t *)ctx;
    node_t *node = node_ll->node;
    int i;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
     54e:	28 81       	ld	r18, Y
     550:	ea 01       	movw	r28, r20
     552:	08 81       	ld	r16, Y
     554:	19 81       	ldd	r17, Y+1	; 0x01
     556:	db 01       	movw	r26, r22
     558:	15 96       	adiw	r26, 0x05	; 5
     55a:	81 50       	subi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	06 96       	adiw	r24, 0x06	; 6
     560:	68 0f       	add	r22, r24
     562:	79 1f       	adc	r23, r25

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
            uint8_t sw_param = buf_in[NLINK_HDR_OFF_DATA + i];
     564:	3d 91       	ld	r19, X+

static void sw_behavior_control(ha_node_ll_info_t *node_ll, uint8_t addr_from, uint8_t sw_param)
{ // LVL - static
    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_ll_evt_action_t *evt_act = node_ll->evt_actions; 
     566:	f8 01       	movw	r30, r16
     568:	83 81       	ldd	r24, Z+3	; 0x03
     56a:	81 11       	cpse	r24, r1
     56c:	05 c0       	rjmp	.+10     	; 0x578 <ledlight_on_rx+0x58>
     56e:	12 c0       	rjmp	.+36     	; 0x594 <ledlight_on_rx+0x74>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {
     570:	35 96       	adiw	r30, 0x05	; 5

static void sw_behavior_control(ha_node_ll_info_t *node_ll, uint8_t addr_from, uint8_t sw_param)
{ // LVL - static
    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_ll_evt_action_t *evt_act = node_ll->evt_actions; 
     572:	93 81       	ldd	r25, Z+3	; 0x03
     574:	99 23       	and	r25, r25
     576:	71 f0       	breq	.+28     	; 0x594 <ledlight_on_rx+0x74>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        if (evt_act->evt_type != NODE_TYPE_SWITCH)
     578:	90 81       	ld	r25, Z
     57a:	90 33       	cpi	r25, 0x30	; 48
     57c:	c9 f7       	brne	.-14     	; 0x570 <ledlight_on_rx+0x50>
            continue;

        if (evt_act->evt_addr != addr_from && evt_act->evt_addr != NODE_ADDR_BC)
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	29 17       	cp	r18, r25
     582:	11 f0       	breq	.+4      	; 0x588 <ledlight_on_rx+0x68>
     584:	9f 3f       	cpi	r25, 0xFF	; 255
     586:	a1 f7       	brne	.-24     	; 0x570 <ledlight_on_rx+0x50>
            continue;

        if (evt_act->evt_param != sw_param) 
     588:	92 81       	ldd	r25, Z+2	; 0x02
     58a:	39 13       	cpse	r19, r25
     58c:	f1 cf       	rjmp	.-30     	; 0x570 <ledlight_on_rx+0x50>
            continue;

        /* Action is recognized by LL - postpone execution
           to the idle loop to reduce stack usage  */
        node_ll->action = evt_act;
     58e:	ea 01       	movw	r28, r20
     590:	ec 87       	std	Y+12, r30	; 0x0c
     592:	fd 87       	std	Y+13, r31	; 0x0d
        }

    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     594:	a6 17       	cp	r26, r22
     596:	b7 07       	cpc	r27, r23
     598:	29 f7       	brne	.-54     	; 0x564 <ledlight_on_rx+0x44>
        // Unexpected event type
        return;
    }
    
    return;
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	08 95       	ret
{ 
    // LVL3     +7  +2    ledlight_on_rx
    //   LVL4   +2  +2    ha_node_ledlight_off 
    
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t *)ctx;
    node_t *node = node_ll->node;
     5a8:	fa 01       	movw	r30, r20
     5aa:	e4 80       	ldd	r14, Z+4	; 0x04
     5ac:	f5 80       	ldd	r15, Z+5	; 0x05
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_LEDLIGHT) {
        // Direct LEDLIGHT state info. Typically received from user console
        // Address must be specified explicitly
        if (buf_in[NLINK_HDR_OFF_TO] != node_ll->node->addr) {
     5ae:	99 81       	ldd	r25, Y+1	; 0x01
     5b0:	e7 01       	movw	r28, r14
     5b2:	88 81       	ld	r24, Y
     5b4:	98 13       	cpse	r25, r24
     5b6:	c1 cf       	rjmp	.-126    	; 0x53a <ledlight_on_rx+0x1a>
            return;
        }

        node_ll->led_mode = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE];
     5b8:	fb 01       	movw	r30, r22
     5ba:	85 81       	ldd	r24, Z+5	; 0x05
     5bc:	ea 01       	movw	r28, r20
     5be:	88 87       	std	Y+8, r24	; 0x08
        node_ll->disabled_mask = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK];
     5c0:	86 81       	ldd	r24, Z+6	; 0x06
     5c2:	8f 83       	std	Y+7, r24	; 0x07
        for (i = 0; i < node_ll->leds_num; i++) {
     5c4:	99 85       	ldd	r25, Y+9	; 0x09
     5c6:	99 23       	and	r25, r25
     5c8:	c1 f0       	breq	.+48     	; 0x5fa <ledlight_on_rx+0xda>
     5ca:	eb 01       	movw	r28, r22
     5cc:	27 96       	adiw	r28, 0x07	; 7
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
            node_ll->leds[i].uc_on_intensity_idx = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i];
     5d6:	89 91       	ld	r24, Y+
     5d8:	fa 01       	movw	r30, r20
     5da:	02 85       	ldd	r16, Z+10	; 0x0a
     5dc:	13 85       	ldd	r17, Z+11	; 0x0b
     5de:	f8 01       	movw	r30, r16
     5e0:	ea 0f       	add	r30, r26
     5e2:	fb 1f       	adc	r31, r27
     5e4:	82 83       	std	Z+2, r24	; 0x02
            return;
        }

        node_ll->led_mode = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_MODE];
        node_ll->disabled_mask = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK];
        for (i = 0; i < node_ll->leds_num; i++) {
     5e6:	2f 5f       	subi	r18, 0xFF	; 255
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	fa 01       	movw	r30, r20
     5ec:	91 85       	ldd	r25, Z+9	; 0x09
     5ee:	16 96       	adiw	r26, 0x06	; 6
     5f0:	e9 2f       	mov	r30, r25
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	2e 17       	cp	r18, r30
     5f6:	3f 07       	cpc	r19, r31
     5f8:	74 f3       	brlt	.-36     	; 0x5d6 <ledlight_on_rx+0xb6>
     5fa:	8a 01       	movw	r16, r20
            node_ll->leds[i].uc_on_intensity_idx = buf_in[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i];
        }

        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + node_ll->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);
     5fc:	9e 5f       	subi	r25, 0xFE	; 254
     5fe:	49 2f       	mov	r20, r25
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	6b 5f       	subi	r22, 0xFB	; 251
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	c7 01       	movw	r24, r14
     608:	0b 96       	adiw	r24, 0x0b	; 11
     60a:	9a d7       	rcall	.+3892   	; 0x1540 <memcpy>

        if (node_ll->led_mode == LED_MODE_ON) {
     60c:	e8 01       	movw	r28, r16
     60e:	88 85       	ldd	r24, Y+8	; 0x08
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	59 f0       	breq	.+22     	; 0x62a <ledlight_on_rx+0x10a>
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	09 f0       	breq	.+2      	; 0x61a <ledlight_on_rx+0xfa>
     618:	90 cf       	rjmp	.-224    	; 0x53a <ledlight_on_rx+0x1a>
            ha_node_ledlight_off(node_ll);
     61a:	c8 01       	movw	r24, r16
        // Unexpected event type
        return;
    }
    
    return;
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_off(node_ll);
     628:	50 cf       	rjmp	.-352    	; 0x4ca <ha_node_ledlight_off>
        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + node_ll->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(node_ll);
     62a:	63 e1       	ldi	r22, 0x13	; 19
     62c:	c8 01       	movw	r24, r16
        // Unexpected event type
        return;
    }
    
    return;
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
        // Update node TX buffer to reflect changes in outgoing messages
        uint8_t ll_data_len = LL_DATA_OFF_INTENSITY0 + node_ll->leds_num;
        memcpy(&node->tx_buf[NLINK_HDR_OFF_DATA], &buf_in[NLINK_HDR_OFF_DATA], ll_data_len);

        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_on(node_ll);
     63a:	0c cf       	rjmp	.-488    	; 0x454 <ha_node_ledlight_on_param>

0000063c <ha_node_ledlight_dimm>:
/*
 * If dimm_idx == dimms_num then roll over dimm table,
 * otherwise set dimm_idx to the specified value
 */
void ha_node_ledlight_dimm (ha_node_ll_info_t *node_ll, uint8_t dimm_idx)
{ // LVL3    +11 +2
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24
  //   LVL4      +2  eeprom_read
    
    node_t *node = node_ll->node;
     654:	cc 80       	ldd	r12, Y+4	; 0x04
     656:	dd 80       	ldd	r13, Y+5	; 0x05
    uint8_t dimms_num = node_ll->cfg->dimms_num;
     658:	ea 81       	ldd	r30, Y+2	; 0x02
     65a:	fb 81       	ldd	r31, Y+3	; 0x03
     65c:	b6 80       	ldd	r11, Z+6	; 0x06
    uint8_t fadeout_period = node_ll->cfg->fadeout_period;
     65e:	a2 80       	ldd	r10, Z+2	; 0x02
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	88 23       	and	r24, r24
     664:	f1 f1       	breq	.+124    	; 0x6e2 <ha_node_ledlight_dimm+0xa6>
     666:	e6 2e       	mov	r14, r22
     668:	f1 2c       	mov	r15, r1
     66a:	91 2c       	mov	r9, r1
     66c:	12 c0       	rjmp	.+36     	; 0x692 <ha_node_ledlight_dimm+0x56>
                all_off ++;
            } else {
                led->uc_dimm_idx--;
            }
        } else {
            led->uc_dimm_idx = dimm_idx;
     66e:	e3 82       	std	Z+3, r14	; 0x03
     670:	9e 2d       	mov	r25, r14
        }
        
        led->uc_on_intensity_idx = eeprom_read_byte(node_ll->cfg->dimms + led->uc_dimm_idx);
     672:	ea 81       	ldd	r30, Y+2	; 0x02
     674:	fb 81       	ldd	r31, Y+3	; 0x03
     676:	27 81       	ldd	r18, Z+7	; 0x07
     678:	30 85       	ldd	r19, Z+8	; 0x08
     67a:	a9 01       	movw	r20, r18
     67c:	49 0f       	add	r20, r25
     67e:	51 1d       	adc	r21, r1
     680:	ca 01       	movw	r24, r20
     682:	72 d7       	rcall	.+3812   	; 0x1568 <eeprom_read_byte>
     684:	f8 01       	movw	r30, r16
     686:	82 83       	std	Z+2, r24	; 0x02
        led->uc_fade_timer = fadeout_period;
     688:	a4 82       	std	Z+4, r10	; 0x04
    node_t *node = node_ll->node;
    uint8_t dimms_num = node_ll->cfg->dimms_num;
    uint8_t fadeout_period = node_ll->cfg->fadeout_period;
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     68a:	f3 94       	inc	r15
     68c:	99 85       	ldd	r25, Y+9	; 0x09
     68e:	f9 16       	cp	r15, r25
     690:	98 f4       	brcc	.+38     	; 0x6b8 <ha_node_ledlight_dimm+0x7c>
        led_info_t *led = &node_ll->leds[i];
     692:	0a 85       	ldd	r16, Y+10	; 0x0a
     694:	1b 85       	ldd	r17, Y+11	; 0x0b
     696:	46 e0       	ldi	r20, 0x06	; 6
     698:	f4 9e       	mul	r15, r20
     69a:	00 0d       	add	r16, r0
     69c:	11 1d       	adc	r17, r1
     69e:	11 24       	eor	r1, r1
        if (dimm_idx == dimms_num) {
            // Rollover dimm table
            if (led->uc_dimm_idx == 0) {
     6a0:	f8 01       	movw	r30, r16
    uint8_t fadeout_period = node_ll->cfg->fadeout_period;
    uint8_t all_off = 0;

    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
        led_info_t *led = &node_ll->leds[i];
        if (dimm_idx == dimms_num) {
     6a2:	be 10       	cpse	r11, r14
     6a4:	e4 cf       	rjmp	.-56     	; 0x66e <ha_node_ledlight_dimm+0x32>
            // Rollover dimm table
            if (led->uc_dimm_idx == 0) {
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	91 11       	cpse	r25, r1
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <ha_node_ledlight_dimm+0x74>
                all_off ++;
     6ac:	93 94       	inc	r9
     6ae:	e1 cf       	rjmp	.-62     	; 0x672 <ha_node_ledlight_dimm+0x36>
            } else {
                led->uc_dimm_idx--;
     6b0:	91 50       	subi	r25, 0x01	; 1
     6b2:	f8 01       	movw	r30, r16
     6b4:	93 83       	std	Z+3, r25	; 0x03
     6b6:	dd cf       	rjmp	.-70     	; 0x672 <ha_node_ledlight_dimm+0x36>
        led->uc_on_intensity_idx = eeprom_read_byte(node_ll->cfg->dimms + led->uc_dimm_idx);
        led->uc_fade_timer = fadeout_period;
    }

    // Wrap around intensity only when LED are OFF
    if (all_off == node_ll->leds_num) {
     6b8:	99 16       	cp	r9, r25
     6ba:	f9 f0       	breq	.+62     	; 0x6fa <ha_node_ledlight_dimm+0xbe>
            led->uc_on_intensity_idx = last_intensity;
        }
    }

    // Update NLINK buffer
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     6bc:	99 23       	and	r25, r25
     6be:	89 f0       	breq	.+34     	; 0x6e2 <ha_node_ledlight_dimm+0xa6>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
        led_info_t *led = &node_ll->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
     6c2:	ea 85       	ldd	r30, Y+10	; 0x0a
     6c4:	fb 85       	ldd	r31, Y+11	; 0x0b
     6c6:	56 e0       	ldi	r21, 0x06	; 6
     6c8:	85 9f       	mul	r24, r21
     6ca:	e0 0d       	add	r30, r0
     6cc:	f1 1d       	adc	r31, r1
     6ce:	11 24       	eor	r1, r1
     6d0:	92 81       	ldd	r25, Z+2	; 0x02
     6d2:	f6 01       	movw	r30, r12
     6d4:	e8 0f       	add	r30, r24
     6d6:	f1 1d       	adc	r31, r1
     6d8:	95 87       	std	Z+13, r25	; 0x0d
            led->uc_on_intensity_idx = last_intensity;
        }
    }

    // Update NLINK buffer
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	99 85       	ldd	r25, Y+9	; 0x09
     6de:	89 17       	cp	r24, r25
     6e0:	80 f3       	brcs	.-32     	; 0x6c2 <ha_node_ledlight_dimm+0x86>
        led_info_t *led = &node_ll->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
    }
    return;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	08 95       	ret
        led->uc_fade_timer = fadeout_period;
    }

    // Wrap around intensity only when LED are OFF
    if (all_off == node_ll->leds_num) {
        uint8_t last_idx = dimms_num - 1;
     6fa:	ba 94       	dec	r11
        uint8_t last_intensity = eeprom_read_byte(node_ll->cfg->dimms + last_idx);
     6fc:	ea 81       	ldd	r30, Y+2	; 0x02
     6fe:	fb 81       	ldd	r31, Y+3	; 0x03
     700:	87 81       	ldd	r24, Z+7	; 0x07
     702:	90 85       	ldd	r25, Z+8	; 0x08
     704:	8b 0d       	add	r24, r11
     706:	91 1d       	adc	r25, r1
     708:	2f d7       	rcall	.+3678   	; 0x1568 <eeprom_read_byte>
        for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     70a:	99 20       	and	r9, r9
     70c:	51 f3       	breq	.-44     	; 0x6e2 <ha_node_ledlight_dimm+0xa6>
     70e:	20 e0       	ldi	r18, 0x00	; 0
            led_info_t *led = &node_ll->leds[i];
     710:	ea 85       	ldd	r30, Y+10	; 0x0a
     712:	fb 85       	ldd	r31, Y+11	; 0x0b
     714:	46 e0       	ldi	r20, 0x06	; 6
     716:	24 9f       	mul	r18, r20
     718:	e0 0d       	add	r30, r0
     71a:	f1 1d       	adc	r31, r1
     71c:	11 24       	eor	r1, r1
            led->uc_dimm_idx = last_idx;
     71e:	b3 82       	std	Z+3, r11	; 0x03
            led->uc_on_intensity_idx = last_intensity;
     720:	82 83       	std	Z+2, r24	; 0x02

    // Wrap around intensity only when LED are OFF
    if (all_off == node_ll->leds_num) {
        uint8_t last_idx = dimms_num - 1;
        uint8_t last_intensity = eeprom_read_byte(node_ll->cfg->dimms + last_idx);
        for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	99 85       	ldd	r25, Y+9	; 0x09
     726:	29 17       	cp	r18, r25
     728:	98 f3       	brcs	.-26     	; 0x710 <ha_node_ledlight_dimm+0xd4>
     72a:	c8 cf       	rjmp	.-112    	; 0x6bc <ha_node_ledlight_dimm+0x80>

0000072c <ha_node_ledlight_roll>:
    }
    return;
}

void ha_node_ledlight_roll(ha_node_ll_info_t *node_ll)
{ // LVL3     +4 +2
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	fc 01       	movw	r30, r24
  //   LVL4      +2 eeprom
  
    node_t *node = node_ll->node;

    if (node_ll->cfg->disable_masks == NULL || node_ll->cfg->disable_masks_num == 0)
     736:	a2 81       	ldd	r26, Z+2	; 0x02
     738:	b3 81       	ldd	r27, Z+3	; 0x03
     73a:	1a 96       	adiw	r26, 0x0a	; 10
     73c:	8d 91       	ld	r24, X+
     73e:	9c 91       	ld	r25, X
     740:	1b 97       	sbiw	r26, 0x0b	; 11
     742:	89 2b       	or	r24, r25
     744:	d9 f0       	breq	.+54     	; 0x77c <ha_node_ledlight_roll+0x50>
     746:	19 96       	adiw	r26, 0x09	; 9
     748:	8c 91       	ld	r24, X
     74a:	19 97       	sbiw	r26, 0x09	; 9
     74c:	88 23       	and	r24, r24
     74e:	b1 f0       	breq	.+44     	; 0x77c <ha_node_ledlight_roll+0x50>

void ha_node_ledlight_roll(ha_node_ll_info_t *node_ll)
{ // LVL3     +4 +2
  //   LVL4      +2 eeprom
  
    node_t *node = node_ll->node;
     750:	04 81       	ldd	r16, Z+4	; 0x04
     752:	15 81       	ldd	r17, Z+5	; 0x05

    if (node_ll->cfg->disable_masks == NULL || node_ll->cfg->disable_masks_num == 0)
        return;

    node_ll->disabled_idx++;
     754:	86 81       	ldd	r24, Z+6	; 0x06
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	86 83       	std	Z+6, r24	; 0x06
    if (node_ll->disabled_idx == node_ll->cfg->disable_masks_num) node_ll->disabled_idx = 0;
     75a:	19 96       	adiw	r26, 0x09	; 9
     75c:	9c 91       	ld	r25, X
     75e:	19 97       	sbiw	r26, 0x09	; 9
     760:	89 17       	cp	r24, r25
     762:	89 f0       	breq	.+34     	; 0x786 <ha_node_ledlight_roll+0x5a>
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	ef 01       	movw	r28, r30
    node_ll->disabled_mask = eeprom_read_byte(node_ll->cfg->disable_masks + node_ll->disabled_idx);
     768:	1a 96       	adiw	r26, 0x0a	; 10
     76a:	2d 91       	ld	r18, X+
     76c:	3c 91       	ld	r19, X
     76e:	1b 97       	sbiw	r26, 0x0b	; 11
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	f9 d6       	rcall	.+3570   	; 0x1568 <eeprom_read_byte>
     776:	8f 83       	std	Y+7, r24	; 0x07
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = node_ll->disabled_mask;
     778:	f8 01       	movw	r30, r16
     77a:	84 87       	std	Z+12, r24	; 0x0c
    
    return;
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

    if (node_ll->cfg->disable_masks == NULL || node_ll->cfg->disable_masks_num == 0)
        return;

    node_ll->disabled_idx++;
    if (node_ll->disabled_idx == node_ll->cfg->disable_masks_num) node_ll->disabled_idx = 0;
     786:	16 82       	std	Z+6, r1	; 0x06
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	ec cf       	rjmp	.-40     	; 0x766 <ha_node_ledlight_roll+0x3a>

0000078e <ha_node_ledlight_on_idle>:
    
    return;
}

void ha_node_ledlight_on_idle(ha_node_ll_info_t *node_ll)
{ // LVL2        +2  +2
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
  //   LVL3      +2  +2   ha_node_ledlight_on_param
  
    uint8_t act_type;
    uint8_t act_param;

    if (!node_ll->action) return;
     792:	dc 01       	movw	r26, r24
     794:	1c 96       	adiw	r26, 0x0c	; 12
     796:	ed 91       	ld	r30, X+
     798:	fc 91       	ld	r31, X
     79a:	1d 97       	sbiw	r26, 0x0d	; 13
     79c:	30 97       	sbiw	r30, 0x00	; 0
     79e:	99 f0       	breq	.+38     	; 0x7c6 <ha_node_ledlight_on_idle+0x38>
    
    act_type = node_ll->action->act_type;
     7a0:	23 81       	ldd	r18, Z+3	; 0x03
    act_param = node_ll->action->act_param;
     7a2:	64 81       	ldd	r22, Z+4	; 0x04
    
    node_ll->action = NULL;
     7a4:	1c 96       	adiw	r26, 0x0c	; 12
     7a6:	1d 92       	st	X+, r1
     7a8:	1c 92       	st	X, r1
     7aa:	1d 97       	sbiw	r26, 0x0d	; 13
    
    switch(act_type) {
     7ac:	23 30       	cpi	r18, 0x03	; 3
     7ae:	f9 f0       	breq	.+62     	; 0x7ee <ha_node_ledlight_on_idle+0x60>
     7b0:	68 f0       	brcs	.+26     	; 0x7cc <ha_node_ledlight_on_idle+0x3e>
     7b2:	ec 01       	movw	r28, r24
     7b4:	25 30       	cpi	r18, 0x05	; 5
     7b6:	91 f0       	breq	.+36     	; 0x7dc <ha_node_ledlight_on_idle+0x4e>
     7b8:	26 30       	cpi	r18, 0x06	; 6
     7ba:	29 f4       	brne	.+10     	; 0x7c6 <ha_node_ledlight_on_idle+0x38>
            node_ll->led_mode = LED_MODE_ON_TRANS;
            ha_node_ledlight_on(node_ll);
        }
        break;
    case LL_ACT_TYPE_ROLLDIMM:
        if (node_ll->led_mode == LED_MODE_ON) {
     7bc:	88 85       	ldd	r24, Y+8	; 0x08
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	51 f1       	breq	.+84     	; 0x816 <ha_node_ledlight_on_idle+0x88>
            ha_node_ledlight_dimm(node_ll, 0);
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
     7c2:	83 30       	cpi	r24, 0x03	; 3
     7c4:	01 f1       	breq	.+64     	; 0x806 <ha_node_ledlight_on_idle+0x78>
        ha_node_ledlight_on_param(node_ll, act_param);
        break;
    }

    return;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret
    act_type = node_ll->action->act_type;
    act_param = node_ll->action->act_param;
    
    node_ll->action = NULL;
    
    switch(act_type) {
     7cc:	21 30       	cpi	r18, 0x01	; 1
     7ce:	d9 f7       	brne	.-10     	; 0x7c6 <ha_node_ledlight_on_idle+0x38>
        node_ll->led_mode = LED_MODE_ON_TRANS;
        ha_node_ledlight_dimm(node_ll, act_param);
        ha_node_ledlight_on(node_ll);
        break;
    case LL_ACT_TYPE_ON:
        node_ll->led_mode = LED_MODE_ON_TRANS;
     7d0:	24 e0       	ldi	r18, 0x04	; 4
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 87       	std	Z+8, r18	; 0x08
        ha_node_ledlight_on_param(node_ll, act_param);
        break;
    }

    return;
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
        ha_node_ledlight_dimm(node_ll, act_param);
        ha_node_ledlight_on(node_ll);
        break;
    case LL_ACT_TYPE_ON:
        node_ll->led_mode = LED_MODE_ON_TRANS;
        ha_node_ledlight_on_param(node_ll, act_param);
     7da:	3c ce       	rjmp	.-904    	; 0x454 <ha_node_ledlight_on_param>
            ha_node_ledlight_roll(node_ll);
            ha_node_ledlight_on(node_ll);
        }
        break;
    case LL_ACT_TYPE_DIMM:
        node_ll->led_mode = LED_MODE_ON_TRANS;
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	88 87       	std	Y+8, r24	; 0x08
        ha_node_ledlight_dimm(node_ll, act_param);
     7e0:	cd 01       	movw	r24, r26
     7e2:	2c df       	rcall	.-424    	; 0x63c <ha_node_ledlight_dimm>
        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(node_ll, 0);
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(node_ll);
            ha_node_ledlight_on(node_ll);
     7e4:	63 e1       	ldi	r22, 0x13	; 19
     7e6:	ce 01       	movw	r24, r28
        ha_node_ledlight_on_param(node_ll, act_param);
        break;
    }

    return;
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(node_ll, 0);
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(node_ll);
            ha_node_ledlight_on(node_ll);
     7ec:	33 ce       	rjmp	.-922    	; 0x454 <ha_node_ledlight_on_param>
    
    node_ll->action = NULL;
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (node_ll->led_mode == LED_MODE_ON) {
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 85       	ldd	r18, Z+8	; 0x08
     7f2:	22 30       	cpi	r18, 0x02	; 2
     7f4:	59 f0       	breq	.+22     	; 0x80c <ha_node_ledlight_on_idle+0x7e>
            node_ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
     7f6:	23 30       	cpi	r18, 0x03	; 3
     7f8:	31 f7       	brne	.-52     	; 0x7c6 <ha_node_ledlight_on_idle+0x38>
            node_ll->led_mode = LED_MODE_ON_TRANS;
     7fa:	24 e0       	ldi	r18, 0x04	; 4
     7fc:	20 87       	std	Z+8, r18	; 0x08
            ha_node_ledlight_on(node_ll);
     7fe:	63 e1       	ldi	r22, 0x13	; 19
        ha_node_ledlight_on_param(node_ll, act_param);
        break;
    }

    return;
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
        if (node_ll->led_mode == LED_MODE_ON) {
            node_ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            node_ll->led_mode = LED_MODE_ON_TRANS;
            ha_node_ledlight_on(node_ll);
     804:	27 ce       	rjmp	.-946    	; 0x454 <ha_node_ledlight_on_param>
    case LL_ACT_TYPE_ROLLDIMM:
        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(node_ll, 0);
            ha_node_ledlight_on(node_ll);
        } else if (node_ll->led_mode == LED_MODE_OFF) {
            ha_node_ledlight_roll(node_ll);
     806:	cd 01       	movw	r24, r26
     808:	91 df       	rcall	.-222    	; 0x72c <ha_node_ledlight_roll>
     80a:	ec cf       	rjmp	.-40     	; 0x7e4 <ha_node_ledlight_on_idle+0x56>
    node_ll->action = NULL;
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (node_ll->led_mode == LED_MODE_ON) {
            node_ll->led_mode = LED_MODE_OFF_TRANS;
     80c:	25 e0       	ldi	r18, 0x05	; 5
     80e:	20 87       	std	Z+8, r18	; 0x08
        ha_node_ledlight_on_param(node_ll, act_param);
        break;
    }

    return;
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
    
    switch(act_type) {
    case LL_ACT_TYPE_TOGGLE:
        if (node_ll->led_mode == LED_MODE_ON) {
            node_ll->led_mode = LED_MODE_OFF_TRANS;
            ha_node_ledlight_off(node_ll);
     814:	5a ce       	rjmp	.-844    	; 0x4ca <ha_node_ledlight_off>
            ha_node_ledlight_on(node_ll);
        }
        break;
    case LL_ACT_TYPE_ROLLDIMM:
        if (node_ll->led_mode == LED_MODE_ON) {
            ha_node_ledlight_dimm(node_ll, 0);
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	cd 01       	movw	r24, r26
     81a:	10 df       	rcall	.-480    	; 0x63c <ha_node_ledlight_dimm>
     81c:	e3 cf       	rjmp	.-58     	; 0x7e4 <ha_node_ledlight_on_idle+0x56>

0000081e <ha_node_ledlight_create>:
    
    return;
}

ha_node_ll_info_t *ha_node_ledlight_create (const ha_node_ll_cfg_t *cfg, const ha_node_ll_evt_action_t *cfg_evt_actions)
{
     81e:	7f 92       	push	r7
     820:	8f 92       	push	r8
     822:	9f 92       	push	r9
     824:	af 92       	push	r10
     826:	bf 92       	push	r11
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	6c 01       	movw	r12, r24
     83a:	7b 01       	movw	r14, r22
    int i;
    led_info_t *leds = (led_info_t*)calloc(cfg->leds_num, sizeof(led_info_t));
     83c:	dc 01       	movw	r26, r24
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	bc 90       	ld	r11, X
     842:	66 e0       	ldi	r22, 0x06	; 6
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	8b 2d       	mov	r24, r11
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	3f d5       	rcall	.+2686   	; 0x12ca <calloc>
     84c:	ec 01       	movw	r28, r24
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
     84e:	6e e0       	ldi	r22, 0x0E	; 14
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	39 d5       	rcall	.+2674   	; 0x12ca <calloc>
     858:	8c 01       	movw	r16, r24
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
     85a:	f7 01       	movw	r30, r14
     85c:	83 81       	ldd	r24, Z+3	; 0x03
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
     85e:	81 11       	cpse	r24, r1
     860:	0d c0       	rjmp	.+26     	; 0x87c <ha_node_ledlight_create+0x5e>
     862:	14 c0       	rjmp	.+40     	; 0x88c <ha_node_ledlight_create+0x6e>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
     864:	85 30       	cpi	r24, 0x05	; 5
     866:	31 f4       	brne	.+12     	; 0x874 <ha_node_ledlight_create+0x56>
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
     868:	94 81       	ldd	r25, Z+4	; 0x04
     86a:	d6 01       	movw	r26, r12
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	8c 91       	ld	r24, X
     870:	89 17       	cp	r24, r25
     872:	48 f0       	brcs	.+18     	; 0x886 <ha_node_ledlight_create+0x68>
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {
     874:	35 96       	adiw	r30, 0x05	; 5
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
         evt_act->act_type != LL_ACT_TYPE_NONE;
     876:	83 81       	ldd	r24, Z+3	; 0x03
    ha_node_ll_info_t *node_ll = (ha_node_ll_info_t*)calloc(1, sizeof(ha_node_ll_info_t));
    node_t *node;
    uint8_t max_intensity;

    // Check configuration
    for( const ha_node_ll_evt_action_t *evt_act = cfg_evt_actions; 
     878:	88 23       	and	r24, r24
     87a:	41 f0       	breq	.+16     	; 0x88c <ha_node_ledlight_create+0x6e>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	91 f7       	brne	.-28     	; 0x864 <ha_node_ledlight_create+0x46>
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
                break;
            case LL_ACT_TYPE_ON: 
                if (evt_act->act_param > INTENSITIES_NUM) return NULL;
     880:	84 81       	ldd	r24, Z+4	; 0x04
     882:	84 31       	cpi	r24, 0x14	; 20
     884:	b8 f3       	brcs	.-18     	; 0x874 <ha_node_ledlight_create+0x56>
         evt_act->act_type != LL_ACT_TYPE_NONE;
         evt_act++ ) {

        switch (evt_act->act_type) {
            case LL_ACT_TYPE_DIMM:
                if (evt_act->act_param > cfg->dimms_num) return NULL;
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	71 c0       	rjmp	.+226    	; 0x96e <ha_node_ledlight_create+0x150>
            default:
                break;
        }
    }

    node_ll->evt_actions = cfg_evt_actions;
     88c:	f8 01       	movw	r30, r16
     88e:	e0 82       	st	Z, r14
     890:	f1 82       	std	Z+1, r15	; 0x01
    node_ll->cfg = cfg;
     892:	c2 82       	std	Z+2, r12	; 0x02
     894:	d3 82       	std	Z+3, r13	; 0x03
    node_ll->leds = leds;
     896:	c2 87       	std	Z+10, r28	; 0x0a
     898:	d3 87       	std	Z+11, r29	; 0x0b
    node_ll->leds_num = cfg->leds_num;
     89a:	b1 86       	std	Z+9, r11	; 0x09

    node = ha_nlink_node_register(cfg->node_addr, NODE_TYPE_LEDLIGHT, ledlight_on_rx, node_ll);
     89c:	98 01       	movw	r18, r16
     89e:	40 e9       	ldi	r20, 0x90	; 144
     8a0:	52 e0       	ldi	r21, 0x02	; 2
     8a2:	60 e2       	ldi	r22, 0x20	; 32
     8a4:	d6 01       	movw	r26, r12
     8a6:	8c 91       	ld	r24, X
     8a8:	01 dc       	rcall	.-2046   	; 0xac <ha_nlink_node_register>
     8aa:	5c 01       	movw	r10, r24
    node_ll->node = node;
     8ac:	e8 01       	movw	r28, r16
     8ae:	8c 83       	std	Y+4, r24	; 0x04
     8b0:	9d 83       	std	Y+5, r25	; 0x05

    // Switch LEDs off on startup
    node_ll->led_mode = LED_MODE_OFF_TRANS;
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	88 87       	std	Y+8, r24	; 0x08

    node_ll->disabled_idx = 0;                      // All Enabled
     8b6:	1e 82       	std	Y+6, r1	; 0x06
    node_ll->disabled_mask = eeprom_read_byte(cfg->disable_masks + node_ll->disabled_idx);
     8b8:	f6 01       	movw	r30, r12
     8ba:	82 85       	ldd	r24, Z+10	; 0x0a
     8bc:	93 85       	ldd	r25, Z+11	; 0x0b
     8be:	54 d6       	rcall	.+3240   	; 0x1568 <eeprom_read_byte>
     8c0:	8f 83       	std	Y+7, r24	; 0x07
    
    max_intensity = eeprom_read_byte(cfg->dimms + cfg->dimms_num - 1);  // Max intensity by default    
     8c2:	d6 01       	movw	r26, r12
     8c4:	16 96       	adiw	r26, 0x06	; 6
     8c6:	8c 91       	ld	r24, X
     8c8:	16 97       	sbiw	r26, 0x06	; 6
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	17 96       	adiw	r26, 0x07	; 7
     8d0:	2d 91       	ld	r18, X+
     8d2:	3c 91       	ld	r19, X
     8d4:	18 97       	sbiw	r26, 0x08	; 8
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	46 d6       	rcall	.+3212   	; 0x1568 <eeprom_read_byte>
     8dc:	78 2e       	mov	r7, r24
    
    for (i = 0; i < node_ll->leds_num; i++) {
     8de:	89 85       	ldd	r24, Y+9	; 0x09
     8e0:	88 23       	and	r24, r24
     8e2:	01 f1       	breq	.+64     	; 0x924 <ha_node_ledlight_create+0x106>
     8e4:	81 2c       	mov	r8, r1
     8e6:	91 2c       	mov	r9, r1
     8e8:	e1 2c       	mov	r14, r1
     8ea:	f1 2c       	mov	r15, r1
        led_info_t *led = &node_ll->leds[i];
     8ec:	d8 01       	movw	r26, r16
     8ee:	1a 96       	adiw	r26, 0x0a	; 10
     8f0:	cd 91       	ld	r28, X+
     8f2:	dc 91       	ld	r29, X
     8f4:	1b 97       	sbiw	r26, 0x0b	; 11
     8f6:	c8 0d       	add	r28, r8
     8f8:	d9 1d       	adc	r29, r9
        led->uc_on_intensity_idx = max_intensity;
     8fa:	7a 82       	std	Y+2, r7	; 0x02
        led->uc_ch_mask = eeprom_read_byte(cfg->leds_ch_masks + i);
     8fc:	f6 01       	movw	r30, r12
     8fe:	84 81       	ldd	r24, Z+4	; 0x04
     900:	95 81       	ldd	r25, Z+5	; 0x05
     902:	8e 0d       	add	r24, r14
     904:	9f 1d       	adc	r25, r15
     906:	30 d6       	rcall	.+3168   	; 0x1568 <eeprom_read_byte>
     908:	8d 83       	std	Y+5, r24	; 0x05
    node_ll->disabled_idx = 0;                      // All Enabled
    node_ll->disabled_mask = eeprom_read_byte(cfg->disable_masks + node_ll->disabled_idx);
    
    max_intensity = eeprom_read_byte(cfg->dimms + cfg->dimms_num - 1);  // Max intensity by default    
    
    for (i = 0; i < node_ll->leds_num; i++) {
     90a:	ff ef       	ldi	r31, 0xFF	; 255
     90c:	ef 1a       	sub	r14, r31
     90e:	ff 0a       	sbc	r15, r31
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	88 0e       	add	r8, r24
     914:	91 1c       	adc	r9, r1
     916:	d8 01       	movw	r26, r16
     918:	19 96       	adiw	r26, 0x09	; 9
     91a:	8c 91       	ld	r24, X
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	f9 06       	cpc	r15, r25
     922:	24 f3       	brlt	.-56     	; 0x8ec <ha_node_ledlight_create+0xce>
        led_info_t *led = &node_ll->leds[i];
        led->uc_on_intensity_idx = max_intensity;
        led->uc_ch_mask = eeprom_read_byte(cfg->leds_ch_masks + i);
    }

    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_LEDLIGHT;
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	e5 01       	movw	r28, r10
     928:	89 87       	std	Y+9, r24	; 0x09
    node->tx_buf[NLINK_HDR_OFF_LEN] = LL_DATA_OFF_INTENSITY0 + node_ll->leds_num;
     92a:	f8 01       	movw	r30, r16
     92c:	81 85       	ldd	r24, Z+9	; 0x09
     92e:	8e 5f       	subi	r24, 0xFE	; 254
     930:	8a 87       	std	Y+10, r24	; 0x0a
    // ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE     ] = LED_MODE_OFF;     // Is set unconditionally on every packet send
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = node_ll->disabled_mask;
     932:	87 81       	ldd	r24, Z+7	; 0x07
     934:	8c 87       	std	Y+12, r24	; 0x0c

    for (i = 0; i < node_ll->leds_num; i++) {
     936:	81 85       	ldd	r24, Z+9	; 0x09
     938:	88 23       	and	r24, r24
     93a:	b1 f0       	breq	.+44     	; 0x968 <ha_node_ledlight_create+0x14a>
     93c:	d5 01       	movw	r26, r10
     93e:	1d 96       	adiw	r26, 0x0d	; 13
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
        led_info_t *led = &node_ll->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
     948:	e8 01       	movw	r28, r16
     94a:	ea 85       	ldd	r30, Y+10	; 0x0a
     94c:	fb 85       	ldd	r31, Y+11	; 0x0b
     94e:	e4 0f       	add	r30, r20
     950:	f5 1f       	adc	r31, r21
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	8d 93       	st	X+, r24
    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_LEDLIGHT;
    node->tx_buf[NLINK_HDR_OFF_LEN] = LL_DATA_OFF_INTENSITY0 + node_ll->leds_num;
    // ll_node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_MODE     ] = LED_MODE_OFF;     // Is set unconditionally on every packet send
    node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_DIS_MASK ] = node_ll->disabled_mask;

    for (i = 0; i < node_ll->leds_num; i++) {
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	4a 5f       	subi	r20, 0xFA	; 250
     95c:	5f 4f       	sbci	r21, 0xFF	; 255
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	84 f3       	brlt	.-32     	; 0x948 <ha_node_ledlight_create+0x12a>
        led_info_t *led = &node_ll->leds[i];
        node->tx_buf[NLINK_HDR_OFF_DATA + LL_DATA_OFF_INTENSITY0 + i] = led->uc_on_intensity_idx;
    }

    ha_node_ledlight_off(node_ll);
     968:	c8 01       	movw	r24, r16
     96a:	af dd       	rcall	.-1186   	; 0x4ca <ha_node_ledlight_off>
    return node_ll;
     96c:	c8 01       	movw	r24, r16
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	9f 90       	pop	r9
     984:	8f 90       	pop	r8
     986:	7f 90       	pop	r7
     988:	08 95       	ret

0000098a <ha_node_ledlight_on_timer>:

void ha_node_ledlight_on_timer(ha_node_ll_info_t   *node_ll)
{ 
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
  
  
    uint8_t uc_target_intensity, uc_current_intensity;
    uint8_t uc_leds_steady = 1;

    if (node_ll == NULL) return;
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	c1 f1       	breq	.+112    	; 0xa06 <ha_node_ledlight_on_timer+0x7c>
     996:	8c 01       	movw	r16, r24

    // Loop over all LEDs
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     998:	dc 01       	movw	r26, r24
     99a:	19 96       	adiw	r26, 0x09	; 9
     99c:	9c 91       	ld	r25, X
     99e:	99 23       	and	r25, r25
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <ha_node_ledlight_on_timer+0x1a>
     9a2:	50 c0       	rjmp	.+160    	; 0xa44 <ha_node_ledlight_on_timer+0xba>
     9a4:	c0 e0       	ldi	r28, 0x00	; 0
     9a6:	21 e0       	ldi	r18, 0x01	; 1
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
                // FADE OUT
                uc_current_intensity --;
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
     9a8:	d2 e0       	ldi	r29, 0x02	; 2
     9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <ha_node_ledlight_on_timer+0x3c>
        // LEDs' intensity are in transition
        // check fade timer
        led->uc_fade_timer --;
        if ( led->uc_fade_timer == 0) {
            // Its time to update fade in/out
            if (uc_target_intensity > uc_current_intensity) {
     9ac:	68 17       	cp	r22, r24
     9ae:	80 f5       	brcc	.+96     	; 0xa10 <ha_node_ledlight_on_timer+0x86>
                // FADE IN
                uc_current_intensity ++;
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
     9b2:	d4 83       	std	Z+4, r29	; 0x04
                // FADE OUT
                uc_current_intensity --;
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
            }

            led->uc_current_intensity_idx = uc_current_intensity;
     9b4:	60 83       	st	Z, r22
            ha_node_ledlight_set_intensity(led->uc_ch_mask, uc_current_intensity);
     9b6:	85 81       	ldd	r24, Z+5	; 0x05
     9b8:	ed d3       	rcall	.+2010   	; 0x1194 <ha_node_ledlight_set_intensity>

        if (uc_target_intensity == uc_current_intensity) {
            continue;
        }

        uc_leds_steady = 0;
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	f8 01       	movw	r30, r16
     9be:	91 85       	ldd	r25, Z+9	; 0x09
    uint8_t uc_leds_steady = 1;

    if (node_ll == NULL) return;

    // Loop over all LEDs
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     9c0:	cf 5f       	subi	r28, 0xFF	; 255
     9c2:	c9 17       	cp	r28, r25
     9c4:	d0 f4       	brcc	.+52     	; 0x9fa <ha_node_ledlight_on_timer+0x70>
        led_info_t *led = &node_ll->leds[i];
     9c6:	d8 01       	movw	r26, r16
     9c8:	1a 96       	adiw	r26, 0x0a	; 10
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X
     9ce:	1b 97       	sbiw	r26, 0x0b	; 11
     9d0:	b6 e0       	ldi	r27, 0x06	; 6
     9d2:	cb 9f       	mul	r28, r27
     9d4:	e0 0d       	add	r30, r0
     9d6:	f1 1d       	adc	r31, r1
     9d8:	11 24       	eor	r1, r1

        uc_target_intensity = led->uc_target_intensity_idx;
     9da:	81 81       	ldd	r24, Z+1	; 0x01
        uc_current_intensity = led->uc_current_intensity_idx;
     9dc:	60 81       	ld	r22, Z

        if (uc_target_intensity == uc_current_intensity) {
     9de:	86 17       	cp	r24, r22
     9e0:	79 f3       	breq	.-34     	; 0x9c0 <ha_node_ledlight_on_timer+0x36>

        uc_leds_steady = 0;

        // LEDs' intensity are in transition
        // check fade timer
        led->uc_fade_timer --;
     9e2:	94 81       	ldd	r25, Z+4	; 0x04
     9e4:	91 50       	subi	r25, 0x01	; 1
     9e6:	94 83       	std	Z+4, r25	; 0x04
        if ( led->uc_fade_timer == 0) {
     9e8:	99 23       	and	r25, r25
     9ea:	01 f3       	breq	.-64     	; 0x9ac <ha_node_ledlight_on_timer+0x22>

        if (uc_target_intensity == uc_current_intensity) {
            continue;
        }

        uc_leds_steady = 0;
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	d8 01       	movw	r26, r16
     9f0:	19 96       	adiw	r26, 0x09	; 9
     9f2:	9c 91       	ld	r25, X
    uint8_t uc_leds_steady = 1;

    if (node_ll == NULL) return;

    // Loop over all LEDs
    for (uint8_t i = 0; i < node_ll->leds_num; i ++) {
     9f4:	cf 5f       	subi	r28, 0xFF	; 255
     9f6:	c9 17       	cp	r28, r25
     9f8:	30 f3       	brcs	.-52     	; 0x9c6 <ha_node_ledlight_on_timer+0x3c>
    } // End all LEDs loop

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (node_ll->led_mode == LED_MODE_ON_TRANS) {
     9fa:	f8 01       	movw	r30, r16
     9fc:	80 85       	ldd	r24, Z+8	; 0x08
     9fe:	84 30       	cpi	r24, 0x04	; 4
     a00:	b1 f0       	breq	.+44     	; 0xa2e <ha_node_ledlight_on_timer+0xa4>
        if (uc_leds_steady) {
            node_ll->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (node_ll->led_mode == LED_MODE_OFF_TRANS) {
     a02:	85 30       	cpi	r24, 0x05	; 5
     a04:	51 f0       	breq	.+20     	; 0xa1a <ha_node_ledlight_on_timer+0x90>
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret
            if (uc_target_intensity > uc_current_intensity) {
                // FADE IN
                uc_current_intensity ++;
                led->uc_fade_timer = LED_FADEIN_STEP_PERIOD;
            }
            else if (uc_target_intensity < uc_current_intensity) {
     a10:	86 17       	cp	r24, r22
     a12:	80 f6       	brcc	.-96     	; 0x9b4 <ha_node_ledlight_on_timer+0x2a>
                // FADE OUT
                uc_current_intensity --;
     a14:	61 50       	subi	r22, 0x01	; 1
                led->uc_fade_timer = LED_FADEOUT_STEP_PERIOD;
     a16:	d4 83       	std	Z+4, r29	; 0x04
     a18:	cd cf       	rjmp	.-102    	; 0x9b4 <ha_node_ledlight_on_timer+0x2a>
            node_ll->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (node_ll->led_mode == LED_MODE_OFF_TRANS) {
        if (uc_leds_steady) {
     a1a:	22 23       	and	r18, r18
     a1c:	a1 f3       	breq	.-24     	; 0xa06 <ha_node_ledlight_on_timer+0x7c>
            node_ll->led_mode = LED_MODE_OFF;
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	f8 01       	movw	r30, r16
     a22:	80 87       	std	Z+8, r24	; 0x08
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (node_ll->led_mode == LED_MODE_ON_TRANS) {
        if (uc_leds_steady) {
     a2e:	22 23       	and	r18, r18
     a30:	51 f3       	breq	.-44     	; 0xa06 <ha_node_ledlight_on_timer+0x7c>
            node_ll->led_mode = LED_MODE_ON;
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	d8 01       	movw	r26, r16
     a36:	18 96       	adiw	r26, 0x08	; 8
     a38:	8c 93       	st	X, r24
        }
        return;
    } // End of TRANSITION to OFF

    return;
}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret
    } // End all LEDs loop

    // ----------------------------------------------
    // --- Transient states
    // ----------------------------------------------
    if (node_ll->led_mode == LED_MODE_ON_TRANS) {
     a44:	d8 01       	movw	r26, r16
     a46:	18 96       	adiw	r26, 0x08	; 8
     a48:	8c 91       	ld	r24, X
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	91 f3       	breq	.-28     	; 0xa32 <ha_node_ledlight_on_timer+0xa8>
        if (uc_leds_steady) {
            node_ll->led_mode = LED_MODE_ON;
        }
    } // End of TRANSITION to ON

    else if (node_ll->led_mode == LED_MODE_OFF_TRANS) {
     a4e:	85 30       	cpi	r24, 0x05	; 5
     a50:	d1 f6       	brne	.-76     	; 0xa06 <ha_node_ledlight_on_timer+0x7c>
     a52:	e5 cf       	rjmp	.-54     	; 0xa1e <ha_node_ledlight_on_timer+0x94>

00000a54 <roll_on_rx>:
        return;       
    } // End of action table traverse loop
}

void roll_on_rx (void *ctx, const uint8_t *buf_in)
{ 
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
    ha_node_roll_info_t *roll_node = (ha_node_roll_info_t *)ctx;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_ROLL) {
     a62:	db 01       	movw	r26, r22
     a64:	13 96       	adiw	r26, 0x03	; 3
     a66:	8c 91       	ld	r24, X
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	80 36       	cpi	r24, 0x60	; 96
     a6c:	09 f4       	brne	.+2      	; 0xa70 <roll_on_rx+0x1c>
     a6e:	45 c0       	rjmp	.+138    	; 0xafa <roll_on_rx+0xa6>
        }
        
        roll_node->trgt_mode = buf_in[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE];
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
        
    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {
     a70:	80 33       	cpi	r24, 0x30	; 48
     a72:	39 f0       	breq	.+14     	; 0xa82 <roll_on_rx+0x2e>
        // Unexpected event type
        return;
    }
    
    return;
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret
void roll_on_rx (void *ctx, const uint8_t *buf_in)
{ 
    ha_node_roll_info_t *roll_node = (ha_node_roll_info_t *)ctx;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];
     a82:	fb 01       	movw	r30, r22
     a84:	44 81       	ldd	r20, Z+4	; 0x04
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
        
    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     a86:	44 23       	and	r20, r20
     a88:	a9 f3       	breq	.-22     	; 0xa74 <roll_on_rx+0x20>

void roll_on_rx (void *ctx, const uint8_t *buf_in)
{ 
    ha_node_roll_info_t *roll_node = (ha_node_roll_info_t *)ctx;

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
     a8a:	30 81       	ld	r19, Z
     a8c:	08 81       	ld	r16, Y
     a8e:	19 81       	ldd	r17, Y+1	; 0x01
     a90:	d8 01       	movw	r26, r16
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	8c 91       	ld	r24, X
     a96:	db 01       	movw	r26, r22
     a98:	15 96       	adiw	r26, 0x05	; 5
     a9a:	41 50       	subi	r20, 0x01	; 1
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	4a 5f       	subi	r20, 0xFA	; 250
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	64 0f       	add	r22, r20
     aa4:	75 1f       	adc	r23, r21
       
        roll_node->trgt_mode =
            (evt_act->act_type == ROLL_ACT_TYPE_UP)   ? ROLL_MODE_UP :
            (evt_act->act_type == ROLL_ACT_TYPE_DOWN) ? ROLL_MODE_DOWN : ROLL_MODE_STOP;
        
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
     aa6:	9a e0       	ldi	r25, 0x0A	; 10
     aa8:	e9 2e       	mov	r14, r25
     aaa:	f1 2c       	mov	r15, r1
        
    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
            uint8_t sw_param = buf_in[NLINK_HDR_OFF_DATA + i];
     aac:	4d 91       	ld	r20, X+
#endif

static void roll_sw_behavior_control(ha_node_roll_info_t *roll_node, uint8_t addr_from, uint8_t sw_param)
{    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_roll_evt_action_t *evt_act = roll_node->cfg_evt_actions; 
     aae:	88 23       	and	r24, r24
     ab0:	d1 f0       	breq	.+52     	; 0xae6 <roll_on_rx+0x92>
     ab2:	98 2f       	mov	r25, r24
     ab4:	f8 01       	movw	r30, r16
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <roll_on_rx+0x6c>
         evt_act->act_type != ROLL_ACT_TYPE_NONE;
         evt_act++ ) {
     ab8:	35 96       	adiw	r30, 0x05	; 5

static void roll_sw_behavior_control(ha_node_roll_info_t *roll_node, uint8_t addr_from, uint8_t sw_param)
{    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_roll_evt_action_t *evt_act = roll_node->cfg_evt_actions; 
         evt_act->act_type != ROLL_ACT_TYPE_NONE;
     aba:	93 81       	ldd	r25, Z+3	; 0x03
#endif

static void roll_sw_behavior_control(ha_node_roll_info_t *roll_node, uint8_t addr_from, uint8_t sw_param)
{    
    // Traverse over action table and check all entries of type SWITCH
    for( const ha_node_roll_evt_action_t *evt_act = roll_node->cfg_evt_actions; 
     abc:	99 23       	and	r25, r25
     abe:	99 f0       	breq	.+38     	; 0xae6 <roll_on_rx+0x92>
         evt_act->act_type != ROLL_ACT_TYPE_NONE;
         evt_act++ ) {

        if (evt_act->evt_type != NODE_TYPE_SWITCH)
     ac0:	20 81       	ld	r18, Z
     ac2:	20 33       	cpi	r18, 0x30	; 48
     ac4:	c9 f7       	brne	.-14     	; 0xab8 <roll_on_rx+0x64>
            continue;

        if (evt_act->evt_addr != addr_from && evt_act->evt_addr != NODE_ADDR_BC)
     ac6:	21 81       	ldd	r18, Z+1	; 0x01
     ac8:	32 17       	cp	r19, r18
     aca:	11 f0       	breq	.+4      	; 0xad0 <roll_on_rx+0x7c>
     acc:	2f 3f       	cpi	r18, 0xFF	; 255
     ace:	a1 f7       	brne	.-24     	; 0xab8 <roll_on_rx+0x64>
            continue;

        if (evt_act->evt_param != sw_param) 
     ad0:	22 81       	ldd	r18, Z+2	; 0x02
     ad2:	42 13       	cpse	r20, r18
     ad4:	f1 cf       	rjmp	.-30     	; 0xab8 <roll_on_rx+0x64>
            continue;
       
        roll_node->trgt_mode =
     ad6:	91 30       	cpi	r25, 0x01	; 1
     ad8:	01 f1       	breq	.+64     	; 0xb1a <roll_on_rx+0xc6>
     ada:	92 30       	cpi	r25, 0x02	; 2
     adc:	09 f0       	breq	.+2      	; 0xae0 <roll_on_rx+0x8c>
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9f 83       	std	Y+7, r25	; 0x07
            (evt_act->act_type == ROLL_ACT_TYPE_UP)   ? ROLL_MODE_UP :
            (evt_act->act_type == ROLL_ACT_TYPE_DOWN) ? ROLL_MODE_DOWN : ROLL_MODE_STOP;
        
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
     ae2:	e8 86       	std	Y+8, r14	; 0x08
     ae4:	f9 86       	std	Y+9, r15	; 0x09
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
        
    } else if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_SWITCH) {

        // Switch event
        for (uint8_t i = 0; i < len; i++) {
     ae6:	a6 17       	cp	r26, r22
     ae8:	b7 07       	cpc	r27, r23
     aea:	01 f7       	brne	.-64     	; 0xaac <roll_on_rx+0x58>
        // Unexpected event type
        return;
    }
    
    return;
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	08 95       	ret

    uint8_t addr_from = buf_in[NLINK_HDR_OFF_FROM];
    uint8_t len = buf_in[NLINK_HDR_OFF_LEN];

    if (buf_in[NLINK_HDR_OFF_TYPE] == NODE_TYPE_ROLL) {
        if (buf_in[NLINK_HDR_OFF_TO] != roll_node->node->addr) {
     afa:	ec 81       	ldd	r30, Y+4	; 0x04
     afc:	fd 81       	ldd	r31, Y+5	; 0x05
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	9c 91       	ld	r25, X
     b02:	11 97       	sbiw	r26, 0x01	; 1
     b04:	80 81       	ld	r24, Z
     b06:	98 13       	cpse	r25, r24
     b08:	b5 cf       	rjmp	.-150    	; 0xa74 <roll_on_rx+0x20>
            return;
        }
        
        roll_node->trgt_mode = buf_in[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE];
     b0a:	15 96       	adiw	r26, 0x05	; 5
     b0c:	8c 91       	ld	r24, X
     b0e:	8f 83       	std	Y+7, r24	; 0x07
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	88 87       	std	Y+8, r24	; 0x08
     b16:	99 87       	std	Y+9, r25	; 0x09
     b18:	ad cf       	rjmp	.-166    	; 0xa74 <roll_on_rx+0x20>
            continue;

        if (evt_act->evt_param != sw_param) 
            continue;
       
        roll_node->trgt_mode =
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	e1 cf       	rjmp	.-62     	; 0xae0 <roll_on_rx+0x8c>

00000b1e <ha_node_roll_create>:
    
    return;
}

ha_node_roll_info_t *ha_node_roll_create (const ha_node_roll_cfg_t *cfg, const ha_node_roll_evt_action_t *cfg_evt_actions)
{
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	8c 01       	movw	r16, r24
     b32:	7b 01       	movw	r14, r22
    roll_info_t *rolls = (roll_info_t*)calloc(cfg->rolls_num, sizeof(roll_info_t));
     b34:	fc 01       	movw	r30, r24
     b36:	b1 80       	ldd	r11, Z+1	; 0x01
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	8b 2d       	mov	r24, r11
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	c4 d3       	rcall	.+1928   	; 0x12ca <calloc>
     b42:	6c 01       	movw	r12, r24
    ha_node_roll_info_t *roll_node = (ha_node_roll_info_t*)calloc(1, sizeof(ha_node_roll_info_t));
     b44:	6d e0       	ldi	r22, 0x0D	; 13
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	be d3       	rcall	.+1916   	; 0x12ca <calloc>
     b4e:	ec 01       	movw	r28, r24
    node_t *node;

    // Check configuration
    for( const ha_node_roll_evt_action_t *evt_act = cfg_evt_actions; 
     b50:	f7 01       	movw	r30, r14
     b52:	83 81       	ldd	r24, Z+3	; 0x03
     b54:	88 23       	and	r24, r24
     b56:	21 f0       	breq	.+8      	; 0xb60 <ha_node_roll_create+0x42>
         evt_act->act_type != ROLL_ACT_TYPE_NONE;
         evt_act++ ) {
     b58:	35 96       	adiw	r30, 0x05	; 5
    roll_info_t *rolls = (roll_info_t*)calloc(cfg->rolls_num, sizeof(roll_info_t));
    ha_node_roll_info_t *roll_node = (ha_node_roll_info_t*)calloc(1, sizeof(ha_node_roll_info_t));
    node_t *node;

    // Check configuration
    for( const ha_node_roll_evt_action_t *evt_act = cfg_evt_actions; 
     b5a:	83 81       	ldd	r24, Z+3	; 0x03
     b5c:	81 11       	cpse	r24, r1
     b5e:	fc cf       	rjmp	.-8      	; 0xb58 <ha_node_roll_create+0x3a>
            default:
                break;
        }
    }

    roll_node->cfg_evt_actions = cfg_evt_actions;
     b60:	e8 82       	st	Y, r14
     b62:	f9 82       	std	Y+1, r15	; 0x01
    roll_node->cfg = cfg;
     b64:	0a 83       	std	Y+2, r16	; 0x02
     b66:	1b 83       	std	Y+3, r17	; 0x03
    roll_node->rolls = rolls;
     b68:	cb 86       	std	Y+11, r12	; 0x0b
     b6a:	dc 86       	std	Y+12, r13	; 0x0c
    roll_node->rolls_num = cfg->rolls_num;
     b6c:	ba 86       	std	Y+10, r11	; 0x0a

    node = ha_nlink_node_register(cfg->node_addr, NODE_TYPE_ROLL, roll_on_rx, roll_node);
     b6e:	9e 01       	movw	r18, r28
     b70:	4a e2       	ldi	r20, 0x2A	; 42
     b72:	55 e0       	ldi	r21, 0x05	; 5
     b74:	60 e6       	ldi	r22, 0x60	; 96
     b76:	f8 01       	movw	r30, r16
     b78:	80 81       	ld	r24, Z
     b7a:	98 da       	rcall	.-2768   	; 0xac <ha_nlink_node_register>
    roll_node->node = node;
     b7c:	8c 83       	std	Y+4, r24	; 0x04
     b7e:	9d 83       	std	Y+5, r25	; 0x05

    roll_node->curr_mode = -1;
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	2e 83       	std	Y+6, r18	; 0x06
    roll_node->trgt_mode = ROLL_MODE_STOP;
     b84:	1f 82       	std	Y+7, r1	; 0x07
    roll_node->mode_change_delay = 0;
     b86:	18 86       	std	Y+8, r1	; 0x08
     b88:	19 86       	std	Y+9, r1	; 0x09

    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_ROLL;
     b8a:	20 e6       	ldi	r18, 0x60	; 96
     b8c:	fc 01       	movw	r30, r24
     b8e:	21 87       	std	Z+9, r18	; 0x09
    node->tx_buf[NLINK_HDR_OFF_LEN] = ROLL_DATA_OFF_MODE + roll_node->rolls_num;
     b90:	2a 85       	ldd	r18, Y+10	; 0x0a
     b92:	22 87       	std	Z+10, r18	; 0x0a
    // node->tx_buf[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE     ] = xxx;     // Is set unconditionally on every packet send

    return roll_node;
}
     b94:	ce 01       	movw	r24, r28
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	08 95       	ret

00000baa <ha_node_roll_on_timer>:

void ha_node_roll_on_timer(ha_node_roll_info_t *roll_node)
{ 
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
    uint8_t i;
    
    if (roll_node == NULL) return;
     bb2:	89 2b       	or	r24, r25
     bb4:	a1 f1       	breq	.+104    	; 0xc1e <ha_node_roll_on_timer+0x74>

    if (roll_node->curr_mode == roll_node->trgt_mode) return;
     bb6:	2e 81       	ldd	r18, Y+6	; 0x06
     bb8:	6f 81       	ldd	r22, Y+7	; 0x07
     bba:	26 17       	cp	r18, r22
     bbc:	81 f1       	breq	.+96     	; 0xc1e <ha_node_roll_on_timer+0x74>
    
    if (roll_node->mode_change_delay) {
     bbe:	88 85       	ldd	r24, Y+8	; 0x08
     bc0:	99 85       	ldd	r25, Y+9	; 0x09
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	49 f5       	brne	.+82     	; 0xc18 <ha_node_roll_on_timer+0x6e>
        roll_node->mode_change_delay --;
        return;
    }

    if (roll_node->curr_mode == ROLL_MODE_STOP) {
     bc6:	21 11       	cpse	r18, r1
     bc8:	2e c0       	rjmp	.+92     	; 0xc26 <ha_node_roll_on_timer+0x7c>
        roll_node->curr_mode = roll_node->trgt_mode;
     bca:	6e 83       	std	Y+6, r22	; 0x06
        
        // Force stop after some time        
        roll_node->trgt_mode = ROLL_MODE_STOP;
     bcc:	1f 82       	std	Y+7, r1	; 0x07
        roll_node->mode_change_delay = roll_node->cfg->active_timeout;
     bce:	ea 81       	ldd	r30, Y+2	; 0x02
     bd0:	fb 81       	ldd	r31, Y+3	; 0x03
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	95 81       	ldd	r25, Z+5	; 0x05
     bd6:	88 87       	std	Y+8, r24	; 0x08
     bd8:	99 87       	std	Y+9, r25	; 0x09
        // Stop before direction change
        roll_node->curr_mode = ROLL_MODE_STOP;
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
    }
    
    for (i = 0; i < roll_node->rolls_num; i++) {
     bda:	8a 85       	ldd	r24, Y+10	; 0x0a
     bdc:	88 23       	and	r24, r24
     bde:	89 f0       	breq	.+34     	; 0xc02 <ha_node_roll_on_timer+0x58>
     be0:	10 e0       	ldi	r17, 0x00	; 0
        ha_node_roll_set_mode(&roll_node->cfg->ee_ch_mask[i], roll_node->curr_mode);
     be2:	ea 81       	ldd	r30, Y+2	; 0x02
     be4:	fb 81       	ldd	r31, Y+3	; 0x03
     be6:	81 2f       	mov	r24, r17
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	33 81       	ldd	r19, Z+3	; 0x03
     bf2:	82 0f       	add	r24, r18
     bf4:	93 1f       	adc	r25, r19
     bf6:	98 d2       	rcall	.+1328   	; 0x1128 <ha_node_roll_set_mode>
        // Stop before direction change
        roll_node->curr_mode = ROLL_MODE_STOP;
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
    }
    
    for (i = 0; i < roll_node->rolls_num; i++) {
     bf8:	1f 5f       	subi	r17, 0xFF	; 255
     bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bfc:	6e 81       	ldd	r22, Y+6	; 0x06
     bfe:	18 17       	cp	r17, r24
     c00:	80 f3       	brcs	.-32     	; 0xbe2 <ha_node_roll_on_timer+0x38>
        ha_node_roll_set_mode(&roll_node->cfg->ee_ch_mask[i], roll_node->curr_mode);
    }
        
    roll_node->node->tx_buf[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE] = roll_node->curr_mode;
     c02:	ec 81       	ldd	r30, Y+4	; 0x04
     c04:	fd 81       	ldd	r31, Y+5	; 0x05
     c06:	63 87       	std	Z+11, r22	; 0x0b
    ha_nlink_node_send(roll_node->node, NODE_ADDR_BC, NLINK_CMD_INFO);
     c08:	43 e0       	ldi	r20, 0x03	; 3
     c0a:	6f ef       	ldi	r22, 0xFF	; 255
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    
    return;
}    
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
    for (i = 0; i < roll_node->rolls_num; i++) {
        ha_node_roll_set_mode(&roll_node->cfg->ee_ch_mask[i], roll_node->curr_mode);
    }
        
    roll_node->node->tx_buf[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE] = roll_node->curr_mode;
    ha_nlink_node_send(roll_node->node, NODE_ADDR_BC, NLINK_CMD_INFO);
     c16:	a3 ca       	rjmp	.-2746   	; 0x15e <ha_nlink_node_send>
    if (roll_node == NULL) return;

    if (roll_node->curr_mode == roll_node->trgt_mode) return;
    
    if (roll_node->mode_change_delay) {
        roll_node->mode_change_delay --;
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	88 87       	std	Y+8, r24	; 0x08
     c1c:	99 87       	std	Y+9, r25	; 0x09
        
    roll_node->node->tx_buf[NLINK_HDR_OFF_DATA + ROLL_DATA_OFF_MODE] = roll_node->curr_mode;
    ha_nlink_node_send(roll_node->node, NODE_ADDR_BC, NLINK_CMD_INFO);
    
    return;
}    
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	08 95       	ret
        // Force stop after some time        
        roll_node->trgt_mode = ROLL_MODE_STOP;
        roll_node->mode_change_delay = roll_node->cfg->active_timeout;
    } else {
        // Stop before direction change
        roll_node->curr_mode = ROLL_MODE_STOP;
     c26:	1e 82       	std	Y+6, r1	; 0x06
        roll_node->mode_change_delay = ROLL_SWITCH_DELAY;
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	88 87       	std	Y+8, r24	; 0x08
     c2e:	99 87       	std	Y+9, r25	; 0x09
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	d3 cf       	rjmp	.-90     	; 0xbda <ha_node_roll_on_timer+0x30>

00000c34 <switch_on_rx>:
#define SW_PIN_RELEASED 1

#define SW_TYPE_BUTT   2

void switch_on_rx(void *ctx, const uint8_t *buf_in)
{
     c34:	08 95       	ret

00000c36 <ha_node_switch_create>:
    // Nothing to do here. Switch is neither
    // controllable nor configurable
}

ha_node_sw_info_t *ha_node_switch_create (const ha_node_sw_cfg_t *cfg)
{
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	7c 01       	movw	r14, r24
    switch_info_t *sw;
    ha_node_sw_info_t *node_sw;
    node_t *node;
    uint8_t node_addr = eeprom_read_byte(&cfg->node_addr);
     c48:	8f d4       	rcall	.+2334   	; 0x1568 <eeprom_read_byte>
     c4a:	c8 2e       	mov	r12, r24
    uint8_t sw_num = eeprom_read_byte(&cfg->switches_num);
     c4c:	c7 01       	movw	r24, r14
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	8b d4       	rcall	.+2326   	; 0x1568 <eeprom_read_byte>
     c52:	c8 2f       	mov	r28, r24

    sw = (switch_info_t*)calloc(sw_num, sizeof(switch_info_t));            /* 7B */
     c54:	67 e0       	ldi	r22, 0x07	; 7
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	37 d3       	rcall	.+1646   	; 0x12ca <calloc>
     c5c:	d8 2e       	mov	r13, r24
     c5e:	d9 2f       	mov	r29, r25
    node_sw = (ha_node_sw_info_t*)calloc(1, sizeof(ha_node_sw_info_t));    /* 7B */
     c60:	67 e0       	ldi	r22, 0x07	; 7
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	30 d3       	rcall	.+1632   	; 0x12ca <calloc>
     c6a:	8c 01       	movw	r16, r24

    node = ha_nlink_node_register(node_addr, NODE_TYPE_SWITCH, switch_on_rx, NULL);
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e1       	ldi	r20, 0x1A	; 26
     c72:	56 e0       	ldi	r21, 0x06	; 6
     c74:	60 e3       	ldi	r22, 0x30	; 48
     c76:	8c 2d       	mov	r24, r12
     c78:	19 da       	rcall	.-3022   	; 0xac <ha_nlink_node_register>
     c7a:	dc 01       	movw	r26, r24

    node_sw->cfg = cfg;
     c7c:	f8 01       	movw	r30, r16
     c7e:	e0 82       	st	Z, r14
     c80:	f1 82       	std	Z+1, r15	; 0x01
    node_sw->switches_num = sw_num;
     c82:	c4 83       	std	Z+4, r28	; 0x04
    node_sw->sw = sw;
     c84:	d5 82       	std	Z+5, r13	; 0x05
     c86:	d6 83       	std	Z+6, r29	; 0x06
    node_sw->node = node;
     c88:	82 83       	std	Z+2, r24	; 0x02
     c8a:	93 83       	std	Z+3, r25	; 0x03
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
     c8c:	cc 23       	and	r28, r28
     c8e:	c1 f0       	breq	.+48     	; 0xcc0 <ha_node_switch_create+0x8a>
     c90:	ed 2d       	mov	r30, r13
     c92:	fd 2f       	mov	r31, r29
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
        sw[uc_i].uc_prev_pin = SW_PIN_RELEASED;
     c98:	91 e0       	ldi	r25, 0x01	; 1
        sw[uc_i].uc_prev_sw = SW_PIN_RELEASED;
        sw[uc_i].uc_hold_timer = 0;
        sw[uc_i].uc_debounce_timer = 0;
        sw[uc_i].uc_pin_mask = _BV(uc_i);
     c9a:	61 e0       	ldi	r22, 0x01	; 1
        sw[uc_i].uc_switch_type = SW_TYPE_BUTT;       // mark all switches as a button
     c9c:	52 e0       	ldi	r21, 0x02	; 2
    node_sw->sw = sw;
    node_sw->node = node;
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
        sw[uc_i].uc_prev_pin = SW_PIN_RELEASED;
     c9e:	91 83       	std	Z+1, r25	; 0x01
        sw[uc_i].uc_prev_sw = SW_PIN_RELEASED;
     ca0:	92 83       	std	Z+2, r25	; 0x02
        sw[uc_i].uc_hold_timer = 0;
     ca2:	13 82       	std	Z+3, r1	; 0x03
        sw[uc_i].uc_debounce_timer = 0;
     ca4:	14 82       	std	Z+4, r1	; 0x04
        sw[uc_i].uc_pin_mask = _BV(uc_i);
     ca6:	46 2f       	mov	r20, r22
     ca8:	02 2e       	mov	r0, r18
     caa:	01 c0       	rjmp	.+2      	; 0xcae <ha_node_switch_create+0x78>
     cac:	44 0f       	add	r20, r20
     cae:	0a 94       	dec	r0
     cb0:	ea f7       	brpl	.-6      	; 0xcac <ha_node_switch_create+0x76>
     cb2:	45 83       	std	Z+5, r20	; 0x05
        sw[uc_i].uc_switch_type = SW_TYPE_BUTT;       // mark all switches as a button
     cb4:	56 83       	std	Z+6, r21	; 0x06
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	37 96       	adiw	r30, 0x07	; 7
    node_sw->switches_num = sw_num;
    node_sw->sw = sw;
    node_sw->node = node;
    
    // --- SWITCHES initialize ---
    for (uint8_t uc_i = 0; uc_i < node_sw->switches_num; uc_i ++) {
     cbc:	2c 17       	cp	r18, r28
     cbe:	78 f3       	brcs	.-34     	; 0xc9e <ha_node_switch_create+0x68>
    }

// SWITCH DATA
//      TYPE(SWITCH) EVENT(%)
//
    node->tx_buf[NLINK_HDR_OFF_LEN] = 0;
     cc0:	1a 96       	adiw	r26, 0x0a	; 10
     cc2:	1c 92       	st	X, r1
     cc4:	1a 97       	sbiw	r26, 0x0a	; 10
    node->tx_buf[NLINK_HDR_OFF_TYPE] = NODE_TYPE_SWITCH;
     cc6:	80 e3       	ldi	r24, 0x30	; 48
     cc8:	19 96       	adiw	r26, 0x09	; 9
     cca:	8c 93       	st	X, r24
    
    return node_sw;
}
     ccc:	c8 01       	movw	r24, r16
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	08 95       	ret

00000ce0 <ha_node_switch_on_timer>:


void ha_node_switch_on_timer(ha_node_sw_info_t *node_sw)
{// +5 +2
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
    uint8_t  uc_i;
    uint8_t  uc_sw_state;
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();
     cea:	1d d2       	rcall	.+1082   	; 0x1126 <ha_node_switch_get_pins>

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	99 23       	and	r25, r25
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <ha_node_switch_on_timer+0x14>
     cf2:	57 c0       	rjmp	.+174    	; 0xda2 <ha_node_switch_on_timer+0xc2>
     cf4:	20 e0       	ldi	r18, 0x00	; 0
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
     cf6:	64 e0       	ldi	r22, 0x04	; 4
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD NEXT ---
     cf8:	73 e0       	ldi	r23, 0x03	; 3
                    sw->uc_hold_timer = SW_HOLD_TIMER;
     cfa:	a4 e6       	ldi	r26, 0x64	; 100

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
     cfc:	52 e0       	ldi	r21, 0x02	; 2
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];
     cfe:	ed 81       	ldd	r30, Y+5	; 0x05
     d00:	fe 81       	ldd	r31, Y+6	; 0x06
     d02:	97 e0       	ldi	r25, 0x07	; 7
     d04:	29 9f       	mul	r18, r25
     d06:	e0 0d       	add	r30, r0
     d08:	f1 1d       	adc	r31, r1
     d0a:	11 24       	eor	r1, r1

        uc_sw_state = sw->uc_prev_sw;
     d0c:	42 81       	ldd	r20, Z+2	; 0x02
        uc_curr_pin = !!(uc_sw_pins & sw->uc_pin_mask);
     d0e:	35 81       	ldd	r19, Z+5	; 0x05
     d10:	38 23       	and	r19, r24
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	09 f4       	brne	.+2      	; 0xd18 <ha_node_switch_on_timer+0x38>
     d16:	90 e0       	ldi	r25, 0x00	; 0

#if 1
        // ------------------------------------
        // --- debouncing
        // -----------------------------------
        if (uc_curr_pin != sw->uc_prev_pin) {
     d18:	31 81       	ldd	r19, Z+1	; 0x01
     d1a:	93 17       	cp	r25, r19
     d1c:	09 f4       	brne	.+2      	; 0xd20 <ha_node_switch_on_timer+0x40>
     d1e:	55 c0       	rjmp	.+170    	; 0xdca <ha_node_switch_on_timer+0xea>
            // current pin state differs from previous
            // increment debounce timer
            sw->uc_debounce_timer ++;
     d20:	34 81       	ldd	r19, Z+4	; 0x04
     d22:	3f 5f       	subi	r19, 0xFF	; 255
     d24:	34 83       	std	Z+4, r19	; 0x04

            if (sw->uc_debounce_timer == SW_DEBOUNCE_TIMER) {
     d26:	35 30       	cpi	r19, 0x05	; 5
     d28:	09 f4       	brne	.+2      	; 0xd2c <ha_node_switch_on_timer+0x4c>
     d2a:	52 c0       	rjmp	.+164    	; 0xdd0 <ha_node_switch_on_timer+0xf0>
    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];

        uc_sw_state = sw->uc_prev_sw;
     d2c:	94 2f       	mov	r25, r20
        }
#endif
        // ------------------------------------
        // --- transition proceed
        // -----------------------------------
        sw->uc_event = SW_EVENT_NONE;
     d2e:	10 82       	st	Z, r1

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
     d30:	91 11       	cpse	r25, r1
     d32:	3c c0       	rjmp	.+120    	; 0xdac <ha_node_switch_on_timer+0xcc>
     d34:	41 30       	cpi	r20, 0x01	; 1
     d36:	09 f4       	brne	.+2      	; 0xd3a <ha_node_switch_on_timer+0x5a>
     d38:	4e c0       	rjmp	.+156    	; 0xdd6 <ha_node_switch_on_timer+0xf6>
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
            }
        }
        else if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_PRESSED) {
     d3a:	41 11       	cpse	r20, r1
     d3c:	0b c0       	rjmp	.+22     	; 0xd54 <ha_node_switch_on_timer+0x74>
            if (sw->uc_hold_timer < SW_HOLD_TIMER_NEXT) {
     d3e:	33 81       	ldd	r19, Z+3	; 0x03
     d40:	36 39       	cpi	r19, 0x96	; 150
     d42:	40 f4       	brcc	.+16     	; 0xd54 <ha_node_switch_on_timer+0x74>
                // hold timer not saturated yet
                // increase hold timer & check saturation
                sw->uc_hold_timer ++;
     d44:	3f 5f       	subi	r19, 0xFF	; 255
     d46:	33 83       	std	Z+3, r19	; 0x03

                if (sw->uc_hold_timer == SW_HOLD_TIMER) {
     d48:	34 36       	cpi	r19, 0x64	; 100
     d4a:	09 f4       	brne	.+2      	; 0xd4e <ha_node_switch_on_timer+0x6e>
     d4c:	68 c0       	rjmp	.+208    	; 0xe1e <ha_node_switch_on_timer+0x13e>
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
     d4e:	36 39       	cpi	r19, 0x96	; 150
     d50:	09 f4       	brne	.+2      	; 0xd54 <ha_node_switch_on_timer+0x74>
     d52:	52 c0       	rjmp	.+164    	; 0xdf8 <ha_node_switch_on_timer+0x118>
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     d54:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     d56:	2f 5f       	subi	r18, 0xFF	; 255
     d58:	3c 81       	ldd	r19, Y+4	; 0x04
     d5a:	23 17       	cp	r18, r19
     d5c:	80 f2       	brcs	.-96     	; 0xcfe <ha_node_switch_on_timer+0x1e>
        sw->uc_prev_sw = uc_sw_state;

    } // End of switch loop

    // Check events - if any occur then send event
    node_t *node = node_sw->node;
     d5e:	0a 81       	ldd	r16, Y+2	; 0x02
     d60:	1b 81       	ldd	r17, Y+3	; 0x03
    uint8_t len = 0;
#if 1
     for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) {
     d62:	33 23       	and	r19, r19
     d64:	f1 f0       	breq	.+60     	; 0xda2 <ha_node_switch_on_timer+0xc2>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
        switch_info_t *sw = &node_sw->sw[uc_i];
     d6a:	ed 81       	ldd	r30, Y+5	; 0x05
     d6c:	fe 81       	ldd	r31, Y+6	; 0x06
     d6e:	87 e0       	ldi	r24, 0x07	; 7
     d70:	98 9f       	mul	r25, r24
     d72:	e0 0d       	add	r30, r0
     d74:	f1 1d       	adc	r31, r1
     d76:	11 24       	eor	r1, r1
        if (sw->uc_event != SW_EVENT_NONE) {
     d78:	20 81       	ld	r18, Z
     d7a:	22 23       	and	r18, r18
     d7c:	69 f0       	breq	.+26     	; 0xd98 <ha_node_switch_on_timer+0xb8>
            node->tx_buf[NLINK_HDR_OFF_DATA + len] = (uc_i << 4) | sw->uc_event;
     d7e:	d8 01       	movw	r26, r16
     d80:	a6 0f       	add	r26, r22
     d82:	b1 1d       	adc	r27, r1
     d84:	80 e1       	ldi	r24, 0x10	; 16
     d86:	98 9f       	mul	r25, r24
     d88:	a0 01       	movw	r20, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	24 2b       	or	r18, r20
     d8e:	1b 96       	adiw	r26, 0x0b	; 11
     d90:	2c 93       	st	X, r18
            sw->uc_event = SW_EVENT_NONE;
     d92:	10 82       	st	Z, r1
            len ++;
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	3c 81       	ldd	r19, Y+4	; 0x04

    // Check events - if any occur then send event
    node_t *node = node_sw->node;
    uint8_t len = 0;
#if 1
     for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) {
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	93 17       	cp	r25, r19
     d9c:	30 f3       	brcs	.-52     	; 0xd6a <ha_node_switch_on_timer+0x8a>
            len ++;
        }
    }
#endif    

    if (len) {
     d9e:	61 11       	cpse	r22, r1
     da0:	34 c0       	rjmp	.+104    	; 0xe0a <ha_node_switch_on_timer+0x12a>
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
        // TODO: configure the destination address ^^^ as a param
    }
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
        }
        else if (uc_sw_state == SW_PIN_RELEASED && sw->uc_prev_sw == SW_PIN_PRESSED) {
     dac:	91 30       	cpi	r25, 0x01	; 1
     dae:	91 f6       	brne	.-92     	; 0xd54 <ha_node_switch_on_timer+0x74>
     db0:	41 11       	cpse	r20, r1
     db2:	d0 cf       	rjmp	.-96     	; 0xd54 <ha_node_switch_on_timer+0x74>
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
     db4:	33 81       	ldd	r19, Z+3	; 0x03
     db6:	34 36       	cpi	r19, 0x64	; 100
     db8:	b8 f4       	brcc	.+46     	; 0xde8 <ha_node_switch_on_timer+0x108>
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
     dba:	90 83       	st	Z, r25
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     dbc:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	3c 81       	ldd	r19, Y+4	; 0x04
     dc2:	23 17       	cp	r18, r19
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <ha_node_switch_on_timer+0xe8>
     dc6:	9b cf       	rjmp	.-202    	; 0xcfe <ha_node_switch_on_timer+0x1e>
     dc8:	ca cf       	rjmp	.-108    	; 0xd5e <ha_node_switch_on_timer+0x7e>
                uc_sw_state = uc_curr_pin;
                sw->uc_debounce_timer = 0;
            }
        }
        else {
            sw->uc_debounce_timer = 0;
     dca:	14 82       	std	Z+4, r1	; 0x04
    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
        switch_info_t *sw = &node_sw->sw[uc_i];

        uc_sw_state = sw->uc_prev_sw;
     dcc:	94 2f       	mov	r25, r20
     dce:	af cf       	rjmp	.-162    	; 0xd2e <ha_node_switch_on_timer+0x4e>
            // increment debounce timer
            sw->uc_debounce_timer ++;

            if (sw->uc_debounce_timer == SW_DEBOUNCE_TIMER) {
                // debounce timer expired
                sw->uc_prev_pin = uc_curr_pin;
     dd0:	91 83       	std	Z+1, r25	; 0x01

                // modify current switch state (pressed/released)
                uc_sw_state = uc_curr_pin;
                sw->uc_debounce_timer = 0;
     dd2:	14 82       	std	Z+4, r1	; 0x04
     dd4:	ac cf       	rjmp	.-168    	; 0xd2e <ha_node_switch_on_timer+0x4e>
        sw->uc_event = SW_EVENT_NONE;

        if (uc_sw_state == SW_PIN_PRESSED && sw->uc_prev_sw == SW_PIN_RELEASED) {
            // released->pressed transition
            // clear hold timer
            sw->uc_hold_timer = 0;
     dd6:	13 82       	std	Z+3, r1	; 0x03
            sw->uc_event = SW_EVENT_OFF_ON;                                    // ---         OFF -> ON       ---
     dd8:	50 83       	st	Z, r21
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     dda:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	3c 81       	ldd	r19, Y+4	; 0x04
     de0:	23 17       	cp	r18, r19
     de2:	08 f4       	brcc	.+2      	; 0xde6 <ha_node_switch_on_timer+0x106>
     de4:	8c cf       	rjmp	.-232    	; 0xcfe <ha_node_switch_on_timer+0x1e>
     de6:	bb cf       	rjmp	.-138    	; 0xd5e <ha_node_switch_on_timer+0x7e>
            // pressed->released transition
            if (sw->uc_hold_timer < SW_HOLD_TIMER){
                sw->uc_event = SW_EVENT_ON_OFF;                                // ---         ON -> OFF        ---
            }
            else {
                sw->uc_event = SW_EVENT_HOLD_OFF;                              // ---         HOLD -> OFF      ---
     de8:	60 83       	st	Z, r22
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     dea:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3c 81       	ldd	r19, Y+4	; 0x04
     df0:	23 17       	cp	r18, r19
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <ha_node_switch_on_timer+0x116>
     df4:	84 cf       	rjmp	.-248    	; 0xcfe <ha_node_switch_on_timer+0x1e>
     df6:	b3 cf       	rjmp	.-154    	; 0xd5e <ha_node_switch_on_timer+0x7e>
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
                }

                if (sw->uc_hold_timer == SW_HOLD_TIMER_NEXT) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD NEXT ---
     df8:	70 83       	st	Z, r23
                    sw->uc_hold_timer = SW_HOLD_TIMER;
     dfa:	a3 83       	std	Z+3, r26	; 0x03
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     dfc:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3c 81       	ldd	r19, Y+4	; 0x04
     e02:	23 17       	cp	r18, r19
     e04:	08 f4       	brcc	.+2      	; 0xe08 <ha_node_switch_on_timer+0x128>
     e06:	7b cf       	rjmp	.-266    	; 0xcfe <ha_node_switch_on_timer+0x1e>
     e08:	aa cf       	rjmp	.-172    	; 0xd5e <ha_node_switch_on_timer+0x7e>
        }
    }
#endif    

    if (len) {
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
     e0a:	f8 01       	movw	r30, r16
     e0c:	62 87       	std	Z+10, r22	; 0x0a
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     e0e:	43 e0       	ldi	r20, 0x03	; 3
     e10:	6f ef       	ldi	r22, 0xFF	; 255
     e12:	c8 01       	movw	r24, r16
        // TODO: configure the destination address ^^^ as a param
    }
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
    }
#endif    

    if (len) {
        node->tx_buf[NLINK_HDR_OFF_LEN] = len;
        ha_nlink_node_send(node, NODE_ADDR_BC, NLINK_CMD_INFO);
     e1c:	a0 c9       	rjmp	.-3264   	; 0x15e <ha_nlink_node_send>
                // increase hold timer & check saturation
                sw->uc_hold_timer ++;

                if (sw->uc_hold_timer == SW_HOLD_TIMER) {
                    // report "switch hold" if timer saturated
                    sw->uc_event = SW_EVENT_ON_HOLD;                           // ---         ON -> HOLD      ---
     e1e:	70 83       	st	Z, r23
                    sw->uc_hold_timer = SW_HOLD_TIMER;
                }
            }
        } // End of switch held

        sw->uc_prev_sw = uc_sw_state;
     e20:	92 83       	std	Z+2, r25	; 0x02
    uint8_t  uc_sw_pins;
    uint8_t  uc_curr_pin;

    uc_sw_pins = ha_node_switch_get_pins();

    for (uc_i = 0; uc_i < node_sw->switches_num; uc_i++) { 
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3c 81       	ldd	r19, Y+4	; 0x04
     e26:	23 17       	cp	r18, r19
     e28:	08 f4       	brcc	.+2      	; 0xe2c <ha_node_switch_on_timer+0x14c>
     e2a:	69 cf       	rjmp	.-302    	; 0xcfe <ha_node_switch_on_timer+0x1e>
     e2c:	98 cf       	rjmp	.-208    	; 0xd5e <ha_node_switch_on_timer+0x7e>

00000e2e <ha_dev_base_get_in_pins>:
    // Select PWM register
    switch(ch_num) {
        case 0: // C1, WOB, PINA5
            TCD0.CMPBSET = SLOW_PWM_PERIOD - pwm_val;
            TCD0.CMPBCLR = SLOW_PWM_PERIOD;
            break;
     e2e:	82 b1       	in	r24, 0x02	; 2
     e30:	86 fb       	bst	r24, 6
     e32:	88 27       	eor	r24, r24
     e34:	80 f9       	bld	r24, 0
     e36:	17 99       	sbic	0x02, 7	; 2
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <ha_dev_base_get_in_pins+0x22>
     e3a:	35 99       	sbic	0x06, 5	; 6
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	34 99       	sbic	0x06, 4	; 6
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	33 99       	sbic	0x06, 3	; 6
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	50 99       	sbic	0x0a, 0	; 10
     e48:	80 62       	ori	r24, 0x20	; 32
     e4a:	52 99       	sbic	0x0a, 2	; 10
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	08 95       	ret
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	f3 cf       	rjmp	.-26     	; 0xe3a <ha_dev_base_get_in_pins+0xc>

00000e54 <fast_pwm_init>:
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	fa e0       	ldi	r31, 0x0A	; 10
     e58:	80 81       	ld	r24, Z
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	80 83       	st	Z, r24
     e5e:	8c e0       	ldi	r24, 0x0C	; 12
     e60:	85 83       	std	Z+5, r24	; 0x05
     e62:	87 e7       	ldi	r24, 0x77	; 119
     e64:	81 83       	std	Z+1, r24	; 0x01
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	83 83       	std	Z+3, r24	; 0x03
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	86 a3       	std	Z+38, r24	; 0x26
     e6e:	87 a3       	std	Z+39, r24	; 0x27
     e70:	80 81       	ld	r24, Z
     e72:	81 60       	ori	r24, 0x01	; 1
     e74:	80 83       	st	Z, r24
     e76:	10 a6       	std	Z+40, r1	; 0x28
     e78:	12 a6       	std	Z+42, r1	; 0x2a
     e7a:	14 a6       	std	Z+44, r1	; 0x2c
     e7c:	11 a6       	std	Z+41, r1	; 0x29
     e7e:	13 a6       	std	Z+43, r1	; 0x2b
     e80:	15 a6       	std	Z+45, r1	; 0x2d
     e82:	08 95       	ret

00000e84 <ha_nlink_gpio_init>:
     e84:	4d 9a       	sbi	0x09, 5	; 9
     e86:	45 98       	cbi	0x08, 5	; 8
     e88:	e0 e4       	ldi	r30, 0x40	; 64
     e8a:	f4 e0       	ldi	r31, 0x04	; 4
     e8c:	8b e0       	ldi	r24, 0x0B	; 11
     e8e:	85 8b       	std	Z+21, r24	; 0x15
     e90:	4c 98       	cbi	0x09, 4	; 9
     e92:	44 9a       	sbi	0x08, 4	; 8
     e94:	84 e0       	ldi	r24, 0x04	; 4
     e96:	84 8b       	std	Z+20, r24	; 0x14
     e98:	89 b1       	in	r24, 0x09	; 9
     e9a:	83 7f       	andi	r24, 0xF3	; 243
     e9c:	89 b9       	out	0x09, r24	; 9
     e9e:	88 b1       	in	r24, 0x08	; 8
     ea0:	8c 60       	ori	r24, 0x0C	; 12
     ea2:	88 b9       	out	0x08, r24	; 8
     ea4:	08 95       	ret

00000ea6 <ha_dev_base_init>:
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	88 ed       	ldi	r24, 0xD8	; 216
     eac:	84 bf       	out	0x34, r24	; 52
     eae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     eb2:	e0 e4       	ldi	r30, 0x40	; 64
     eb4:	fa e0       	ldi	r31, 0x0A	; 10
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	84 87       	std	Z+12, r24	; 0x0c
     ebc:	95 87       	std	Z+13, r25	; 0x0d
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	96 83       	std	Z+6, r25	; 0x06
     ec2:	95 83       	std	Z+5, r25	; 0x05
     ec4:	87 e0       	ldi	r24, 0x07	; 7
     ec6:	81 83       	std	Z+1, r24	; 0x01
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	80 83       	st	Z, r24
     ecc:	88 e0       	ldi	r24, 0x08	; 8
     ece:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
     ed2:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <__TEXT_REGION_LENGTH__+0x700417>
     ed6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     eda:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     ede:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     ee2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x700450>
     ee6:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x700452>
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	b4 e0       	ldi	r27, 0x04	; 4
     eee:	20 e4       	ldi	r18, 0x40	; 64
     ef0:	12 96       	adiw	r26, 0x02	; 2
     ef2:	2c 93       	st	X, r18
     ef4:	12 97       	sbiw	r26, 0x02	; 2
     ef6:	20 e8       	ldi	r18, 0x80	; 128
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	2c 93       	st	X, r18
     efc:	12 97       	sbiw	r26, 0x02	; 2
     efe:	e0 e2       	ldi	r30, 0x20	; 32
     f00:	f4 e0       	ldi	r31, 0x04	; 4
     f02:	50 e2       	ldi	r21, 0x20	; 32
     f04:	52 83       	std	Z+2, r21	; 0x02
     f06:	40 e1       	ldi	r20, 0x10	; 16
     f08:	42 83       	std	Z+2, r20	; 0x02
     f0a:	82 83       	std	Z+2, r24	; 0x02
     f0c:	c0 e4       	ldi	r28, 0x40	; 64
     f0e:	d4 e0       	ldi	r29, 0x04	; 4
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	34 e0       	ldi	r19, 0x04	; 4
     f14:	3a 83       	std	Y+2, r19	; 0x02
     f16:	16 96       	adiw	r26, 0x06	; 6
     f18:	5c 93       	st	X, r21
     f1a:	16 97       	sbiw	r26, 0x06	; 6
     f1c:	16 96       	adiw	r26, 0x06	; 6
     f1e:	4c 93       	st	X, r20
     f20:	16 97       	sbiw	r26, 0x06	; 6
     f22:	16 96       	adiw	r26, 0x06	; 6
     f24:	8c 93       	st	X, r24
     f26:	16 97       	sbiw	r26, 0x06	; 6
     f28:	36 83       	std	Z+6, r19	; 0x06
     f2a:	22 e0       	ldi	r18, 0x02	; 2
     f2c:	26 83       	std	Z+6, r18	; 0x06
     f2e:	96 83       	std	Z+6, r25	; 0x06
     f30:	2e 83       	std	Y+6, r18	; 0x06
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	5c 93       	st	X, r21
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	4c 93       	st	X, r20
     f3c:	11 97       	sbiw	r26, 0x01	; 1
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	8c 93       	st	X, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	21 83       	std	Z+1, r18	; 0x01
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	29 83       	std	Y+1, r18	; 0x01
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	82 cf       	rjmp	.-252    	; 0xe54 <fast_pwm_init>

00000f50 <ha_dev_base_set_steady>:
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	71 f1       	breq	.+92     	; 0xfb0 <ha_dev_base_set_steady+0x60>
     f54:	38 f0       	brcs	.+14     	; 0xf64 <ha_dev_base_set_steady+0x14>
     f56:	80 31       	cpi	r24, 0x10	; 16
     f58:	a1 f0       	breq	.+40     	; 0xf82 <ha_dev_base_set_steady+0x32>
     f5a:	80 32       	cpi	r24, 0x20	; 32
     f5c:	e9 f1       	breq	.+122    	; 0xfd8 <ha_dev_base_set_steady+0x88>
     f5e:	88 30       	cpi	r24, 0x08	; 8
     f60:	d9 f0       	breq	.+54     	; 0xf98 <ha_dev_base_set_steady+0x48>
     f62:	08 95       	ret
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	79 f1       	breq	.+94     	; 0xfc6 <ha_dev_base_set_steady+0x76>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	09 f5       	brne	.+66     	; 0xfae <ha_dev_base_set_steady+0x5e>
     f6c:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     f70:	8f 7d       	andi	r24, 0xDF	; 223
     f72:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     f76:	80 e1       	ldi	r24, 0x10	; 16
     f78:	66 23       	and	r22, r22
     f7a:	11 f1       	breq	.+68     	; 0xfc0 <ha_dev_base_set_steady+0x70>
     f7c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     f80:	08 95       	ret
     f82:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	66 23       	and	r22, r22
     f90:	59 f0       	breq	.+22     	; 0xfa8 <ha_dev_base_set_steady+0x58>
     f92:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     f96:	08 95       	ret
     f98:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     f9c:	8b 7f       	andi	r24, 0xFB	; 251
     f9e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	61 11       	cpse	r22, r1
     fa6:	f5 cf       	rjmp	.-22     	; 0xf92 <ha_dev_base_set_steady+0x42>
     fa8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     fac:	08 95       	ret
     fae:	08 95       	ret
     fb0:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fb4:	8f 7e       	andi	r24, 0xEF	; 239
     fb6:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fba:	88 e0       	ldi	r24, 0x08	; 8
     fbc:	61 11       	cpse	r22, r1
     fbe:	de cf       	rjmp	.-68     	; 0xf7c <ha_dev_base_set_steady+0x2c>
     fc0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     fc4:	08 95       	ret
     fc6:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	66 23       	and	r22, r22
     fd4:	a9 f3       	breq	.-22     	; 0xfc0 <ha_dev_base_set_steady+0x70>
     fd6:	d2 cf       	rjmp	.-92     	; 0xf7c <ha_dev_base_set_steady+0x2c>
     fd8:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	66 23       	and	r22, r22
     fe6:	01 f3       	breq	.-64     	; 0xfa8 <ha_dev_base_set_steady+0x58>
     fe8:	d4 cf       	rjmp	.-88     	; 0xf92 <ha_dev_base_set_steady+0x42>

00000fea <ha_dev_base_set_fast_pwm>:
    }
}

void ha_dev_base_set_fast_pwm (uint8_t mask, uint8_t pwm_val_idx)
{
    uint8_t pwm_val = guca_pwm_intensity_table[pwm_val_idx];
     fea:	e6 2f       	mov	r30, r22
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	eb 5e       	subi	r30, 0xEB	; 235
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	90 81       	ld	r25, Z

    // Select PWM register
    // L0..2 => WO0..WO2 => C11, C9, C7 => PB0, PB1, PB2
    // H0..2 => WO3..WO5 =>  C5, C3, C1 => PA3, PA4, PA5

    switch(mask) {
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	29 f1       	breq	.+74     	; 0x1042 <ha_dev_base_set_fast_pwm+0x58>
     ff8:	38 f0       	brcs	.+14     	; 0x1008 <ha_dev_base_set_fast_pwm+0x1e>
     ffa:	80 31       	cpi	r24, 0x10	; 16
     ffc:	89 f0       	breq	.+34     	; 0x1020 <ha_dev_base_set_fast_pwm+0x36>
     ffe:	80 32       	cpi	r24, 0x20	; 32
    1000:	81 f1       	breq	.+96     	; 0x1062 <ha_dev_base_set_fast_pwm+0x78>
    1002:	88 30       	cpi	r24, 0x08	; 8
    1004:	a9 f0       	breq	.+42     	; 0x1030 <ha_dev_base_set_fast_pwm+0x46>
    1006:	08 95       	ret
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	19 f1       	breq	.+70     	; 0x1052 <ha_dev_base_set_fast_pwm+0x68>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	c1 f4       	brne	.+48     	; 0x1040 <ha_dev_base_set_fast_pwm+0x56>
        case 0x01: // C1
            TCA0.SPLIT.HCMP2 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP2EN_bm;
            break;
        case 0x02: // C3
            TCA0.SPLIT.HCMP1 = pwm_val;
    1010:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP1EN_bm;
    1014:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
    101e:	08 95       	ret
        case 0x08: // C7
            TCA0.SPLIT.LCMP2 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP2EN_bm;
            break;
        case 0x10: // C9
            TCA0.SPLIT.LCMP1 = pwm_val;
    1020:	90 93 2a 0a 	sts	0x0A2A, r25	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP1EN_bm;
    1024:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
    102e:	08 95       	ret
        case 0x04: // C5
            TCA0.SPLIT.HCMP0 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm;
            break;
        case 0x08: // C7
            TCA0.SPLIT.LCMP2 = pwm_val;
    1030:	90 93 2c 0a 	sts	0x0A2C, r25	; 0x800a2c <__TEXT_REGION_LENGTH__+0x700a2c>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP2EN_bm;
    1034:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
    103e:	08 95       	ret
    1040:	08 95       	ret
        case 0x02: // C3
            TCA0.SPLIT.HCMP1 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP1EN_bm;
            break;
        case 0x04: // C5
            TCA0.SPLIT.HCMP0 = pwm_val;
    1042:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm;
    1046:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
    1050:	08 95       	ret
    // L0..2 => WO0..WO2 => C11, C9, C7 => PB0, PB1, PB2
    // H0..2 => WO3..WO5 =>  C5, C3, C1 => PA3, PA4, PA5

    switch(mask) {
        case 0x01: // C1
            TCA0.SPLIT.HCMP2 = pwm_val;
    1052:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__TEXT_REGION_LENGTH__+0x700a2d>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP2EN_bm;
    1056:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
            break;
    1060:	08 95       	ret
        case 0x10: // C9
            TCA0.SPLIT.LCMP1 = pwm_val;
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP1EN_bm;
            break;
        case 0x20: // C11
            TCA0.SPLIT.LCMP0 = pwm_val;
    1062:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
            TCA0.SPLIT.CTRLB |= TCA_SPLIT_LCMP0EN_bm;
    1066:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1070:	08 95       	ret

00001072 <__vector_5>:
            break;
    }
}

ISR(PORTC_PORT_vect) {
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    if (NLINK_IO_RX_INTFLAG & NLINK_IO_RX_PIN_MASK) {
    1094:	5d 9b       	sbis	0x0b, 5	; 11
    1096:	03 c0       	rjmp	.+6      	; 0x109e <__vector_5+0x2c>
        NLINK_IO_RX_INTFLAG = NLINK_IO_RX_PIN_MASK;
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	8b b9       	out	0x0b, r24	; 11
        // Call NLINK start callback on RX pin falling edge
        isr_nlink_io_on_start_edge();
    109c:	c4 d9       	rcall	.-3192   	; 0x426 <isr_nlink_io_on_start_edge>
    }
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_13>:

// Interrupt triggered every 256 timer clocks and count periods
ISR(TCB0_INT_vect) {
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31

    // 256 clocks @ 20 MHz ==> 12.8usec
    TCB0.INTFLAGS = TCB_CAPT_bm;     // Clear CAPTURE interrupt
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
    10e8:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
    10ec:	87 fd       	sbrc	r24, 7
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <__vector_13+0x3a>
        g_ha_nlink_timer_cnt++;
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
        if (g_ha_nlink_timer_cnt == 20) {
    10f2:	84 31       	cpi	r24, 0x14	; 20
    10f4:	a1 f0       	breq	.+40     	; 0x111e <__vector_13+0x5e>
    // 256 clocks @ 20 MHz ==> 12.8usec
    TCB0.INTFLAGS = TCB_CAPT_bm;     // Clear CAPTURE interrupt

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
        g_ha_nlink_timer_cnt++;
    10f6:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
            g_ha_nlink_timer_cnt = 0;
            isr_nlink_io_on_timer();
        }
    }

    isr_ha_app_on_timer();
    10fa:	bc d0       	rcall	.+376    	; 0x1274 <isr_ha_app_on_timer>

}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

    // Call NLINK timer callback every 256usec
    if (g_ha_nlink_timer_cnt >= 0) {
        g_ha_nlink_timer_cnt++;
        if (g_ha_nlink_timer_cnt == 20) {
            g_ha_nlink_timer_cnt = 0;
    111e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__data_start>
            isr_nlink_io_on_timer();
    1122:	b0 d8       	rcall	.-3744   	; 0x284 <isr_nlink_io_on_timer>
    1124:	ea cf       	rjmp	.-44     	; 0x10fa <__vector_13+0x3a>

00001126 <ha_node_switch_get_pins>:
ha_node_sw_info_t *sw_blcn = NULL;
ha_node_roll_info_t *roll_blcn = NULL;

uint8_t ha_node_switch_get_pins() 
{
    return ha_dev_base_get_in_pins();
    1126:	83 ce       	rjmp	.-762    	; 0xe2e <ha_dev_base_get_in_pins>

00001128 <ha_node_roll_set_mode>:
}

void ha_node_roll_set_mode (const roll_ch_mask_t *ee_ch_mask, enum roll_mode_e roll_mode)
{
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	00 d0       	rcall	.+0      	; 0x1130 <ha_node_roll_set_mode+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	16 2f       	mov	r17, r22
    roll_ch_mask_t ch_mask;
    eeprom_read_block(&ch_mask, ee_ch_mask, sizeof(roll_ch_mask_t));
    1136:	42 e0       	ldi	r20, 0x02	; 2
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	bc 01       	movw	r22, r24
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	0f d2       	rcall	.+1054   	; 0x1560 <eeprom_read_block>
    
    switch (roll_mode) {
    1142:	11 30       	cpi	r17, 0x01	; 1
    1144:	d9 f0       	breq	.+54     	; 0x117c <ha_node_roll_set_mode+0x54>
    1146:	70 f0       	brcs	.+28     	; 0x1164 <ha_node_roll_set_mode+0x3c>
    1148:	12 30       	cpi	r17, 0x02	; 2
    114a:	31 f4       	brne	.+12     	; 0x1158 <ha_node_roll_set_mode+0x30>
        case ROLL_MODE_UP:
            ha_dev_base_set_steady(ch_mask.down, 0);
            ha_dev_base_set_steady(ch_mask.up,   1);
            break;
        case ROLL_MODE_DOWN:
            ha_dev_base_set_steady(ch_mask.up,   0);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	ff de       	rcall	.-514    	; 0xf50 <ha_dev_base_set_steady>
            ha_dev_base_set_steady(ch_mask.down, 1);
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	fc de       	rcall	.-520    	; 0xf50 <ha_dev_base_set_steady>
            ha_dev_base_set_steady(ch_mask.down, 0);
            ha_dev_base_set_steady(ch_mask.up,   0);
            break;
        break;
    }
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	08 95       	ret
        case ROLL_MODE_DOWN:
            ha_dev_base_set_steady(ch_mask.up,   0);
            ha_dev_base_set_steady(ch_mask.down, 1);
            break;
        case ROLL_MODE_STOP:
            ha_dev_base_set_steady(ch_mask.down, 0);
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	f3 de       	rcall	.-538    	; 0xf50 <ha_dev_base_set_steady>
            ha_dev_base_set_steady(ch_mask.up,   0);
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	f0 de       	rcall	.-544    	; 0xf50 <ha_dev_base_set_steady>
            break;
        break;
    }
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	08 95       	ret
    roll_ch_mask_t ch_mask;
    eeprom_read_block(&ch_mask, ee_ch_mask, sizeof(roll_ch_mask_t));
    
    switch (roll_mode) {
        case ROLL_MODE_UP:
            ha_dev_base_set_steady(ch_mask.down, 0);
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	e7 de       	rcall	.-562    	; 0xf50 <ha_dev_base_set_steady>
            ha_dev_base_set_steady(ch_mask.up,   1);
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	e4 de       	rcall	.-568    	; 0xf50 <ha_dev_base_set_steady>
            ha_dev_base_set_steady(ch_mask.down, 0);
            ha_dev_base_set_steady(ch_mask.up,   0);
            break;
        break;
    }
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <ha_node_ledlight_set_intensity>:

void ha_node_ledlight_set_intensity (uint8_t led_mask, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;
    1194:	63 31       	cpi	r22, 0x13	; 19
    1196:	10 f0       	brcs	.+4      	; 0x119c <ha_node_ledlight_set_intensity+0x8>

    if (intensity_idx == 0) {
        ha_dev_base_set_steady(led_mask, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
        ha_dev_base_set_steady(led_mask, 1);
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	da ce       	rjmp	.-588    	; 0xf50 <ha_dev_base_set_steady>

void ha_node_ledlight_set_intensity (uint8_t led_mask, uint8_t intensity_idx)
{
    if (intensity_idx >= INTENSITIES_NUM) intensity_idx = INTENSITIES_NUM - 1;

    if (intensity_idx == 0) {
    119c:	66 23       	and	r22, r22
    119e:	e9 f3       	breq	.-6      	; 0x119a <ha_node_ledlight_set_intensity+0x6>
        ha_dev_base_set_steady(led_mask, 0);
    } else if (intensity_idx == INTENSITIES_NUM - 1) {
    11a0:	62 31       	cpi	r22, 0x12	; 18
    11a2:	d1 f3       	breq	.-12     	; 0x1198 <ha_node_ledlight_set_intensity+0x4>
        ha_dev_base_set_steady(led_mask, 1);
    } else {
        ha_dev_base_set_fast_pwm(led_mask, intensity_idx);
    11a4:	22 cf       	rjmp	.-444    	; 0xfea <ha_dev_base_set_fast_pwm>

000011a6 <main>:
    }
}

int main(void)
{
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
	...
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){

        __asm__ __volatile__ ("    nop\n    nop\n    nop\n    nop\n"\
    11c8:	81 50       	subi	r24, 0x01	; 1
}

int main(void)
{
    // Wait a little just in case
    for(uint8_t uc_i = 0; uc_i < 255U; uc_i++){
    11ca:	71 f7       	brne	.-36     	; 0x11a8 <main+0x2>
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"
                                ::);
    }

    ha_dev_base_init();
    11cc:	6c de       	rcall	.-808    	; 0xea6 <ha_dev_base_init>

    ha_nlink_init();
    11ce:	53 d7       	rcall	.+3750   	; 0x2076 <__data_load_end+0xab3>

    ll_blcn   = ha_node_ledlight_create(&blcn_ll_cfg, &blcn_ll_action[0]);
    11d0:	65 ea       	ldi	r22, 0xA5	; 165
    11d2:	75 e9       	ldi	r23, 0x95	; 149
    11d4:	8f ea       	ldi	r24, 0xAF	; 175
    11d6:	95 e9       	ldi	r25, 0x95	; 149
    11d8:	22 db       	rcall	.-2492   	; 0x81e <ha_node_ledlight_create>
    11da:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <ll_blcn>
    11de:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <ll_blcn+0x1>
    sw_blcn   = ha_node_switch_create (&blcn_sw_cfg);
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	27 dd       	rcall	.-1458   	; 0xc36 <ha_node_switch_create>
    11e8:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <sw_blcn>
    11ec:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <sw_blcn+0x1>
    roll_blcn = ha_node_roll_create (&blcn_roll_cfg, &blcn_roll_action[0]);
    11f0:	6c e7       	ldi	r22, 0x7C	; 124
    11f2:	75 e9       	ldi	r23, 0x95	; 149
    11f4:	8f e9       	ldi	r24, 0x9F	; 159
    11f6:	95 e9       	ldi	r25, 0x95	; 149
    11f8:	92 dc       	rcall	.-1756   	; 0xb1e <ha_node_roll_create>
    11fa:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <__data_end>
    11fe:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <__data_end+0x1>

    sei();
    1202:	78 94       	sei
    1204:	04 c0       	rjmp	.+8      	; 0x120e <main+0x68>
            guc_led_intenisity_timer = 0;
            ha_node_ledlight_on_timer(ll_blcn);
            ha_node_roll_on_timer(roll_blcn);
        }
        
        if (guc_switches_timer) {
    1206:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <guc_switches_timer>
    120a:	81 11       	cpse	r24, r1
    120c:	2b c0       	rjmp	.+86     	; 0x1264 <main+0xbe>
	...
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"\
                              "    nop\n    nop\n    nop\n    nop\n"
                                ::);
                                
        ha_node_ledlight_on_idle(ll_blcn);
    122e:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <ll_blcn>
    1232:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <ll_blcn+0x1>
    1236:	ab da       	rcall	.-2730   	; 0x78e <ha_node_ledlight_on_idle>
                               
        ha_nlink_check_rx();
    1238:	9a d7       	rcall	.+3892   	; 0x216e <__data_load_end+0xbab>
        ha_nlink_check_tx();
    123a:	cb d7       	rcall	.+3990   	; 0x21d2 <__data_load_end+0xc0f>
        
        if (guc_led_intenisity_timer) {
    123c:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <guc_led_intenisity_timer>
    1240:	88 23       	and	r24, r24
    1242:	09 f3       	breq	.-62     	; 0x1206 <main+0x60>
            // 10ms timer
            guc_led_intenisity_timer = 0;
    1244:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <guc_led_intenisity_timer>
            ha_node_ledlight_on_timer(ll_blcn);
    1248:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <ll_blcn>
    124c:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <ll_blcn+0x1>
    1250:	9c db       	rcall	.-2248   	; 0x98a <ha_node_ledlight_on_timer>
            ha_node_roll_on_timer(roll_blcn);
    1252:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
    1256:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
    125a:	a7 dc       	rcall	.-1714   	; 0xbaa <ha_node_roll_on_timer>
        }
        
        if (guc_switches_timer) {
    125c:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <guc_switches_timer>
    1260:	88 23       	and	r24, r24
    1262:	a9 f2       	breq	.-86     	; 0x120e <main+0x68>
            // 10ms timer
            guc_switches_timer = 0;
    1264:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <guc_switches_timer>
            ha_node_switch_on_timer(sw_blcn);
    1268:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <sw_blcn>
    126c:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <sw_blcn+0x1>
    1270:	37 dd       	rcall	.-1426   	; 0xce0 <ha_node_switch_on_timer>
    1272:	cd cf       	rjmp	.-102    	; 0x120e <main+0x68>

00001274 <isr_ha_app_on_timer>:
{
    // AV: Need to be reworked for 10ms timer common for all nodes types
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    1274:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <g_led_intensity_cnt>
    1278:	90 91 13 3e 	lds	r25, 0x3E13	; 0x803e13 <g_led_intensity_cnt+0x1>
    127c:	01 96       	adiw	r24, 0x01	; 1
    if (g_led_intensity_cnt == 781) {
    127e:	8d 30       	cpi	r24, 0x0D	; 13
    1280:	23 e0       	ldi	r18, 0x03	; 3
    1282:	92 07       	cpc	r25, r18
    1284:	d1 f0       	breq	.+52     	; 0x12ba <isr_ha_app_on_timer+0x46>
{
    // AV: Need to be reworked for 10ms timer common for all nodes types
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    1286:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <g_led_intensity_cnt>
    128a:	90 93 13 3e 	sts	0x3E13, r25	; 0x803e13 <g_led_intensity_cnt+0x1>
        g_led_intensity_cnt = 0;
        guc_led_intenisity_timer = 1;
    }

    // Set switch timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_switches_cnt++;
    128e:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <g_switches_cnt>
    1292:	90 91 10 3e 	lds	r25, 0x3E10	; 0x803e10 <g_switches_cnt+0x1>
    1296:	01 96       	adiw	r24, 0x01	; 1
    if (g_switches_cnt == 781) {
    1298:	8d 30       	cpi	r24, 0x0D	; 13
    129a:	23 e0       	ldi	r18, 0x03	; 3
    129c:	92 07       	cpc	r25, r18
    129e:	29 f0       	breq	.+10     	; 0x12aa <isr_ha_app_on_timer+0x36>
        g_led_intensity_cnt = 0;
        guc_led_intenisity_timer = 1;
    }

    // Set switch timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_switches_cnt++;
    12a0:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <g_switches_cnt>
    12a4:	90 93 10 3e 	sts	0x3E10, r25	; 0x803e10 <g_switches_cnt+0x1>
    12a8:	08 95       	ret
    if (g_switches_cnt == 781) {
        g_switches_cnt = 0;
    12aa:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <g_switches_cnt>
    12ae:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <g_switches_cnt+0x1>
        guc_switches_timer = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <guc_switches_timer>
    12b8:	08 95       	ret
    // Called every 12.8usec
    
    // Set intensity timer every ~10ms ~= 781 * 12.8 = 9996.8us = 9.99ms
    g_led_intensity_cnt++;
    if (g_led_intensity_cnt == 781) {
        g_led_intensity_cnt = 0;
    12ba:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <g_led_intensity_cnt>
    12be:	10 92 13 3e 	sts	0x3E13, r1	; 0x803e13 <g_led_intensity_cnt+0x1>
        guc_led_intenisity_timer = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <guc_led_intenisity_timer>
    12c8:	e2 cf       	rjmp	.-60     	; 0x128e <isr_ha_app_on_timer+0x1a>

000012ca <calloc>:
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	86 9f       	mul	r24, r22
    12d4:	80 01       	movw	r16, r0
    12d6:	87 9f       	mul	r24, r23
    12d8:	10 0d       	add	r17, r0
    12da:	96 9f       	mul	r25, r22
    12dc:	10 0d       	add	r17, r0
    12de:	11 24       	eor	r1, r1
    12e0:	c8 01       	movw	r24, r16
    12e2:	0d d0       	rcall	.+26     	; 0x12fe <malloc>
    12e4:	ec 01       	movw	r28, r24
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <calloc+0x28>
    12ea:	a8 01       	movw	r20, r16
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	30 d1       	rcall	.+608    	; 0x1552 <memset>
    12f2:	ce 01       	movw	r24, r28
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <malloc>:
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	91 05       	cpc	r25, r1
    130a:	10 f4       	brcc	.+4      	; 0x1310 <malloc+0x12>
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	e0 91 6c 3e 	lds	r30, 0x3E6C	; 0x803e6c <__flp>
    1314:	f0 91 6d 3e 	lds	r31, 0x3E6D	; 0x803e6d <__flp+0x1>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	30 97       	sbiw	r30, 0x00	; 0
    1322:	19 f1       	breq	.+70     	; 0x136a <malloc+0x6c>
    1324:	40 81       	ld	r20, Z
    1326:	51 81       	ldd	r21, Z+1	; 0x01
    1328:	02 81       	ldd	r16, Z+2	; 0x02
    132a:	13 81       	ldd	r17, Z+3	; 0x03
    132c:	48 17       	cp	r20, r24
    132e:	59 07       	cpc	r21, r25
    1330:	c8 f0       	brcs	.+50     	; 0x1364 <malloc+0x66>
    1332:	84 17       	cp	r24, r20
    1334:	95 07       	cpc	r25, r21
    1336:	69 f4       	brne	.+26     	; 0x1352 <malloc+0x54>
    1338:	10 97       	sbiw	r26, 0x00	; 0
    133a:	31 f0       	breq	.+12     	; 0x1348 <malloc+0x4a>
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	0c 93       	st	X, r16
    1340:	12 97       	sbiw	r26, 0x02	; 2
    1342:	13 96       	adiw	r26, 0x03	; 3
    1344:	1c 93       	st	X, r17
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <malloc+0x98>
    1348:	00 93 6c 3e 	sts	0x3E6C, r16	; 0x803e6c <__flp>
    134c:	10 93 6d 3e 	sts	0x3E6D, r17	; 0x803e6d <__flp+0x1>
    1350:	22 c0       	rjmp	.+68     	; 0x1396 <malloc+0x98>
    1352:	21 15       	cp	r18, r1
    1354:	31 05       	cpc	r19, r1
    1356:	19 f0       	breq	.+6      	; 0x135e <malloc+0x60>
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	18 f4       	brcc	.+6      	; 0x1364 <malloc+0x66>
    135e:	9a 01       	movw	r18, r20
    1360:	bd 01       	movw	r22, r26
    1362:	ef 01       	movw	r28, r30
    1364:	df 01       	movw	r26, r30
    1366:	f8 01       	movw	r30, r16
    1368:	db cf       	rjmp	.-74     	; 0x1320 <malloc+0x22>
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	f9 f0       	breq	.+62     	; 0x13ae <malloc+0xb0>
    1370:	28 1b       	sub	r18, r24
    1372:	39 0b       	sbc	r19, r25
    1374:	24 30       	cpi	r18, 0x04	; 4
    1376:	31 05       	cpc	r19, r1
    1378:	80 f4       	brcc	.+32     	; 0x139a <malloc+0x9c>
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	61 15       	cp	r22, r1
    1380:	71 05       	cpc	r23, r1
    1382:	21 f0       	breq	.+8      	; 0x138c <malloc+0x8e>
    1384:	fb 01       	movw	r30, r22
    1386:	82 83       	std	Z+2, r24	; 0x02
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <malloc+0x96>
    138c:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <__flp>
    1390:	90 93 6d 3e 	sts	0x3E6D, r25	; 0x803e6d <__flp+0x1>
    1394:	fe 01       	movw	r30, r28
    1396:	32 96       	adiw	r30, 0x02	; 2
    1398:	44 c0       	rjmp	.+136    	; 0x1422 <malloc+0x124>
    139a:	fe 01       	movw	r30, r28
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	81 93       	st	Z+, r24
    13a2:	91 93       	st	Z+, r25
    13a4:	22 50       	subi	r18, 0x02	; 2
    13a6:	31 09       	sbc	r19, r1
    13a8:	28 83       	st	Y, r18
    13aa:	39 83       	std	Y+1, r19	; 0x01
    13ac:	3a c0       	rjmp	.+116    	; 0x1422 <malloc+0x124>
    13ae:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__brkval>
    13b2:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__brkval+0x1>
    13b6:	23 2b       	or	r18, r19
    13b8:	41 f4       	brne	.+16     	; 0x13ca <malloc+0xcc>
    13ba:	20 91 03 3e 	lds	r18, 0x3E03	; 0x803e03 <__malloc_heap_start>
    13be:	30 91 04 3e 	lds	r19, 0x3E04	; 0x803e04 <__malloc_heap_start+0x1>
    13c2:	20 93 6a 3e 	sts	0x3E6A, r18	; 0x803e6a <__brkval>
    13c6:	30 93 6b 3e 	sts	0x3E6B, r19	; 0x803e6b <__brkval+0x1>
    13ca:	20 91 01 3e 	lds	r18, 0x3E01	; 0x803e01 <__malloc_heap_end>
    13ce:	30 91 02 3e 	lds	r19, 0x3E02	; 0x803e02 <__malloc_heap_end+0x1>
    13d2:	21 15       	cp	r18, r1
    13d4:	31 05       	cpc	r19, r1
    13d6:	41 f4       	brne	.+16     	; 0x13e8 <malloc+0xea>
    13d8:	2d b7       	in	r18, 0x3d	; 61
    13da:	3e b7       	in	r19, 0x3e	; 62
    13dc:	40 91 05 3e 	lds	r20, 0x3E05	; 0x803e05 <__malloc_margin>
    13e0:	50 91 06 3e 	lds	r21, 0x3E06	; 0x803e06 <__malloc_margin+0x1>
    13e4:	24 1b       	sub	r18, r20
    13e6:	35 0b       	sbc	r19, r21
    13e8:	e0 91 6a 3e 	lds	r30, 0x3E6A	; 0x803e6a <__brkval>
    13ec:	f0 91 6b 3e 	lds	r31, 0x3E6B	; 0x803e6b <__brkval+0x1>
    13f0:	e2 17       	cp	r30, r18
    13f2:	f3 07       	cpc	r31, r19
    13f4:	a0 f4       	brcc	.+40     	; 0x141e <malloc+0x120>
    13f6:	2e 1b       	sub	r18, r30
    13f8:	3f 0b       	sbc	r19, r31
    13fa:	28 17       	cp	r18, r24
    13fc:	39 07       	cpc	r19, r25
    13fe:	78 f0       	brcs	.+30     	; 0x141e <malloc+0x120>
    1400:	ac 01       	movw	r20, r24
    1402:	4e 5f       	subi	r20, 0xFE	; 254
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	24 17       	cp	r18, r20
    1408:	35 07       	cpc	r19, r21
    140a:	48 f0       	brcs	.+18     	; 0x141e <malloc+0x120>
    140c:	4e 0f       	add	r20, r30
    140e:	5f 1f       	adc	r21, r31
    1410:	40 93 6a 3e 	sts	0x3E6A, r20	; 0x803e6a <__brkval>
    1414:	50 93 6b 3e 	sts	0x3E6B, r21	; 0x803e6b <__brkval+0x1>
    1418:	81 93       	st	Z+, r24
    141a:	91 93       	st	Z+, r25
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <malloc+0x124>
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	cf 01       	movw	r24, r30
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	08 95       	ret

0000142e <free>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	09 f4       	brne	.+2      	; 0x1438 <free+0xa>
    1436:	81 c0       	rjmp	.+258    	; 0x153a <free+0x10c>
    1438:	fc 01       	movw	r30, r24
    143a:	32 97       	sbiw	r30, 0x02	; 2
    143c:	12 82       	std	Z+2, r1	; 0x02
    143e:	13 82       	std	Z+3, r1	; 0x03
    1440:	a0 91 6c 3e 	lds	r26, 0x3E6C	; 0x803e6c <__flp>
    1444:	b0 91 6d 3e 	lds	r27, 0x3E6D	; 0x803e6d <__flp+0x1>
    1448:	10 97       	sbiw	r26, 0x00	; 0
    144a:	81 f4       	brne	.+32     	; 0x146c <free+0x3e>
    144c:	20 81       	ld	r18, Z
    144e:	31 81       	ldd	r19, Z+1	; 0x01
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__brkval>
    1458:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__brkval+0x1>
    145c:	28 17       	cp	r18, r24
    145e:	39 07       	cpc	r19, r25
    1460:	51 f5       	brne	.+84     	; 0x14b6 <free+0x88>
    1462:	e0 93 6a 3e 	sts	0x3E6A, r30	; 0x803e6a <__brkval>
    1466:	f0 93 6b 3e 	sts	0x3E6B, r31	; 0x803e6b <__brkval+0x1>
    146a:	67 c0       	rjmp	.+206    	; 0x153a <free+0x10c>
    146c:	ed 01       	movw	r28, r26
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	ce 17       	cp	r28, r30
    1474:	df 07       	cpc	r29, r31
    1476:	40 f4       	brcc	.+16     	; 0x1488 <free+0x5a>
    1478:	4a 81       	ldd	r20, Y+2	; 0x02
    147a:	5b 81       	ldd	r21, Y+3	; 0x03
    147c:	9e 01       	movw	r18, r28
    147e:	41 15       	cp	r20, r1
    1480:	51 05       	cpc	r21, r1
    1482:	f1 f0       	breq	.+60     	; 0x14c0 <free+0x92>
    1484:	ea 01       	movw	r28, r20
    1486:	f5 cf       	rjmp	.-22     	; 0x1472 <free+0x44>
    1488:	c2 83       	std	Z+2, r28	; 0x02
    148a:	d3 83       	std	Z+3, r29	; 0x03
    148c:	40 81       	ld	r20, Z
    148e:	51 81       	ldd	r21, Z+1	; 0x01
    1490:	84 0f       	add	r24, r20
    1492:	95 1f       	adc	r25, r21
    1494:	c8 17       	cp	r28, r24
    1496:	d9 07       	cpc	r29, r25
    1498:	59 f4       	brne	.+22     	; 0x14b0 <free+0x82>
    149a:	88 81       	ld	r24, Y
    149c:	99 81       	ldd	r25, Y+1	; 0x01
    149e:	84 0f       	add	r24, r20
    14a0:	95 1f       	adc	r25, r21
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	82 83       	std	Z+2, r24	; 0x02
    14ae:	93 83       	std	Z+3, r25	; 0x03
    14b0:	21 15       	cp	r18, r1
    14b2:	31 05       	cpc	r19, r1
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <free+0x92>
    14b6:	e0 93 6c 3e 	sts	0x3E6C, r30	; 0x803e6c <__flp>
    14ba:	f0 93 6d 3e 	sts	0x3E6D, r31	; 0x803e6d <__flp+0x1>
    14be:	3d c0       	rjmp	.+122    	; 0x153a <free+0x10c>
    14c0:	e9 01       	movw	r28, r18
    14c2:	ea 83       	std	Y+2, r30	; 0x02
    14c4:	fb 83       	std	Y+3, r31	; 0x03
    14c6:	49 91       	ld	r20, Y+
    14c8:	59 91       	ld	r21, Y+
    14ca:	c4 0f       	add	r28, r20
    14cc:	d5 1f       	adc	r29, r21
    14ce:	ec 17       	cp	r30, r28
    14d0:	fd 07       	cpc	r31, r29
    14d2:	61 f4       	brne	.+24     	; 0x14ec <free+0xbe>
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	84 0f       	add	r24, r20
    14da:	95 1f       	adc	r25, r21
    14dc:	02 96       	adiw	r24, 0x02	; 2
    14de:	e9 01       	movw	r28, r18
    14e0:	88 83       	st	Y, r24
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	e0 e0       	ldi	r30, 0x00	; 0
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	12 96       	adiw	r26, 0x02	; 2
    14f2:	8d 91       	ld	r24, X+
    14f4:	9c 91       	ld	r25, X
    14f6:	13 97       	sbiw	r26, 0x03	; 3
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	19 f0       	breq	.+6      	; 0x1502 <free+0xd4>
    14fc:	fd 01       	movw	r30, r26
    14fe:	dc 01       	movw	r26, r24
    1500:	f7 cf       	rjmp	.-18     	; 0x14f0 <free+0xc2>
    1502:	8d 91       	ld	r24, X+
    1504:	9c 91       	ld	r25, X
    1506:	11 97       	sbiw	r26, 0x01	; 1
    1508:	9d 01       	movw	r18, r26
    150a:	2e 5f       	subi	r18, 0xFE	; 254
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	82 0f       	add	r24, r18
    1510:	93 1f       	adc	r25, r19
    1512:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__brkval>
    1516:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__brkval+0x1>
    151a:	28 17       	cp	r18, r24
    151c:	39 07       	cpc	r19, r25
    151e:	69 f4       	brne	.+26     	; 0x153a <free+0x10c>
    1520:	30 97       	sbiw	r30, 0x00	; 0
    1522:	29 f4       	brne	.+10     	; 0x152e <free+0x100>
    1524:	10 92 6c 3e 	sts	0x3E6C, r1	; 0x803e6c <__flp>
    1528:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <__flp+0x1>
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <free+0x104>
    152e:	12 82       	std	Z+2, r1	; 0x02
    1530:	13 82       	std	Z+3, r1	; 0x03
    1532:	a0 93 6a 3e 	sts	0x3E6A, r26	; 0x803e6a <__brkval>
    1536:	b0 93 6b 3e 	sts	0x3E6B, r27	; 0x803e6b <__brkval+0x1>
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <memcpy>:
    1540:	fb 01       	movw	r30, r22
    1542:	dc 01       	movw	r26, r24
    1544:	02 c0       	rjmp	.+4      	; 0x154a <memcpy+0xa>
    1546:	01 90       	ld	r0, Z+
    1548:	0d 92       	st	X+, r0
    154a:	41 50       	subi	r20, 0x01	; 1
    154c:	50 40       	sbci	r21, 0x00	; 0
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <memcpy+0x6>
    1550:	08 95       	ret

00001552 <memset>:
    1552:	dc 01       	movw	r26, r24
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <memset+0x6>
    1556:	6d 93       	st	X+, r22
    1558:	41 50       	subi	r20, 0x01	; 1
    155a:	50 40       	sbci	r21, 0x00	; 0
    155c:	e0 f7       	brcc	.-8      	; 0x1556 <memset+0x4>
    155e:	08 95       	ret

00001560 <eeprom_read_block>:
    1560:	60 50       	subi	r22, 0x00	; 0
    1562:	7c 4e       	sbci	r23, 0xEC	; 236
    1564:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <memcpy>

00001568 <eeprom_read_byte>:
    1568:	03 d0       	rcall	.+6      	; 0x1570 <eeprom_mapen>
    156a:	80 81       	ld	r24, Z
    156c:	99 27       	eor	r25, r25
    156e:	08 95       	ret

00001570 <eeprom_mapen>:
    1570:	fc 01       	movw	r30, r24
    1572:	e0 50       	subi	r30, 0x00	; 0
    1574:	fc 4e       	sbci	r31, 0xEC	; 236
    1576:	08 95       	ret

00001578 <_exit>:
    1578:	f8 94       	cli

0000157a <__stop_program>:
    157a:	ff cf       	rjmp	.-2      	; 0x157a <__stop_program>
